
// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
// </auto-generated>
using FirstLight.Game.Utils;
using UnityEditor;
using System;
using UnityEngine;
using System.Diagnostics.CodeAnalysis;


/* AUTO GENERATED CODE */
namespace FirstLight.Editor.EditorTools.Generated
{
	[InitializeOnLoad]
	[SuppressMessage("ReSharper", "InconsistentNaming")]
		public static class FlagsEditorMenu
	{



		static FlagsEditorMenu()
		{
				EditorApplication.delayCall += () =>
			{
				Menu.SetChecked("FLG/Local Flags/Use local server", IsUseLocalServer);
Menu.SetChecked("FLG/Local Flags/Offline mode", IsOfflineMode);
Menu.SetChecked("FLG/Local Flags/Use local configs", IsUseLocalConfigs);
Menu.SetChecked("FLG/Local Flags/Unblock NFTs only content", IsForceHasNfts);
Menu.SetChecked("FLG/Local Flags/Unblock Equipment requirements", IsIgnoreEquipmentRequirementForRanked);
Menu.SetChecked("FLG/Local Flags/Record quantum input", IsRecordQuantumInput);
Menu.SetChecked("FLG/Local Flags/Start Test Game automatically", IsStartTestGameAutomatically);
Menu.SetChecked("FLG/Local Flags/Force Authentication Connection Error", IsForceAuthError);

				Menu.SetChecked("FLG/Local Flags/Symbols/Enable bot debug visuals", IsBotDebug);

				UpdateSelectionTutorial();
UpdateSelectionEnvironmentOverride();
			};

		}

		
		private static bool IsUseLocalServer
		{
			get => FeatureFlags.GetLocalConfiguration().UseLocalServer;
			set
			{
				FeatureFlags.GetLocalConfiguration().UseLocalServer = value;
				Debug.Log("Setting UseLocalServer to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsOfflineMode
		{
			get => FeatureFlags.GetLocalConfiguration().OfflineMode;
			set
			{
				FeatureFlags.GetLocalConfiguration().OfflineMode = value;
				Debug.Log("Setting OfflineMode to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsUseLocalConfigs
		{
			get => FeatureFlags.GetLocalConfiguration().UseLocalConfigs;
			set
			{
				FeatureFlags.GetLocalConfiguration().UseLocalConfigs = value;
				Debug.Log("Setting UseLocalConfigs to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsForceHasNfts
		{
			get => FeatureFlags.GetLocalConfiguration().ForceHasNfts;
			set
			{
				FeatureFlags.GetLocalConfiguration().ForceHasNfts = value;
				Debug.Log("Setting ForceHasNfts to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsIgnoreEquipmentRequirementForRanked
		{
			get => FeatureFlags.GetLocalConfiguration().IgnoreEquipmentRequirementForRanked;
			set
			{
				FeatureFlags.GetLocalConfiguration().IgnoreEquipmentRequirementForRanked = value;
				Debug.Log("Setting IgnoreEquipmentRequirementForRanked to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsRecordQuantumInput
		{
			get => FeatureFlags.GetLocalConfiguration().RecordQuantumInput;
			set
			{
				FeatureFlags.GetLocalConfiguration().RecordQuantumInput = value;
				Debug.Log("Setting RecordQuantumInput to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsStartTestGameAutomatically
		{
			get => FeatureFlags.GetLocalConfiguration().StartTestGameAutomatically;
			set
			{
				FeatureFlags.GetLocalConfiguration().StartTestGameAutomatically = value;
				Debug.Log("Setting StartTestGameAutomatically to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsForceAuthError
		{
			get => FeatureFlags.GetLocalConfiguration().ForceAuthError;
			set
			{
				FeatureFlags.GetLocalConfiguration().ForceAuthError = value;
				Debug.Log("Setting ForceAuthError to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}

		
				private static bool IsBotDebug
		{
			get => FlagMenuGenerator.IsSymbolDefined("DEBUG_BOTS");
			set => FlagMenuGenerator.SetCompileDefine("DEBUG_BOTS", value);
		}


		
		[MenuItem("FLG/Local Flags/Use local server", false, 5)]
		private static void ToggleUseLocalServer()
		{
			IsUseLocalServer = !IsUseLocalServer;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Use local server", IsUseLocalServer); };
		}


		[MenuItem("FLG/Local Flags/Offline mode", false, 5)]
		private static void ToggleOfflineMode()
		{
			IsOfflineMode = !IsOfflineMode;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Offline mode", IsOfflineMode); };
		}


		[MenuItem("FLG/Local Flags/Use local configs", false, 5)]
		private static void ToggleUseLocalConfigs()
		{
			IsUseLocalConfigs = !IsUseLocalConfigs;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Use local configs", IsUseLocalConfigs); };
		}


		[MenuItem("FLG/Local Flags/Unblock NFTs only content", false, 5)]
		private static void ToggleForceHasNfts()
		{
			IsForceHasNfts = !IsForceHasNfts;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Unblock NFTs only content", IsForceHasNfts); };
		}


		[MenuItem("FLG/Local Flags/Unblock Equipment requirements", false, 5)]
		private static void ToggleIgnoreEquipmentRequirementForRanked()
		{
			IsIgnoreEquipmentRequirementForRanked = !IsIgnoreEquipmentRequirementForRanked;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Unblock Equipment requirements", IsIgnoreEquipmentRequirementForRanked); };
		}


		[MenuItem("FLG/Local Flags/Record quantum input", false, 5)]
		private static void ToggleRecordQuantumInput()
		{
			IsRecordQuantumInput = !IsRecordQuantumInput;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Record quantum input", IsRecordQuantumInput); };
		}


		[MenuItem("FLG/Local Flags/Start Test Game automatically", false, 5)]
		private static void ToggleStartTestGameAutomatically()
		{
			IsStartTestGameAutomatically = !IsStartTestGameAutomatically;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Start Test Game automatically", IsStartTestGameAutomatically); };
		}


		[MenuItem("FLG/Local Flags/Force Authentication Connection Error", false, 5)]
		private static void ToggleForceAuthError()
		{
			IsForceAuthError = !IsForceAuthError;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Force Authentication Connection Error", IsForceAuthError); };
		}

		
		[MenuItem("FLG/Local Flags/Symbols/Enable bot debug visuals",false,30)]
		private static void ToggleBotDebug()
		{
			IsBotDebug = !IsBotDebug;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Symbols/Enable bot debug visuals", IsBotDebug); };
		}


					
			private static void UpdateSelectionTutorial()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().Tutorial;

			foreach (var name in Enum.GetNames(typeof(FirstLight.Game.Utils.FlagOverwrite)))
			{
				var menuPath = $"FLG/Local Flags/Tutorial/{name}";
				Menu.SetChecked(menuPath, currentValue.ToString() == name);
			}
		}
		[MenuItem("FLG/Local Flags/Tutorial/None",false, 18)]
		private static void ToggleTutorialNone()
		{
			
			FeatureFlags.GetLocalConfiguration().Tutorial = FirstLight.Game.Utils.FlagOverwrite.None;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting Tutorial to FirstLight.Game.Utils.FlagOverwrite.None");
			EditorApplication.delayCall += UpdateSelectionTutorial; ;
		}

	[MenuItem("FLG/Local Flags/Tutorial/None",true,18)]
		private static bool ValidateTutorialNone()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().Tutorial;
			return currentValue.ToString() != "None";
		}

		[MenuItem("FLG/Local Flags/Tutorial/True",false, 18)]
		private static void ToggleTutorialTrue()
		{
			
			FeatureFlags.GetLocalConfiguration().Tutorial = FirstLight.Game.Utils.FlagOverwrite.True;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting Tutorial to FirstLight.Game.Utils.FlagOverwrite.True");
			EditorApplication.delayCall += UpdateSelectionTutorial; ;
		}

	[MenuItem("FLG/Local Flags/Tutorial/True",true,18)]
		private static bool ValidateTutorialTrue()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().Tutorial;
			return currentValue.ToString() != "True";
		}

		[MenuItem("FLG/Local Flags/Tutorial/False",false, 18)]
		private static void ToggleTutorialFalse()
		{
			
			FeatureFlags.GetLocalConfiguration().Tutorial = FirstLight.Game.Utils.FlagOverwrite.False;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting Tutorial to FirstLight.Game.Utils.FlagOverwrite.False");
			EditorApplication.delayCall += UpdateSelectionTutorial; ;
		}

	[MenuItem("FLG/Local Flags/Tutorial/False",true,18)]
		private static bool ValidateTutorialFalse()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().Tutorial;
			return currentValue.ToString() != "False";
		}

			
			private static void UpdateSelectionEnvironmentOverride()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().EnvironmentOverride;

			foreach (var name in Enum.GetNames(typeof(FirstLight.Game.Services.Environment)))
			{
				var menuPath = $"FLG/Local Flags/EnvironmentOverride/{name}";
				Menu.SetChecked(menuPath, currentValue.ToString() == name);
			}
		}
		[MenuItem("FLG/Local Flags/EnvironmentOverride/DEV",false, 18)]
		private static void ToggleEnvironmentOverrideDEV()
		{
			
			FeatureFlags.GetLocalConfiguration().EnvironmentOverride = FirstLight.Game.Services.Environment.DEV;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting EnvironmentOverride to FirstLight.Game.Services.Environment.DEV");
			EditorApplication.delayCall += UpdateSelectionEnvironmentOverride; ;
		}

	[MenuItem("FLG/Local Flags/EnvironmentOverride/DEV",true,18)]
		private static bool ValidateEnvironmentOverrideDEV()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().EnvironmentOverride;
			return currentValue.ToString() != "DEV";
		}

		[MenuItem("FLG/Local Flags/EnvironmentOverride/STAGING",false, 18)]
		private static void ToggleEnvironmentOverrideSTAGING()
		{
			
			FeatureFlags.GetLocalConfiguration().EnvironmentOverride = FirstLight.Game.Services.Environment.STAGING;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting EnvironmentOverride to FirstLight.Game.Services.Environment.STAGING");
			EditorApplication.delayCall += UpdateSelectionEnvironmentOverride; ;
		}

	[MenuItem("FLG/Local Flags/EnvironmentOverride/STAGING",true,18)]
		private static bool ValidateEnvironmentOverrideSTAGING()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().EnvironmentOverride;
			return currentValue.ToString() != "STAGING";
		}

		[MenuItem("FLG/Local Flags/EnvironmentOverride/TESTNET",false, 18)]
		private static void ToggleEnvironmentOverrideTESTNET()
		{
			
			FeatureFlags.GetLocalConfiguration().EnvironmentOverride = FirstLight.Game.Services.Environment.TESTNET;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting EnvironmentOverride to FirstLight.Game.Services.Environment.TESTNET");
			EditorApplication.delayCall += UpdateSelectionEnvironmentOverride; ;
		}

	[MenuItem("FLG/Local Flags/EnvironmentOverride/TESTNET",true,18)]
		private static bool ValidateEnvironmentOverrideTESTNET()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().EnvironmentOverride;
			return currentValue.ToString() != "TESTNET";
		}

		[MenuItem("FLG/Local Flags/EnvironmentOverride/PROD",false, 18)]
		private static void ToggleEnvironmentOverridePROD()
		{
			
			FeatureFlags.GetLocalConfiguration().EnvironmentOverride = FirstLight.Game.Services.Environment.PROD;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting EnvironmentOverride to FirstLight.Game.Services.Environment.PROD");
			EditorApplication.delayCall += UpdateSelectionEnvironmentOverride; ;
		}

	[MenuItem("FLG/Local Flags/EnvironmentOverride/PROD",true,18)]
		private static bool ValidateEnvironmentOverridePROD()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().EnvironmentOverride;
			return currentValue.ToString() != "PROD";
		}


	}
}