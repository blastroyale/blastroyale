// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0649
#pragma warning disable 1522
#pragma warning disable 0414
#pragma warning disable 0219
#pragma warning disable 0109

namespace Quantum {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  public enum BotBehaviourType : int {
    Balanced,
    Cautious,
    Aggressive,
  }
  public enum ConsumableType : int {
    Health,
    Rage,
    Ammo,
    InterimArmour,
    Stash,
  }
  [Flags()]
  public enum EWorldState : uint {
    None = 0,
    Idle = 1,
    CarryingTarget = 2,
    TargetDelivered = 4,
  }
  public enum GameId : int {
    Random = 0,
    RealMoney = 125,
    SC = 1,
    HC = 2,
    XP = 3,
    HcBundle1 = 146,
    HcBundle2 = 147,
    HcBundle3 = 148,
    ScBundle1 = 149,
    ScBundle2 = 150,
    ScBundle3 = 151,
    FloodCity = 137,
    MainDeck = 143,
    FtueDeck = 5,
    SmallWilderness = 144,
    FloodCitySimple = 7,
    BlimpDeck = 8,
    BRGenesis = 9,
    AssaultRifle = 23,
    MausHelmet = 24,
    GoldenBoots = 25,
    SoldierBoots = 26,
    RiotShield = 27,
    TikTokAmulet = 28,
    RoadSignArmour = 29,
    SniperRifle = 30,
    Hammer = 31,
    Laser = 32,
    RPG = 33,
    Shotgun = 34,
    AK47 = 35,
    BFG = 36,
    M60 = 37,
    MouseAmulet = 38,
    RiotAmulet = 39,
    SoldierAmulet = 40,
    WarriorAmulet = 41,
    MouseArmor = 42,
    RiotArmor = 43,
    SoldierArmor = 44,
    WarriorArmor = 45,
    MouseBoots = 46,
    RiotBoots = 47,
    WarriorBoots = 48,
    SoldierHelmet = 49,
    RiotHelmet = 50,
    WarriorHelmet = 51,
    MouseShield = 52,
    SoldierShield = 53,
    WarriorShield = 54,
    Male01Avatar = 55,
    Male02Avatar = 56,
    Female01Avatar = 57,
    Female02Avatar = 58,
    CommonBox = 97,
    UncommonBox = 98,
    RareBox = 99,
    EpicBox = 100,
    LegendaryBox = 101,
    CommonCore = 132,
    UncommonCore = 133,
    RareCore = 134,
    EpicCore = 135,
    LegendaryCore = 136,
    Rage = 64,
    Health = 4,
    AmmoSmall = 127,
    AmmoLarge = 128,
    InterimArmourSmall = 126,
    InterimArmourLarge = 129,
    ChestCommon = 13,
    ChestRare = 16,
    ChestLegendary = 19,
    SpecialAimingAirstrike = 10,
    SpecialAimingStunGrenade = 85,
    SpecialShieldSelf = 89,
    SpecialSkyLaserBeam = 110,
    SpecialShieldedCharge = 119,
    SpecialAimingGrenade = 102,
    SpecialDefaultDash = 141,
    EmojiAngry = 104,
    EmojiLove = 105,
    EmojiAngel = 106,
    EmojiCool = 107,
    EmojiSick = 108,
    Barrel = 109,
    DummyCharacter = 6,
    WeaponPlatformSpawner = 138,
    ConsumablePlatformSpawner = 140,
  }
  public enum GameIdGroup : int {
    GameDesign = 0,
    Currency = 1,
    PlayerValue = 2,
    IAP = 36,
    Map = 8,
    Weapon = 11,
    Equipment = 12,
    Helmet = 13,
    Boots = 14,
    BotItem = 4,
    Shield = 15,
    Amulet = 16,
    Armor = 17,
    PlayerSkin = 18,
    LootBox = 23,
    TimeBox = 30,
    CoreBox = 29,
    Collectable = 27,
    Consumable = 19,
    Special = 21,
    Emoji = 25,
    Destructible = 26,
    DummyCharacter = 3,
    Platform = 37,
  }
  public enum GameMode : int {
    Tutorial,
    Deathmatch,
    BattleRoyale,
  }
  public enum ItemAdjective : int {
    Regular,
    Cool,
    Ornate,
    Posh,
    Exquisite,
    Majestic,
    Marvelous,
    Magnificent,
    Royal,
    Divine,
    TOTAL,
  }
  public enum ItemFaction : int {
    Order,
    Chaos,
    Organic,
    Dark,
    Shadow,
    Celestial,
    Dimensional,
    TOTAL,
  }
  public enum ItemManufacturer : int {
    Military,
    Futuristic,
    Apocalyptic,
    TOTAL,
  }
  public enum ItemMaterial : int {
    Plastic,
    Steel,
    Bronze,
    Carbon,
    Golden,
    TOTAL,
  }
  public enum ItemRarity : int {
    Common,
    CommonPlus,
    Uncommon,
    UncommonPlus,
    Rare,
    RarePlus,
    Epic,
    EpicPlus,
    Legendary,
    LegendaryPlus,
    TOTAL,
  }
  public enum SpecialType : int {
    Airstrike,
    StunGrenade,
    ShieldSelfStatus,
    HazardAimSpawn,
    ShieldedCharge,
    Grenade,
  }
  public enum StatType : int {
    Health,
    Power,
    Speed,
    Armour,
    InterimArmour,
  }
  public enum StatusModifierType : int {
    None,
    Stun,
    Shield,
    Regeneration,
    Rage,
    Invisibility,
    Star,
  }
  public enum TargetingType : int {
    Nearest = 1,
    Furthest = 2,
  }
  public enum TeamType : int {
    Player,
    Enemy,
    Neutral,
    TOTAL,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
  }
  public static unsafe partial class InputButtons_ext {
    public static Boolean HasFlag(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [System.ObsoleteAttribute("This type will be removed with 2.1 release. Use instance methods instead.")]
  public static unsafe partial class BitSet {
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet1024* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet1024* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(((UInt64*)set), 128);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet128* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet128* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(((UInt64*)set), 16);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet2048* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet2048* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(((UInt64*)set), 256);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet256* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet256* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(((UInt64*)set), 32);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet32* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 32);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet32* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 32);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet32* set) {
      Native.Utils.Clear(((UInt64*)set), 8);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet32* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet4096* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet4096* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(((UInt64*)set), 512);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    [System.ObsoleteAttribute("Use instance Set method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Set(BitSet512* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      (((UInt64*)set)[bit/64]) |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void Clear(BitSet512* set, Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      (((UInt64*)set)[bit/64]) &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(((UInt64*)set), 64);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead. This method will be removed with 2.1 release.")]
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return ((((UInt64*)set)[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet1024 {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[16];
    public const Int32 BitsSize = 1024;
    public Int32 Length {
      get {
        return 1024;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet1024*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 1024, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(&set->bits[0], 128);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet1024 FromArray(UInt64[] values) {
      Assert.Always(16 == values.Length);
      BitSet1024 result = default;
      for (int i = 0; i < 16; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 128);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 37;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 16);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet1024*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 16);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet128* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet128* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(&set->bits[0], 16);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 41;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(&set->bits[0], 256);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 43;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet256* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet256* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(&set->bits[0], 32);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 47;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet32 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[1];
    public const Int32 BitsSize = 32;
    public Int32 Length {
      get {
        return 32;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet32*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 32, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet32* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet32* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet32* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet32* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet32 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length);
      BitSet32 result = default;
      for (int i = 0; i < 1; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 32);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 32);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 53;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet32*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(&set->bits[0], 512);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 59;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet512* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet512* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(&set->bits[0], 64);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 61;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIAction))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIAction : IEquatable<AssetRefAIAction>, IAssetRef<AIAction> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIAction(AIAction value) {
      var r = default(AssetRefAIAction);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIAction other && Equals(other);
    }
    public Boolean Equals(AssetRefAIAction other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIAction a, AssetRefAIAction b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIAction a, AssetRefAIAction b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 67;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIAction*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIBlackboard))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIBlackboard : IEquatable<AssetRefAIBlackboard>, IAssetRef<AIBlackboard> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIBlackboard(AIBlackboard value) {
      var r = default(AssetRefAIBlackboard);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIBlackboard other && Equals(other);
    }
    public Boolean Equals(AssetRefAIBlackboard other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIBlackboard a, AssetRefAIBlackboard b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIBlackboard a, AssetRefAIBlackboard b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 71;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIBlackboard*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIBlackboardInitializer))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIBlackboardInitializer : IEquatable<AssetRefAIBlackboardInitializer>, IAssetRef<AIBlackboardInitializer> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIBlackboardInitializer(AIBlackboardInitializer value) {
      var r = default(AssetRefAIBlackboardInitializer);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIBlackboardInitializer other && Equals(other);
    }
    public Boolean Equals(AssetRefAIBlackboardInitializer other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIBlackboardInitializer a, AssetRefAIBlackboardInitializer b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIBlackboardInitializer a, AssetRefAIBlackboardInitializer b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 73;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIBlackboardInitializer*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIConfig))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIConfig : IEquatable<AssetRefAIConfig>, IAssetRef<AIConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIConfig(AIConfig value) {
      var r = default(AssetRefAIConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefAIConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIConfig a, AssetRefAIConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIConfig a, AssetRefAIConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 79;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(AIFunction))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefAIFunction : IEquatable<AssetRefAIFunction>, IAssetRef<AIFunction> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefAIFunction(AIFunction value) {
      var r = default(AssetRefAIFunction);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefAIFunction other && Equals(other);
    }
    public Boolean Equals(AssetRefAIFunction other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefAIFunction a, AssetRefAIFunction b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefAIFunction a, AssetRefAIFunction b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 83;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefAIFunction*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTComposite))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTComposite : IEquatable<AssetRefBTComposite>, IAssetRef<BTComposite> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTComposite(BTComposite value) {
      var r = default(AssetRefBTComposite);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTComposite other && Equals(other);
    }
    public Boolean Equals(AssetRefBTComposite other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTComposite a, AssetRefBTComposite b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTComposite a, AssetRefBTComposite b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTComposite*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTDecorator))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTDecorator : IEquatable<AssetRefBTDecorator>, IAssetRef<BTDecorator> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTDecorator(BTDecorator value) {
      var r = default(AssetRefBTDecorator);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTDecorator other && Equals(other);
    }
    public Boolean Equals(AssetRefBTDecorator other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTDecorator a, AssetRefBTDecorator b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTDecorator a, AssetRefBTDecorator b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 97;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTDecorator*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTNode))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTNode : IEquatable<AssetRefBTNode>, IAssetRef<BTNode> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTNode(BTNode value) {
      var r = default(AssetRefBTNode);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTNode other && Equals(other);
    }
    public Boolean Equals(AssetRefBTNode other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTNode a, AssetRefBTNode b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTNode a, AssetRefBTNode b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 101;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTNode*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTRoot : IEquatable<AssetRefBTRoot>, IAssetRef<BTRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTRoot(BTRoot value) {
      var r = default(AssetRefBTRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefBTRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTRoot a, AssetRefBTRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTRoot a, AssetRefBTRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 103;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(BTService))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefBTService : IEquatable<AssetRefBTService>, IAssetRef<BTService> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefBTService(BTService value) {
      var r = default(AssetRefBTService);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefBTService other && Equals(other);
    }
    public Boolean Equals(AssetRefBTService other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefBTService a, AssetRefBTService b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefBTService a, AssetRefBTService b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 107;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefBTService*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(Consideration))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefConsideration : IEquatable<AssetRefConsideration>, IAssetRef<Consideration> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefConsideration(Consideration value) {
      var r = default(AssetRefConsideration);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefConsideration other && Equals(other);
    }
    public Boolean Equals(AssetRefConsideration other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefConsideration a, AssetRefConsideration b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefConsideration a, AssetRefConsideration b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 109;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefConsideration*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPAction))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPAction : IEquatable<AssetRefGOAPAction>, IAssetRef<GOAPAction> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPAction(GOAPAction value) {
      var r = default(AssetRefGOAPAction);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPAction other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPAction other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPAction a, AssetRefGOAPAction b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPAction a, AssetRefGOAPAction b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 113;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPAction*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPBackValidation))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPBackValidation : IEquatable<AssetRefGOAPBackValidation>, IAssetRef<GOAPBackValidation> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPBackValidation(GOAPBackValidation value) {
      var r = default(AssetRefGOAPBackValidation);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPBackValidation other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPBackValidation other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPBackValidation a, AssetRefGOAPBackValidation b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPBackValidation a, AssetRefGOAPBackValidation b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 127;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPBackValidation*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPGoal))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPGoal : IEquatable<AssetRefGOAPGoal>, IAssetRef<GOAPGoal> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPGoal(GOAPGoal value) {
      var r = default(AssetRefGOAPGoal);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPGoal other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPGoal other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPGoal a, AssetRefGOAPGoal b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPGoal a, AssetRefGOAPGoal b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 131;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPGoal*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPHeuristic))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPHeuristic : IEquatable<AssetRefGOAPHeuristic>, IAssetRef<GOAPHeuristic> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPHeuristic(GOAPHeuristic value) {
      var r = default(AssetRefGOAPHeuristic);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPHeuristic other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPHeuristic other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPHeuristic a, AssetRefGOAPHeuristic b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPHeuristic a, AssetRefGOAPHeuristic b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 137;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPHeuristic*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(GOAPRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefGOAPRoot : IEquatable<AssetRefGOAPRoot>, IAssetRef<GOAPRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefGOAPRoot(GOAPRoot value) {
      var r = default(AssetRefGOAPRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefGOAPRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefGOAPRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefGOAPRoot a, AssetRefGOAPRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefGOAPRoot a, AssetRefGOAPRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 139;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefGOAPRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMDecision))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMDecision : IEquatable<AssetRefHFSMDecision>, IAssetRef<HFSMDecision> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMDecision(HFSMDecision value) {
      var r = default(AssetRefHFSMDecision);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMDecision other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMDecision other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMDecision a, AssetRefHFSMDecision b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMDecision a, AssetRefHFSMDecision b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 149;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMDecision*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMRoot : IEquatable<AssetRefHFSMRoot>, IAssetRef<HFSMRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMRoot(HFSMRoot value) {
      var r = default(AssetRefHFSMRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMRoot a, AssetRefHFSMRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMRoot a, AssetRefHFSMRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 151;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMState))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMState : IEquatable<AssetRefHFSMState>, IAssetRef<HFSMState> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMState(HFSMState value) {
      var r = default(AssetRefHFSMState);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMState other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMState other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMState a, AssetRefHFSMState b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMState a, AssetRefHFSMState b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 157;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMState*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HFSMTransitionSet))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHFSMTransitionSet : IEquatable<AssetRefHFSMTransitionSet>, IAssetRef<HFSMTransitionSet> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHFSMTransitionSet(HFSMTransitionSet value) {
      var r = default(AssetRefHFSMTransitionSet);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHFSMTransitionSet other && Equals(other);
    }
    public Boolean Equals(AssetRefHFSMTransitionSet other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHFSMTransitionSet a, AssetRefHFSMTransitionSet b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHFSMTransitionSet a, AssetRefHFSMTransitionSet b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 163;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHFSMTransitionSet*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(QuantumAssetConfigs))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefQuantumAssetConfigs : IEquatable<AssetRefQuantumAssetConfigs>, IAssetRef<QuantumAssetConfigs> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefQuantumAssetConfigs(QuantumAssetConfigs value) {
      var r = default(AssetRefQuantumAssetConfigs);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefQuantumAssetConfigs other && Equals(other);
    }
    public Boolean Equals(AssetRefQuantumAssetConfigs other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefQuantumAssetConfigs a, AssetRefQuantumAssetConfigs b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefQuantumAssetConfigs a, AssetRefQuantumAssetConfigs b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 167;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefQuantumAssetConfigs*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(QuantumBotConfigs))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefQuantumBotConfigs : IEquatable<AssetRefQuantumBotConfigs>, IAssetRef<QuantumBotConfigs> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefQuantumBotConfigs(QuantumBotConfigs value) {
      var r = default(AssetRefQuantumBotConfigs);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefQuantumBotConfigs other && Equals(other);
    }
    public Boolean Equals(AssetRefQuantumBotConfigs other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefQuantumBotConfigs a, AssetRefQuantumBotConfigs b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefQuantumBotConfigs a, AssetRefQuantumBotConfigs b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 173;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefQuantumBotConfigs*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(QuantumConsumableConfigs))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefQuantumConsumableConfigs : IEquatable<AssetRefQuantumConsumableConfigs>, IAssetRef<QuantumConsumableConfigs> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefQuantumConsumableConfigs(QuantumConsumableConfigs value) {
      var r = default(AssetRefQuantumConsumableConfigs);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefQuantumConsumableConfigs other && Equals(other);
    }
    public Boolean Equals(AssetRefQuantumConsumableConfigs other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefQuantumConsumableConfigs a, AssetRefQuantumConsumableConfigs b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefQuantumConsumableConfigs a, AssetRefQuantumConsumableConfigs b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 179;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefQuantumConsumableConfigs*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(QuantumDestructibleConfigs))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefQuantumDestructibleConfigs : IEquatable<AssetRefQuantumDestructibleConfigs>, IAssetRef<QuantumDestructibleConfigs> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefQuantumDestructibleConfigs(QuantumDestructibleConfigs value) {
      var r = default(AssetRefQuantumDestructibleConfigs);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefQuantumDestructibleConfigs other && Equals(other);
    }
    public Boolean Equals(AssetRefQuantumDestructibleConfigs other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefQuantumDestructibleConfigs a, AssetRefQuantumDestructibleConfigs b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefQuantumDestructibleConfigs a, AssetRefQuantumDestructibleConfigs b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 181;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefQuantumDestructibleConfigs*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(QuantumGameConfigs))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefQuantumGameConfigs : IEquatable<AssetRefQuantumGameConfigs>, IAssetRef<QuantumGameConfigs> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefQuantumGameConfigs(QuantumGameConfigs value) {
      var r = default(AssetRefQuantumGameConfigs);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefQuantumGameConfigs other && Equals(other);
    }
    public Boolean Equals(AssetRefQuantumGameConfigs other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefQuantumGameConfigs a, AssetRefQuantumGameConfigs b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefQuantumGameConfigs a, AssetRefQuantumGameConfigs b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 191;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefQuantumGameConfigs*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(QuantumGearConfigs))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefQuantumGearConfigs : IEquatable<AssetRefQuantumGearConfigs>, IAssetRef<QuantumGearConfigs> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefQuantumGearConfigs(QuantumGearConfigs value) {
      var r = default(AssetRefQuantumGearConfigs);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefQuantumGearConfigs other && Equals(other);
    }
    public Boolean Equals(AssetRefQuantumGearConfigs other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefQuantumGearConfigs a, AssetRefQuantumGearConfigs b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefQuantumGearConfigs a, AssetRefQuantumGearConfigs b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 193;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefQuantumGearConfigs*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(QuantumShrinkingCircleConfigs))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefQuantumShrinkingCircleConfigs : IEquatable<AssetRefQuantumShrinkingCircleConfigs>, IAssetRef<QuantumShrinkingCircleConfigs> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefQuantumShrinkingCircleConfigs(QuantumShrinkingCircleConfigs value) {
      var r = default(AssetRefQuantumShrinkingCircleConfigs);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefQuantumShrinkingCircleConfigs other && Equals(other);
    }
    public Boolean Equals(AssetRefQuantumShrinkingCircleConfigs other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefQuantumShrinkingCircleConfigs a, AssetRefQuantumShrinkingCircleConfigs b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefQuantumShrinkingCircleConfigs a, AssetRefQuantumShrinkingCircleConfigs b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 197;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefQuantumShrinkingCircleConfigs*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(QuantumSpecialConfigs))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefQuantumSpecialConfigs : IEquatable<AssetRefQuantumSpecialConfigs>, IAssetRef<QuantumSpecialConfigs> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefQuantumSpecialConfigs(QuantumSpecialConfigs value) {
      var r = default(AssetRefQuantumSpecialConfigs);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefQuantumSpecialConfigs other && Equals(other);
    }
    public Boolean Equals(AssetRefQuantumSpecialConfigs other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefQuantumSpecialConfigs a, AssetRefQuantumSpecialConfigs b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefQuantumSpecialConfigs a, AssetRefQuantumSpecialConfigs b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 199;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefQuantumSpecialConfigs*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(QuantumWeaponConfigs))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefQuantumWeaponConfigs : IEquatable<AssetRefQuantumWeaponConfigs>, IAssetRef<QuantumWeaponConfigs> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefQuantumWeaponConfigs(QuantumWeaponConfigs value) {
      var r = default(AssetRefQuantumWeaponConfigs);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefQuantumWeaponConfigs other && Equals(other);
    }
    public Boolean Equals(AssetRefQuantumWeaponConfigs other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefQuantumWeaponConfigs a, AssetRefQuantumWeaponConfigs b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefQuantumWeaponConfigs a, AssetRefQuantumWeaponConfigs b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 211;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefQuantumWeaponConfigs*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(UTRoot))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefUTRoot : IEquatable<AssetRefUTRoot>, IAssetRef<UTRoot> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefUTRoot(UTRoot value) {
      var r = default(AssetRefUTRoot);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefUTRoot other && Equals(other);
    }
    public Boolean Equals(AssetRefUTRoot other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefUTRoot a, AssetRefUTRoot b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefUTRoot a, AssetRefUTRoot b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 223;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefUTRoot*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BTDataIndex {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Int32 Index;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 227;
        hash = hash * 31 + Index.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTDataIndex*)ptr;
        serializer.Stream.Serialize(&p->Index);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BlackboardEntry {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTDecorator))]
    private Ptr ReactiveDecoratorsPtr;
    [FieldOffset(8)]
    public BlackboardValue Value;
    public QListPtr<AssetRefBTDecorator> ReactiveDecorators {
      get {
        return new QListPtr<AssetRefBTDecorator>(ReactiveDecoratorsPtr);
      }
      set {
        ReactiveDecoratorsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 229;
        hash = hash * 31 + ReactiveDecoratorsPtr.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ReactiveDecoratorsPtr = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BlackboardEntry*)ptr;
        QList.Serialize(p->ReactiveDecorators, &p->ReactiveDecoratorsPtr, serializer, StaticDelegates.SerializeAssetRefBTDecorator);
        Quantum.BlackboardValue.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BotSDKData {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP ElapsedPartialTicks;
    [FieldOffset(0)]
    public Int32 ElapsedTicks;
    [FieldOffset(16)]
    public FP OriginalDeltaTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 233;
        hash = hash * 31 + ElapsedPartialTicks.GetHashCode();
        hash = hash * 31 + ElapsedTicks.GetHashCode();
        hash = hash * 31 + OriginalDeltaTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BotSDKData*)ptr;
        serializer.Stream.Serialize(&p->ElapsedTicks);
        FP.Serialize(&p->ElapsedPartialTicks, serializer);
        FP.Serialize(&p->OriginalDeltaTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct EntityPair {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public EntityRef Entity;
    [FieldOffset(8)]
    public FP Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 239;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EntityPair*)ptr;
        EntityRef.Serialize(&p->Entity, serializer);
        FP.Serialize(&p->Value, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Equipment {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    public ItemAdjective Adjective;
    [FieldOffset(8)]
    public ItemFaction Faction;
    [FieldOffset(0)]
    public GameId GameId;
    [FieldOffset(24)]
    public UInt32 Grade;
    [FieldOffset(28)]
    public UInt32 Level;
    [FieldOffset(12)]
    public ItemManufacturer Manufacturer;
    [FieldOffset(16)]
    public ItemMaterial Material;
    [FieldOffset(20)]
    public ItemRarity Rarity;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 241;
        hash = hash * 31 + (Int32)Adjective;
        hash = hash * 31 + (Int32)Faction;
        hash = hash * 31 + (Int32)GameId;
        hash = hash * 31 + Grade.GetHashCode();
        hash = hash * 31 + Level.GetHashCode();
        hash = hash * 31 + (Int32)Manufacturer;
        hash = hash * 31 + (Int32)Material;
        hash = hash * 31 + (Int32)Rarity;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Equipment*)ptr;
        serializer.Stream.Serialize((Int32*)&p->GameId);
        serializer.Stream.Serialize((Int32*)&p->Adjective);
        serializer.Stream.Serialize((Int32*)&p->Faction);
        serializer.Stream.Serialize((Int32*)&p->Manufacturer);
        serializer.Stream.Serialize((Int32*)&p->Material);
        serializer.Stream.Serialize((Int32*)&p->Rarity);
        serializer.Stream.Serialize(&p->Grade);
        serializer.Stream.Serialize(&p->Level);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GOAPState {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public EWorldState Negative;
    [FieldOffset(4)]
    public EWorldState Positive;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 251;
        hash = hash * 31 + (Int32)(UInt32)Negative;
        hash = hash * 31 + (Int32)(UInt32)Positive;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GOAPState*)ptr;
        serializer.Stream.Serialize((UInt32*)&p->Negative);
        serializer.Stream.Serialize((UInt32*)&p->Positive);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HFSMData {
    public const Int32 SIZE = 88;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefHFSMState CurrentState;
    [FieldOffset(0)]
    public AssetRefHFSMRoot Root;
    [FieldOffset(16)]
    public FP Time;
    [FieldOffset(24)]
    [FramePrinter.FixedArrayAttribute(typeof(FP), 8)]
    private fixed Byte _Times_[64];
    public FixedArray<FP> Times {
      get {
        fixed (byte* p = _Times_) { return new FixedArray<FP>(p, 8, 8); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 257;
        hash = hash * 31 + CurrentState.GetHashCode();
        hash = hash * 31 + Root.GetHashCode();
        hash = hash * 31 + Time.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Times);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HFSMData*)ptr;
        Quantum.AssetRefHFSMRoot.Serialize(&p->Root, serializer);
        Quantum.AssetRefHFSMState.Serialize(&p->CurrentState, serializer);
        FP.Serialize(&p->Time, serializer);
        FixedArray.Serialize(p->Times, serializer, StaticDelegates.SerializeFP);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 1;
    [FieldOffset(3)]
    private fixed Byte _alignment_padding_[1];
    [FieldOffset(0)]
    public Byte AimButtonState;
    [FieldOffset(1)]
    public Byte AimingDirectionEncoded;
    [FieldOffset(2)]
    public Byte MoveDirectionEncoded;
    public const int MAX_COUNT = 32;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 263;
        hash = hash * 31 + AimButtonState.GetHashCode();
        hash = hash * 31 + AimingDirectionEncoded.GetHashCode();
        hash = hash * 31 + MoveDirectionEncoded.GetHashCode();
        return hash;
      }
    }
    public static Input Read(FrameSerializer serializer) {
      Input i = new Input();
      Serialize(&i, serializer);
      return i;
    }
    public static void Write(FrameSerializer serializer, Input i) {
      Serialize(&i, serializer);
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
      }
      return false;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        serializer.Stream.Serialize(&p->AimButtonState);
        serializer.Stream.Serialize(&p->AimingDirectionEncoded);
        serializer.Stream.Serialize(&p->MoveDirectionEncoded);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Modifier {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public FP Duration;
    [FieldOffset(24)]
    public FP EndTime;
    [FieldOffset(8)]
    public UInt32 Id;
    [FieldOffset(0)]
    public QBoolean IsNegative;
    [FieldOffset(32)]
    public FP Power;
    [FieldOffset(4)]
    public StatType Type;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 269;
        hash = hash * 31 + Duration.GetHashCode();
        hash = hash * 31 + EndTime.GetHashCode();
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + IsNegative.GetHashCode();
        hash = hash * 31 + Power.GetHashCode();
        hash = hash * 31 + (Int32)Type;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Modifier*)ptr;
        QBoolean.Serialize(&p->IsNegative, serializer);
        serializer.Stream.Serialize((Int32*)&p->Type);
        serializer.Stream.Serialize(&p->Id);
        FP.Serialize(&p->Duration, serializer);
        FP.Serialize(&p->EndTime, serializer);
        FP.Serialize(&p->Power, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerMatchData {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    public Int32 BotNameIndex;
    [FieldOffset(12)]
    public UInt32 DamageDone;
    [FieldOffset(16)]
    public UInt32 DamageReceived;
    [FieldOffset(20)]
    public UInt32 DeathCount;
    [FieldOffset(56)]
    public EntityRef Entity;
    [FieldOffset(64)]
    public FP FirstDeathTime;
    [FieldOffset(24)]
    public UInt32 HealingDone;
    [FieldOffset(28)]
    public UInt32 HealingReceived;
    [FieldOffset(8)]
    public PlayerRef Player;
    [FieldOffset(32)]
    public UInt32 PlayerLevel;
    [FieldOffset(0)]
    public GameId PlayerSkin;
    [FieldOffset(36)]
    public UInt32 PlayerTrophies;
    [FieldOffset(40)]
    public UInt32 PlayersKilledCount;
    [FieldOffset(44)]
    public UInt32 SpecialsUsedCount;
    [FieldOffset(48)]
    public UInt32 SuicideCount;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 271;
        hash = hash * 31 + BotNameIndex.GetHashCode();
        hash = hash * 31 + DamageDone.GetHashCode();
        hash = hash * 31 + DamageReceived.GetHashCode();
        hash = hash * 31 + DeathCount.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + FirstDeathTime.GetHashCode();
        hash = hash * 31 + HealingDone.GetHashCode();
        hash = hash * 31 + HealingReceived.GetHashCode();
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerLevel.GetHashCode();
        hash = hash * 31 + (Int32)PlayerSkin;
        hash = hash * 31 + PlayerTrophies.GetHashCode();
        hash = hash * 31 + PlayersKilledCount.GetHashCode();
        hash = hash * 31 + SpecialsUsedCount.GetHashCode();
        hash = hash * 31 + SuicideCount.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerMatchData*)ptr;
        serializer.Stream.Serialize((Int32*)&p->PlayerSkin);
        serializer.Stream.Serialize(&p->BotNameIndex);
        PlayerRef.Serialize(&p->Player, serializer);
        serializer.Stream.Serialize(&p->DamageDone);
        serializer.Stream.Serialize(&p->DamageReceived);
        serializer.Stream.Serialize(&p->DeathCount);
        serializer.Stream.Serialize(&p->HealingDone);
        serializer.Stream.Serialize(&p->HealingReceived);
        serializer.Stream.Serialize(&p->PlayerLevel);
        serializer.Stream.Serialize(&p->PlayerTrophies);
        serializer.Stream.Serialize(&p->PlayersKilledCount);
        serializer.Stream.Serialize(&p->SpecialsUsedCount);
        serializer.Stream.Serialize(&p->SuicideCount);
        EntityRef.Serialize(&p->Entity, serializer);
        FP.Serialize(&p->FirstDeathTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Special {
    public const Int32 SIZE = 56;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP AvailableTime;
    [FieldOffset(16)]
    public FP Cooldown;
    [FieldOffset(24)]
    public FP MaxRange;
    [FieldOffset(32)]
    public FP PowerAmount;
    [FieldOffset(40)]
    public FP Radius;
    [FieldOffset(0)]
    public GameId SpecialId;
    [FieldOffset(4)]
    public SpecialType SpecialType;
    [FieldOffset(48)]
    public FP Speed;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 277;
        hash = hash * 31 + AvailableTime.GetHashCode();
        hash = hash * 31 + Cooldown.GetHashCode();
        hash = hash * 31 + MaxRange.GetHashCode();
        hash = hash * 31 + PowerAmount.GetHashCode();
        hash = hash * 31 + Radius.GetHashCode();
        hash = hash * 31 + (Int32)SpecialId;
        hash = hash * 31 + (Int32)SpecialType;
        hash = hash * 31 + Speed.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Special*)ptr;
        serializer.Stream.Serialize((Int32*)&p->SpecialId);
        serializer.Stream.Serialize((Int32*)&p->SpecialType);
        FP.Serialize(&p->AvailableTime, serializer);
        FP.Serialize(&p->Cooldown, serializer);
        FP.Serialize(&p->MaxRange, serializer);
        FP.Serialize(&p->PowerAmount, serializer);
        FP.Serialize(&p->Radius, serializer);
        FP.Serialize(&p->Speed, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct StatData {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP BaseValue;
    [FieldOffset(16)]
    public FP StatValue;
    [FieldOffset(0)]
    public StatType Type;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 281;
        hash = hash * 31 + BaseValue.GetHashCode();
        hash = hash * 31 + StatValue.GetHashCode();
        hash = hash * 31 + (Int32)Type;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (StatData*)ptr;
        serializer.Stream.Serialize((Int32*)&p->Type);
        FP.Serialize(&p->BaseValue, serializer);
        FP.Serialize(&p->StatValue, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UTMomentumData {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public Byte DecayAmount;
    [FieldOffset(4)]
    public Int32 Value;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 283;
        hash = hash * 31 + DecayAmount.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UTMomentumData*)ptr;
        serializer.Stream.Serialize(&p->DecayAmount);
        serializer.Stream.Serialize(&p->Value);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UTMomentumPack {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefConsideration ConsiderationRef;
    [FieldOffset(8)]
    public UTMomentumData MomentumData;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 293;
        hash = hash * 31 + ConsiderationRef.GetHashCode();
        hash = hash * 31 + MomentumData.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UTMomentumPack*)ptr;
        Quantum.AssetRefConsideration.Serialize(&p->ConsiderationRef, serializer);
        Quantum.UTMomentumData.Serialize(&p->MomentumData, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UtilityReasoner {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [HideInInspector()]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefConsideration))]
    private Ptr ConsiderationsPtr;
    [FieldOffset(4)]
    [HideInInspector()]
    [FramePrinter.PtrQDictionaryAttribute(typeof(AssetRefConsideration), typeof(FP))]
    private Ptr CooldownsDictPtr;
    [FieldOffset(8)]
    [HideInInspector()]
    [FramePrinter.PtrQListAttribute(typeof(UTMomentumPack))]
    private Ptr MomentumListPtr;
    [FieldOffset(16)]
    [HideInInspector()]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefConsideration))]
    private Ptr PreviousExecutionPtr;
    [FieldOffset(32)]
    [HideInInspector()]
    public FP TimeToTick;
    [FieldOffset(24)]
    public AssetRefUTRoot UTRoot;
    public QListPtr<AssetRefConsideration> Considerations {
      get {
        return new QListPtr<AssetRefConsideration>(ConsiderationsPtr);
      }
      set {
        ConsiderationsPtr = value.Ptr;
      }
    }
    public QDictionaryPtr<AssetRefConsideration, FP> CooldownsDict {
      get {
        return new QDictionaryPtr<AssetRefConsideration, FP>(CooldownsDictPtr);
      }
      set {
        CooldownsDictPtr = value.Ptr;
      }
    }
    public QListPtr<UTMomentumPack> MomentumList {
      get {
        return new QListPtr<UTMomentumPack>(MomentumListPtr);
      }
      set {
        MomentumListPtr = value.Ptr;
      }
    }
    public QListPtr<AssetRefConsideration> PreviousExecution {
      get {
        return new QListPtr<AssetRefConsideration>(PreviousExecutionPtr);
      }
      set {
        PreviousExecutionPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 307;
        hash = hash * 31 + ConsiderationsPtr.GetHashCode();
        hash = hash * 31 + CooldownsDictPtr.GetHashCode();
        hash = hash * 31 + MomentumListPtr.GetHashCode();
        hash = hash * 31 + PreviousExecutionPtr.GetHashCode();
        hash = hash * 31 + TimeToTick.GetHashCode();
        hash = hash * 31 + UTRoot.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ConsiderationsPtr = default;
      CooldownsDictPtr = default;
      MomentumListPtr = default;
      PreviousExecutionPtr = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UtilityReasoner*)ptr;
        QList.Serialize(p->Considerations, &p->ConsiderationsPtr, serializer, StaticDelegates.SerializeAssetRefConsideration);
        QDictionary.Serialize(p->CooldownsDict, &p->CooldownsDictPtr, serializer, StaticDelegates.SerializeAssetRefConsideration, StaticDelegates.SerializeFP);
        QList.Serialize(p->MomentumList, &p->MomentumListPtr, serializer, StaticDelegates.SerializeUTMomentumPack);
        QList.Serialize(p->PreviousExecution, &p->PreviousExecutionPtr, serializer, StaticDelegates.SerializeAssetRefConsideration);
        Quantum.AssetRefUTRoot.Serialize(&p->UTRoot, serializer);
        FP.Serialize(&p->TimeToTick, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 672;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(184)]
    public BotSDKData BotSDKData;
    [FieldOffset(152)]
    public FP DeltaTime;
    [FieldOffset(208)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(136)]
    public AssetRefMap Map;
    [FieldOffset(132)]
    public UInt32 ModifierIdCount;
    [FieldOffset(160)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(376)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(144)]
    public BitSet32 PlayerLastConnectionState;
    [FieldOffset(128)]
    [FramePrinter.PtrQListAttribute(typeof(EntityPair))]
    private Ptr QueriesPtr;
    [FieldOffset(168)]
    public RNGSession RngSession;
    [FieldOffset(248)]
    public BitSet1024 Systems;
    [FieldOffset(0)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 32)]
    private fixed Byte _input_[128];
    public QListPtr<EntityPair> Queries {
      get {
        return new QListPtr<EntityPair>(QueriesPtr);
      }
      set {
        QueriesPtr = value.Ptr;
      }
    }
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 4, 32); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 311;
        hash = hash * 31 + BotSDKData.GetHashCode();
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + ModifierIdCount.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + QueriesPtr.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      QueriesPtr = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        FixedArray.Serialize(p->input, serializer, StaticDelegates.SerializeInput);
        QList.Serialize(p->Queries, &p->QueriesPtr, serializer, StaticDelegates.SerializeEntityPair);
        serializer.Stream.Serialize(&p->ModifierIdCount);
        AssetRefMap.Serialize(&p->Map, serializer);
        Quantum.BitSet32.Serialize(&p->PlayerLastConnectionState, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        RNGSession.Serialize(&p->RngSession, serializer);
        Quantum.BotSDKData.Serialize(&p->BotSDKData, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct BTDataValue {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BTDataValue.FPVALUE)]
    private FP _FPValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BTDataValue.INTVALUE)]
    private Int32 _IntValue;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 FPVALUE = 1;
    public const Int32 INTVALUE = 2;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public FP* FPValue {
      get {
        fixed (FP* p = &_FPValue) {
          if (_field_used_ != FPVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = FPVALUE;
          }
          return p;
        }
      }
    }
    public Int32* IntValue {
      get {
        fixed (Int32* p = &_IntValue) {
          if (_field_used_ != INTVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = INTVALUE;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 313;
        hash = hash * 31 + _FPValue.GetHashCode();
        hash = hash * 31 + _IntValue.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTDataValue*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == FPVALUE) {
          FP.Serialize(&p->_FPValue, serializer);
        }
        if (p->_field_used_ == INTVALUE) {
          serializer.Stream.Serialize(&p->_IntValue);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Union()]
  public unsafe partial struct BlackboardValue {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.ASSETREFVALUE)]
    private AssetRef _AssetRefValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.BOOLEANVALUE)]
    private QBoolean _BooleanValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.BYTEVALUE)]
    private Byte _ByteValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.ENTITYREFVALUE)]
    private EntityRef _EntityRefValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVALUE)]
    private FP _FPValue;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVECTOR2VALUE)]
    private FPVector2 _FPVector2Value;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.FPVECTOR3VALUE)]
    private FPVector3 _FPVector3Value;
    [FieldOffset(8)]
    [FieldOverlap(8)]
    [FramePrinter.PrintIf("_field_used_", Quantum.BlackboardValue.INTEGERVALUE)]
    private Int32 _IntegerValue;
    [FieldOffset(0)]
    private Int32 _field_used_;
    public const Int32 BOOLEANVALUE = 1;
    public const Int32 BYTEVALUE = 2;
    public const Int32 INTEGERVALUE = 3;
    public const Int32 FPVALUE = 4;
    public const Int32 FPVECTOR2VALUE = 5;
    public const Int32 FPVECTOR3VALUE = 6;
    public const Int32 ENTITYREFVALUE = 7;
    public const Int32 ASSETREFVALUE = 8;
    public Int32 Field {
      get {
        return _field_used_;
      }
    }
    public AssetRef* AssetRefValue {
      get {
        fixed (AssetRef* p = &_AssetRefValue) {
          if (_field_used_ != ASSETREFVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = ASSETREFVALUE;
          }
          return p;
        }
      }
    }
    public QBoolean* BooleanValue {
      get {
        fixed (QBoolean* p = &_BooleanValue) {
          if (_field_used_ != BOOLEANVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = BOOLEANVALUE;
          }
          return p;
        }
      }
    }
    public Byte* ByteValue {
      get {
        fixed (Byte* p = &_ByteValue) {
          if (_field_used_ != BYTEVALUE) {
            Native.Utils.Clear(p, 1);
            _field_used_ = BYTEVALUE;
          }
          return p;
        }
      }
    }
    public EntityRef* EntityRefValue {
      get {
        fixed (EntityRef* p = &_EntityRefValue) {
          if (_field_used_ != ENTITYREFVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = ENTITYREFVALUE;
          }
          return p;
        }
      }
    }
    public FP* FPValue {
      get {
        fixed (FP* p = &_FPValue) {
          if (_field_used_ != FPVALUE) {
            Native.Utils.Clear(p, 8);
            _field_used_ = FPVALUE;
          }
          return p;
        }
      }
    }
    public FPVector2* FPVector2Value {
      get {
        fixed (FPVector2* p = &_FPVector2Value) {
          if (_field_used_ != FPVECTOR2VALUE) {
            Native.Utils.Clear(p, 16);
            _field_used_ = FPVECTOR2VALUE;
          }
          return p;
        }
      }
    }
    public FPVector3* FPVector3Value {
      get {
        fixed (FPVector3* p = &_FPVector3Value) {
          if (_field_used_ != FPVECTOR3VALUE) {
            Native.Utils.Clear(p, 24);
            _field_used_ = FPVECTOR3VALUE;
          }
          return p;
        }
      }
    }
    public Int32* IntegerValue {
      get {
        fixed (Int32* p = &_IntegerValue) {
          if (_field_used_ != INTEGERVALUE) {
            Native.Utils.Clear(p, 4);
            _field_used_ = INTEGERVALUE;
          }
          return p;
        }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 317;
        hash = hash * 31 + _AssetRefValue.GetHashCode();
        hash = hash * 31 + _BooleanValue.GetHashCode();
        hash = hash * 31 + _ByteValue.GetHashCode();
        hash = hash * 31 + _EntityRefValue.GetHashCode();
        hash = hash * 31 + _FPValue.GetHashCode();
        hash = hash * 31 + _FPVector2Value.GetHashCode();
        hash = hash * 31 + _FPVector3Value.GetHashCode();
        hash = hash * 31 + _IntegerValue.GetHashCode();
        hash = hash * 31 + _field_used_.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BlackboardValue*)ptr;
        serializer.Stream.Serialize(&p->_field_used_);
        if (p->_field_used_ == ASSETREFVALUE) {
          AssetRef.Serialize(&p->_AssetRefValue, serializer);
        }
        if (p->_field_used_ == BOOLEANVALUE) {
          QBoolean.Serialize(&p->_BooleanValue, serializer);
        }
        if (p->_field_used_ == BYTEVALUE) {
          serializer.Stream.Serialize(&p->_ByteValue);
        }
        if (p->_field_used_ == ENTITYREFVALUE) {
          EntityRef.Serialize(&p->_EntityRefValue, serializer);
        }
        if (p->_field_used_ == FPVALUE) {
          FP.Serialize(&p->_FPValue, serializer);
        }
        if (p->_field_used_ == FPVECTOR2VALUE) {
          FPVector2.Serialize(&p->_FPVector2Value, serializer);
        }
        if (p->_field_used_ == FPVECTOR3VALUE) {
          FPVector3.Serialize(&p->_FPVector3Value, serializer);
        }
        if (p->_field_used_ == INTEGERVALUE) {
          serializer.Stream.Serialize(&p->_IntegerValue);
        }
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AIBlackboardComponent : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefAIBlackboard Board;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(BlackboardEntry))]
    private Ptr EntriesPtr;
    public QListPtr<BlackboardEntry> Entries {
      get {
        return new QListPtr<BlackboardEntry>(EntriesPtr);
      }
      set {
        EntriesPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 331;
        hash = hash * 31 + Board.GetHashCode();
        hash = hash * 31 + EntriesPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      EntriesPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (AIBlackboardComponent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AIBlackboardComponent*)ptr;
        QList.Serialize(p->Entries, &p->EntriesPtr, serializer, StaticDelegates.SerializeBlackboardEntry);
        Quantum.AssetRefAIBlackboard.Serialize(&p->Board, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AlivePlayerCharacter : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 337;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AlivePlayerCharacter*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BTAgent : Quantum.IComponent {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int32 AbortNodeId;
    [FieldOffset(8)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTService))]
    private Ptr ActiveServicesPtr;
    [FieldOffset(16)]
    [FramePrinter.PtrQListAttribute(typeof(BTDataValue))]
    private Ptr BTDataValuesPtr;
    [FieldOffset(40)]
    public AssetRefAIConfig Config;
    [FieldOffset(48)]
    public AssetRefBTNode Current;
    [FieldOffset(24)]
    [FramePrinter.PtrQListAttribute(typeof(AssetRefBTComposite))]
    private Ptr DynamicCompositesPtr;
    [FieldOffset(28)]
    [FramePrinter.PtrQListAttribute(typeof(Byte))]
    private Ptr NodesStatusPtr;
    [FieldOffset(32)]
    [FramePrinter.PtrQListAttribute(typeof(FP))]
    private Ptr ServicesEndTimesPtr;
    [FieldOffset(56)]
    public AssetRefBTNode Tree;
    public QListPtr<AssetRefBTService> ActiveServices {
      get {
        return new QListPtr<AssetRefBTService>(ActiveServicesPtr);
      }
      set {
        ActiveServicesPtr = value.Ptr;
      }
    }
    public QListPtr<BTDataValue> BTDataValues {
      get {
        return new QListPtr<BTDataValue>(BTDataValuesPtr);
      }
      set {
        BTDataValuesPtr = value.Ptr;
      }
    }
    public QListPtr<AssetRefBTComposite> DynamicComposites {
      get {
        return new QListPtr<AssetRefBTComposite>(DynamicCompositesPtr);
      }
      set {
        DynamicCompositesPtr = value.Ptr;
      }
    }
    public QListPtr<Byte> NodesStatus {
      get {
        return new QListPtr<Byte>(NodesStatusPtr);
      }
      set {
        NodesStatusPtr = value.Ptr;
      }
    }
    public QListPtr<FP> ServicesEndTimes {
      get {
        return new QListPtr<FP>(ServicesEndTimesPtr);
      }
      set {
        ServicesEndTimesPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 347;
        hash = hash * 31 + AbortNodeId.GetHashCode();
        hash = hash * 31 + ActiveServicesPtr.GetHashCode();
        hash = hash * 31 + BTDataValuesPtr.GetHashCode();
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + Current.GetHashCode();
        hash = hash * 31 + DynamicCompositesPtr.GetHashCode();
        hash = hash * 31 + NodesStatusPtr.GetHashCode();
        hash = hash * 31 + ServicesEndTimesPtr.GetHashCode();
        hash = hash * 31 + Tree.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ActiveServicesPtr = default;
      BTDataValuesPtr = default;
      DynamicCompositesPtr = default;
      NodesStatusPtr = default;
      ServicesEndTimesPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (BTAgent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BTAgent*)ptr;
        serializer.Stream.Serialize(&p->AbortNodeId);
        QList.Serialize(p->ActiveServices, &p->ActiveServicesPtr, serializer, StaticDelegates.SerializeAssetRefBTService);
        QList.Serialize(p->BTDataValues, &p->BTDataValuesPtr, serializer, StaticDelegates.SerializeBTDataValue);
        QList.Serialize(p->DynamicComposites, &p->DynamicCompositesPtr, serializer, StaticDelegates.SerializeAssetRefBTComposite);
        QList.Serialize(p->NodesStatus, &p->NodesStatusPtr, serializer, StaticDelegates.SerializeByte);
        QList.Serialize(p->ServicesEndTimes, &p->ServicesEndTimesPtr, serializer, StaticDelegates.SerializeFP);
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        Quantum.AssetRefBTNode.Serialize(&p->Current, serializer);
        Quantum.AssetRefBTNode.Serialize(&p->Tree, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BotCharacter : Quantum.IComponent {
    public const Int32 SIZE = 392;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(12)]
    public UInt32 AccuracySpreadAngle;
    [FieldOffset(0)]
    public BotBehaviourType BehaviourType;
    [FieldOffset(8)]
    public Int32 BotNameIndex;
    [FieldOffset(24)]
    public FP ChanceToAbandonTarget;
    [FieldOffset(32)]
    public FP ChanceToSeekEnemies;
    [FieldOffset(40)]
    public FP ChanceToSeekRage;
    [FieldOffset(48)]
    public FP ChanceToSeekReplenishSpecials;
    [FieldOffset(56)]
    public FP ChanceToSeekWeapons;
    [FieldOffset(64)]
    public FP ChanceToUseSpecial;
    [FieldOffset(72)]
    public FP CloseFightIntolerance;
    [FieldOffset(80)]
    public FP DecisionInterval;
    [FieldOffset(168)]
    [FramePrinter.FixedArrayAttribute(typeof(Equipment), 6)]
    private fixed Byte _Gear_[192];
    [FieldOffset(88)]
    public FP LookForTargetsToShootAtInterval;
    [FieldOffset(96)]
    public FP LowAmmoSensitivity;
    [FieldOffset(104)]
    public FP LowArmourSensitivity;
    [FieldOffset(112)]
    public FP LowHealthSensitivity;
    [FieldOffset(120)]
    public FP NextDecisionTime;
    [FieldOffset(128)]
    public FP NextLookForTargetsToShootAtTime;
    [FieldOffset(136)]
    public FP ShrinkingCircleRiskTolerance;
    [FieldOffset(4)]
    public GameId Skin;
    [FieldOffset(144)]
    public FP SpecialAimingDeviation;
    [FieldOffset(16)]
    public EntityRef Target;
    [FieldOffset(152)]
    public FP VisionRangeSqr;
    [FieldOffset(160)]
    public FP WanderRadius;
    [FieldOffset(360)]
    public Equipment Weapon;
    public FixedArray<Equipment> Gear {
      get {
        fixed (byte* p = _Gear_) { return new FixedArray<Equipment>(p, 32, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 349;
        hash = hash * 31 + AccuracySpreadAngle.GetHashCode();
        hash = hash * 31 + (Int32)BehaviourType;
        hash = hash * 31 + BotNameIndex.GetHashCode();
        hash = hash * 31 + ChanceToAbandonTarget.GetHashCode();
        hash = hash * 31 + ChanceToSeekEnemies.GetHashCode();
        hash = hash * 31 + ChanceToSeekRage.GetHashCode();
        hash = hash * 31 + ChanceToSeekReplenishSpecials.GetHashCode();
        hash = hash * 31 + ChanceToSeekWeapons.GetHashCode();
        hash = hash * 31 + ChanceToUseSpecial.GetHashCode();
        hash = hash * 31 + CloseFightIntolerance.GetHashCode();
        hash = hash * 31 + DecisionInterval.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Gear);
        hash = hash * 31 + LookForTargetsToShootAtInterval.GetHashCode();
        hash = hash * 31 + LowAmmoSensitivity.GetHashCode();
        hash = hash * 31 + LowArmourSensitivity.GetHashCode();
        hash = hash * 31 + LowHealthSensitivity.GetHashCode();
        hash = hash * 31 + NextDecisionTime.GetHashCode();
        hash = hash * 31 + NextLookForTargetsToShootAtTime.GetHashCode();
        hash = hash * 31 + ShrinkingCircleRiskTolerance.GetHashCode();
        hash = hash * 31 + (Int32)Skin;
        hash = hash * 31 + SpecialAimingDeviation.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + VisionRangeSqr.GetHashCode();
        hash = hash * 31 + WanderRadius.GetHashCode();
        hash = hash * 31 + Weapon.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BotCharacter*)ptr;
        serializer.Stream.Serialize((Int32*)&p->BehaviourType);
        serializer.Stream.Serialize((Int32*)&p->Skin);
        serializer.Stream.Serialize(&p->BotNameIndex);
        serializer.Stream.Serialize(&p->AccuracySpreadAngle);
        EntityRef.Serialize(&p->Target, serializer);
        FP.Serialize(&p->ChanceToAbandonTarget, serializer);
        FP.Serialize(&p->ChanceToSeekEnemies, serializer);
        FP.Serialize(&p->ChanceToSeekRage, serializer);
        FP.Serialize(&p->ChanceToSeekReplenishSpecials, serializer);
        FP.Serialize(&p->ChanceToSeekWeapons, serializer);
        FP.Serialize(&p->ChanceToUseSpecial, serializer);
        FP.Serialize(&p->CloseFightIntolerance, serializer);
        FP.Serialize(&p->DecisionInterval, serializer);
        FP.Serialize(&p->LookForTargetsToShootAtInterval, serializer);
        FP.Serialize(&p->LowAmmoSensitivity, serializer);
        FP.Serialize(&p->LowArmourSensitivity, serializer);
        FP.Serialize(&p->LowHealthSensitivity, serializer);
        FP.Serialize(&p->NextDecisionTime, serializer);
        FP.Serialize(&p->NextLookForTargetsToShootAtTime, serializer);
        FP.Serialize(&p->ShrinkingCircleRiskTolerance, serializer);
        FP.Serialize(&p->SpecialAimingDeviation, serializer);
        FP.Serialize(&p->VisionRangeSqr, serializer);
        FP.Serialize(&p->WanderRadius, serializer);
        FixedArray.Serialize(p->Gear, serializer, StaticDelegates.SerializeEquipment);
        Quantum.Equipment.Serialize(&p->Weapon, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Collectable : Quantum.IComponent {
    public const Int32 SIZE = 264;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [HideInInspector()]
    [FramePrinter.FixedArrayAttribute(typeof(FP), 32)]
    private fixed Byte _CollectorsEndTime_[256];
    [FieldOffset(0)]
    [HideInInspector()]
    public GameId GameId;
    [FieldOffset(4)]
    [HideInInspector()]
    public QBoolean IsCollected;
    public FixedArray<FP> CollectorsEndTime {
      get {
        fixed (byte* p = _CollectorsEndTime_) { return new FixedArray<FP>(p, 8, 32); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 353;
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(CollectorsEndTime);
        hash = hash * 31 + (Int32)GameId;
        hash = hash * 31 + IsCollected.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Collectable*)ptr;
        serializer.Stream.Serialize((Int32*)&p->GameId);
        QBoolean.Serialize(&p->IsCollected, serializer);
        FixedArray.Serialize(p->CollectorsEndTime, serializer, StaticDelegates.SerializeFP);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct CollectablePlatformSpawner : Quantum.IComponent {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    [HideInInspector()]
    public EntityRef Collectable;
    [FieldOffset(0)]
    public GameId GameId;
    [FieldOffset(4)]
    public UInt32 InitialSpawnDelayInSec;
    [FieldOffset(24)]
    [HideInInspector()]
    public FP NextSpawnTime;
    [FieldOffset(8)]
    public UInt32 RespawnTimeInSec;
    [FieldOffset(12)]
    [HideInInspector()]
    public UInt32 SpawnCount;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 359;
        hash = hash * 31 + Collectable.GetHashCode();
        hash = hash * 31 + (Int32)GameId;
        hash = hash * 31 + InitialSpawnDelayInSec.GetHashCode();
        hash = hash * 31 + NextSpawnTime.GetHashCode();
        hash = hash * 31 + RespawnTimeInSec.GetHashCode();
        hash = hash * 31 + SpawnCount.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (CollectablePlatformSpawner*)ptr;
        serializer.Stream.Serialize((Int32*)&p->GameId);
        serializer.Stream.Serialize(&p->InitialSpawnDelayInSec);
        serializer.Stream.Serialize(&p->RespawnTimeInSec);
        serializer.Stream.Serialize(&p->SpawnCount);
        EntityRef.Serialize(&p->Collectable, serializer);
        FP.Serialize(&p->NextSpawnTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Consumable : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    [HideInInspector()]
    public FP Amount;
    [FieldOffset(16)]
    [HideInInspector()]
    public FP CollectTime;
    [FieldOffset(0)]
    [HideInInspector()]
    public ConsumableType ConsumableType;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 367;
        hash = hash * 31 + Amount.GetHashCode();
        hash = hash * 31 + CollectTime.GetHashCode();
        hash = hash * 31 + (Int32)ConsumableType;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Consumable*)ptr;
        serializer.Stream.Serialize((Int32*)&p->ConsumableType);
        FP.Serialize(&p->Amount, serializer);
        FP.Serialize(&p->CollectTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ConsumablePlatformSpawner : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 373;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ConsumablePlatformSpawner*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DeadPlayerCharacter : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public PlayerRef Killer;
    [FieldOffset(8)]
    public EntityRef KillerEntity;
    [FieldOffset(16)]
    public FP TimeOfDeath;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 379;
        hash = hash * 31 + Killer.GetHashCode();
        hash = hash * 31 + KillerEntity.GetHashCode();
        hash = hash * 31 + TimeOfDeath.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DeadPlayerCharacter*)ptr;
        PlayerRef.Serialize(&p->Killer, serializer);
        EntityRef.Serialize(&p->KillerEntity, serializer);
        FP.Serialize(&p->TimeOfDeath, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Destructible : Quantum.IComponent {
    public const Int32 SIZE = 40;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    [HideInInspector()]
    public FP DestructionLengthTime;
    [FieldOffset(0)]
    [HideInInspector()]
    public GameId GameId;
    [FieldOffset(4)]
    [HideInInspector()]
    public QBoolean IsDestructing;
    [FieldOffset(8)]
    [HideInInspector()]
    public AssetRefEntityPrototype ProjectileAssetRef;
    [FieldOffset(24)]
    [HideInInspector()]
    public FP SplashRadius;
    [FieldOffset(32)]
    [HideInInspector()]
    public FP TimeToDestroy;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 383;
        hash = hash * 31 + DestructionLengthTime.GetHashCode();
        hash = hash * 31 + (Int32)GameId;
        hash = hash * 31 + IsDestructing.GetHashCode();
        hash = hash * 31 + ProjectileAssetRef.GetHashCode();
        hash = hash * 31 + SplashRadius.GetHashCode();
        hash = hash * 31 + TimeToDestroy.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Destructible*)ptr;
        serializer.Stream.Serialize((Int32*)&p->GameId);
        QBoolean.Serialize(&p->IsDestructing, serializer);
        AssetRefEntityPrototype.Serialize(&p->ProjectileAssetRef, serializer);
        FP.Serialize(&p->DestructionLengthTime, serializer);
        FP.Serialize(&p->SplashRadius, serializer);
        FP.Serialize(&p->TimeToDestroy, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct DummyCharacter : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 389;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (DummyCharacter*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct EntityDestroyer : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 397;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (EntityDestroyer*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GOAPAgent : Quantum.IComponent {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public AssetRefAIConfig Config;
    [FieldOffset(1)]
    [ExcludeFromPrototype()]
    public SByte CurrentActionIndex;
    [FieldOffset(88)]
    [ExcludeFromPrototype()]
    public FP CurrentActionTime;
    [FieldOffset(72)]
    [ExcludeFromPrototype()]
    public AssetRefGOAPGoal CurrentGoal;
    [FieldOffset(96)]
    [ExcludeFromPrototype()]
    public FP CurrentGoalTime;
    [FieldOffset(0)]
    [ExcludeFromPrototype()]
    public Byte CurrentPlanSize;
    [FieldOffset(112)]
    [ExcludeFromPrototype()]
    public GOAPState CurrentState;
    [FieldOffset(8)]
    [ExcludeFromPrototype()]
    [FramePrinter.PtrQListAttribute(typeof(FP))]
    private Ptr GoalDisableTimesPtr;
    [FieldOffset(120)]
    [ExcludeFromPrototype()]
    public GOAPState GoalState;
    [FieldOffset(104)]
    [ExcludeFromPrototype()]
    public FP InterruptionCheckCooldown;
    [FieldOffset(2)]
    [ExcludeFromPrototype()]
    public SByte LastProcessedActionIndex;
    [FieldOffset(24)]
    [ExcludeFromPrototype()]
    [FramePrinter.FixedArrayAttribute(typeof(AssetRefGOAPAction), 6)]
    private fixed Byte _Plan_[48];
    [FieldOffset(80)]
    public AssetRefGOAPRoot Root;
    public QListPtr<FP> GoalDisableTimes {
      get {
        return new QListPtr<FP>(GoalDisableTimesPtr);
      }
      set {
        GoalDisableTimesPtr = value.Ptr;
      }
    }
    public FixedArray<AssetRefGOAPAction> Plan {
      get {
        fixed (byte* p = _Plan_) { return new FixedArray<AssetRefGOAPAction>(p, 8, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 401;
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + CurrentActionIndex.GetHashCode();
        hash = hash * 31 + CurrentActionTime.GetHashCode();
        hash = hash * 31 + CurrentGoal.GetHashCode();
        hash = hash * 31 + CurrentGoalTime.GetHashCode();
        hash = hash * 31 + CurrentPlanSize.GetHashCode();
        hash = hash * 31 + CurrentState.GetHashCode();
        hash = hash * 31 + GoalDisableTimesPtr.GetHashCode();
        hash = hash * 31 + GoalState.GetHashCode();
        hash = hash * 31 + InterruptionCheckCooldown.GetHashCode();
        hash = hash * 31 + LastProcessedActionIndex.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Plan);
        hash = hash * 31 + Root.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      GoalDisableTimesPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (GOAPAgent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GOAPAgent*)ptr;
        serializer.Stream.Serialize(&p->CurrentPlanSize);
        serializer.Stream.Serialize(&p->CurrentActionIndex);
        serializer.Stream.Serialize(&p->LastProcessedActionIndex);
        QList.Serialize(p->GoalDisableTimes, &p->GoalDisableTimesPtr, serializer, StaticDelegates.SerializeFP);
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        FixedArray.Serialize(p->Plan, serializer, StaticDelegates.SerializeAssetRefGOAPAction);
        Quantum.AssetRefGOAPGoal.Serialize(&p->CurrentGoal, serializer);
        Quantum.AssetRefGOAPRoot.Serialize(&p->Root, serializer);
        FP.Serialize(&p->CurrentActionTime, serializer);
        FP.Serialize(&p->CurrentGoalTime, serializer);
        FP.Serialize(&p->InterruptionCheckCooldown, serializer);
        Quantum.GOAPState.Serialize(&p->CurrentState, serializer);
        Quantum.GOAPState.Serialize(&p->GoalState, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GOAPData : Quantum.IComponentSingleton {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefGOAPHeuristic HeuristicCost;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 409;
        hash = hash * 31 + HeuristicCost.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GOAPData*)ptr;
        Quantum.AssetRefGOAPHeuristic.Serialize(&p->HeuristicCost, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct GameContainer : Quantum.IComponentSingleton {
    public const Int32 SIZE = 2320;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(4)]
    public UInt32 CurrentProgress;
    [FieldOffset(0)]
    public QBoolean IsGameOver;
    [FieldOffset(16)]
    [FramePrinter.FixedArrayAttribute(typeof(PlayerMatchData), 32)]
    private fixed Byte _PlayersData_[2304];
    [FieldOffset(8)]
    public UInt32 TargetProgress;
    public FixedArray<PlayerMatchData> PlayersData {
      get {
        fixed (byte* p = _PlayersData_) { return new FixedArray<PlayerMatchData>(p, 72, 32); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 419;
        hash = hash * 31 + CurrentProgress.GetHashCode();
        hash = hash * 31 + IsGameOver.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(PlayersData);
        hash = hash * 31 + TargetProgress.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (GameContainer*)ptr;
        QBoolean.Serialize(&p->IsGameOver, serializer);
        serializer.Stream.Serialize(&p->CurrentProgress);
        serializer.Stream.Serialize(&p->TargetProgress);
        FixedArray.Serialize(p->PlayersData, serializer, StaticDelegates.SerializePlayerMatchData);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct HFSMAgent : Quantum.IComponent {
    public const Int32 SIZE = 96;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefAIConfig Config;
    [FieldOffset(8)]
    public HFSMData Data;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 421;
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + Data.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (HFSMAgent*)ptr;
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        Quantum.HFSMData.Serialize(&p->Data, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Hazard : Quantum.IComponent {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public EntityRef Attacker;
    [FieldOffset(24)]
    public FP EndTime;
    [FieldOffset(0)]
    public GameId GameId;
    [FieldOffset(32)]
    public FP Interval;
    [FieldOffset(8)]
    public UInt32 MaxHitCount;
    [FieldOffset(40)]
    public FP NextTickTime;
    [FieldOffset(12)]
    public UInt32 PowerAmount;
    [FieldOffset(48)]
    public FP Radius;
    [FieldOffset(56)]
    public FP StunDuration;
    [FieldOffset(4)]
    public Int32 TeamSource;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 431;
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + EndTime.GetHashCode();
        hash = hash * 31 + (Int32)GameId;
        hash = hash * 31 + Interval.GetHashCode();
        hash = hash * 31 + MaxHitCount.GetHashCode();
        hash = hash * 31 + NextTickTime.GetHashCode();
        hash = hash * 31 + PowerAmount.GetHashCode();
        hash = hash * 31 + Radius.GetHashCode();
        hash = hash * 31 + StunDuration.GetHashCode();
        hash = hash * 31 + TeamSource.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Hazard*)ptr;
        serializer.Stream.Serialize((Int32*)&p->GameId);
        serializer.Stream.Serialize(&p->TeamSource);
        serializer.Stream.Serialize(&p->MaxHitCount);
        serializer.Stream.Serialize(&p->PowerAmount);
        EntityRef.Serialize(&p->Attacker, serializer);
        FP.Serialize(&p->EndTime, serializer);
        FP.Serialize(&p->Interval, serializer);
        FP.Serialize(&p->NextTickTime, serializer);
        FP.Serialize(&p->Radius, serializer);
        FP.Serialize(&p->StunDuration, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Invisibility : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 433;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Invisibility*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerCharacter : Quantum.IComponent {
    public const Int32 SIZE = 272;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefAIBlackboard BlackboardRef;
    [FieldOffset(0)]
    [HideInInspector()]
    public Int32 CurrentWeaponSlot;
    [FieldOffset(32)]
    [HideInInspector()]
    public FP DisconnectedDuration;
    [FieldOffset(24)]
    public AssetRefHFSMRoot HfsmRootRef;
    [FieldOffset(16)]
    public AssetRefCharacterController3DConfig KccConfigRef;
    [FieldOffset(4)]
    [HideInInspector()]
    public PlayerRef Player;
    [FieldOffset(40)]
    public FPVector3 ProjectileSpawnOffset;
    [FieldOffset(160)]
    [HideInInspector()]
    [FramePrinter.FixedArrayAttribute(typeof(Special), 2)]
    private fixed Byte _Specials_[112];
    [FieldOffset(64)]
    [HideInInspector()]
    [FramePrinter.FixedArrayAttribute(typeof(Equipment), 3)]
    private fixed Byte _Weapons_[96];
    public FixedArray<Special> Specials {
      get {
        fixed (byte* p = _Specials_) { return new FixedArray<Special>(p, 56, 2); }
      }
    }
    public FixedArray<Equipment> Weapons {
      get {
        fixed (byte* p = _Weapons_) { return new FixedArray<Equipment>(p, 32, 3); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 439;
        hash = hash * 31 + BlackboardRef.GetHashCode();
        hash = hash * 31 + CurrentWeaponSlot.GetHashCode();
        hash = hash * 31 + DisconnectedDuration.GetHashCode();
        hash = hash * 31 + HfsmRootRef.GetHashCode();
        hash = hash * 31 + KccConfigRef.GetHashCode();
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + ProjectileSpawnOffset.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Specials);
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Weapons);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerCharacter*)ptr;
        serializer.Stream.Serialize(&p->CurrentWeaponSlot);
        PlayerRef.Serialize(&p->Player, serializer);
        Quantum.AssetRefAIBlackboard.Serialize(&p->BlackboardRef, serializer);
        AssetRefCharacterController3DConfig.Serialize(&p->KccConfigRef, serializer);
        Quantum.AssetRefHFSMRoot.Serialize(&p->HfsmRootRef, serializer);
        FP.Serialize(&p->DisconnectedDuration, serializer);
        FPVector3.Serialize(&p->ProjectileSpawnOffset, serializer);
        FixedArray.Serialize(p->Weapons, serializer, StaticDelegates.SerializeEquipment);
        FixedArray.Serialize(p->Specials, serializer, StaticDelegates.SerializeSpecial);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerCharging : Quantum.IComponent {
    public const Int32 SIZE = 72;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP ChargeDuration;
    [FieldOffset(24)]
    public FPVector3 ChargeEndPos;
    [FieldOffset(48)]
    public FPVector3 ChargeStartPos;
    [FieldOffset(16)]
    public FP ChargeStartTime;
    [FieldOffset(0)]
    public UInt32 PowerAmount;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 443;
        hash = hash * 31 + ChargeDuration.GetHashCode();
        hash = hash * 31 + ChargeEndPos.GetHashCode();
        hash = hash * 31 + ChargeStartPos.GetHashCode();
        hash = hash * 31 + ChargeStartTime.GetHashCode();
        hash = hash * 31 + PowerAmount.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerCharging*)ptr;
        serializer.Stream.Serialize(&p->PowerAmount);
        FP.Serialize(&p->ChargeDuration, serializer);
        FP.Serialize(&p->ChargeStartTime, serializer);
        FPVector3.Serialize(&p->ChargeEndPos, serializer);
        FPVector3.Serialize(&p->ChargeStartPos, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerSpawner : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    [HideInInspector()]
    public FP ActivationTime;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 449;
        hash = hash * 31 + ActivationTime.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerSpawner*)ptr;
        FP.Serialize(&p->ActivationTime, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Projectile : Quantum.IComponent {
    public const Int32 SIZE = 112;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public EntityRef Attacker;
    [FieldOffset(64)]
    public FPVector3 Direction;
    [FieldOffset(8)]
    public UInt32 PowerAmount;
    [FieldOffset(32)]
    public FP Range;
    [FieldOffset(0)]
    public GameId SourceId;
    [FieldOffset(88)]
    public FPVector3 SpawnPosition;
    [FieldOffset(40)]
    public FP Speed;
    [FieldOffset(48)]
    public FP SplashRadius;
    [FieldOffset(56)]
    public FP StunDuration;
    [FieldOffset(24)]
    public EntityRef Target;
    [FieldOffset(4)]
    public Int32 TeamSource;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 457;
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + Direction.GetHashCode();
        hash = hash * 31 + PowerAmount.GetHashCode();
        hash = hash * 31 + Range.GetHashCode();
        hash = hash * 31 + (Int32)SourceId;
        hash = hash * 31 + SpawnPosition.GetHashCode();
        hash = hash * 31 + Speed.GetHashCode();
        hash = hash * 31 + SplashRadius.GetHashCode();
        hash = hash * 31 + StunDuration.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        hash = hash * 31 + TeamSource.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Projectile*)ptr;
        serializer.Stream.Serialize((Int32*)&p->SourceId);
        serializer.Stream.Serialize(&p->TeamSource);
        serializer.Stream.Serialize(&p->PowerAmount);
        EntityRef.Serialize(&p->Attacker, serializer);
        EntityRef.Serialize(&p->Target, serializer);
        FP.Serialize(&p->Range, serializer);
        FP.Serialize(&p->Speed, serializer);
        FP.Serialize(&p->SplashRadius, serializer);
        FP.Serialize(&p->StunDuration, serializer);
        FPVector3.Serialize(&p->Direction, serializer);
        FPVector3.Serialize(&p->SpawnPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Rage : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public FP Power;
    [FieldOffset(0)]
    public UInt32 PowerModifierId;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 461;
        hash = hash * 31 + Power.GetHashCode();
        hash = hash * 31 + PowerModifierId.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Rage*)ptr;
        serializer.Stream.Serialize(&p->PowerModifierId);
        FP.Serialize(&p->Power, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct RaycastShots : Quantum.IComponent {
    public const Int32 SIZE = 112;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public UInt32 AttackAngle;
    [FieldOffset(24)]
    public EntityRef Attacker;
    [FieldOffset(12)]
    public QBoolean CanHitSameTarget;
    [FieldOffset(72)]
    public FPVector2 Direction;
    [FieldOffset(8)]
    [FramePrinter.PtrQListAttribute(typeof(Int32))]
    private Ptr LinecastQueriesPtr;
    [FieldOffset(20)]
    public UInt32 PowerAmount;
    [FieldOffset(32)]
    public FP PreviousTime;
    [FieldOffset(40)]
    public FP Range;
    [FieldOffset(88)]
    public FPVector3 SpawnPosition;
    [FieldOffset(48)]
    public FP Speed;
    [FieldOffset(56)]
    public FP SplashRadius;
    [FieldOffset(64)]
    public FP StartTime;
    [FieldOffset(4)]
    public Int32 TeamSource;
    [FieldOffset(0)]
    public GameId WeaponConfigId;
    public QListPtr<Int32> LinecastQueries {
      get {
        return new QListPtr<Int32>(LinecastQueriesPtr);
      }
      set {
        LinecastQueriesPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 463;
        hash = hash * 31 + AttackAngle.GetHashCode();
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + CanHitSameTarget.GetHashCode();
        hash = hash * 31 + Direction.GetHashCode();
        hash = hash * 31 + LinecastQueriesPtr.GetHashCode();
        hash = hash * 31 + PowerAmount.GetHashCode();
        hash = hash * 31 + PreviousTime.GetHashCode();
        hash = hash * 31 + Range.GetHashCode();
        hash = hash * 31 + SpawnPosition.GetHashCode();
        hash = hash * 31 + Speed.GetHashCode();
        hash = hash * 31 + SplashRadius.GetHashCode();
        hash = hash * 31 + StartTime.GetHashCode();
        hash = hash * 31 + TeamSource.GetHashCode();
        hash = hash * 31 + (Int32)WeaponConfigId;
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      LinecastQueriesPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (RaycastShots*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (RaycastShots*)ptr;
        serializer.Stream.Serialize((Int32*)&p->WeaponConfigId);
        serializer.Stream.Serialize(&p->TeamSource);
        QList.Serialize(p->LinecastQueries, &p->LinecastQueriesPtr, serializer, StaticDelegates.SerializeInt32);
        QBoolean.Serialize(&p->CanHitSameTarget, serializer);
        serializer.Stream.Serialize(&p->AttackAngle);
        serializer.Stream.Serialize(&p->PowerAmount);
        EntityRef.Serialize(&p->Attacker, serializer);
        FP.Serialize(&p->PreviousTime, serializer);
        FP.Serialize(&p->Range, serializer);
        FP.Serialize(&p->Speed, serializer);
        FP.Serialize(&p->SplashRadius, serializer);
        FP.Serialize(&p->StartTime, serializer);
        FPVector2.Serialize(&p->Direction, serializer);
        FPVector3.Serialize(&p->SpawnPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Regeneration : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 467;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Regeneration*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Shield : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 479;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Shield*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ShrinkingCircle : Quantum.IComponentSingleton {
    public const Int32 SIZE = 80;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(48)]
    public FPVector2 CurrentCircleCenter;
    [FieldOffset(8)]
    public FP CurrentRadius;
    [FieldOffset(16)]
    public FP ShrinkingDurationTime;
    [FieldOffset(24)]
    public FP ShrinkingSizeK;
    [FieldOffset(32)]
    public FP ShrinkingStartTime;
    [FieldOffset(0)]
    public Int32 Step;
    [FieldOffset(64)]
    public FPVector2 TargetCircleCenter;
    [FieldOffset(40)]
    public FP TargetRadius;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 487;
        hash = hash * 31 + CurrentCircleCenter.GetHashCode();
        hash = hash * 31 + CurrentRadius.GetHashCode();
        hash = hash * 31 + ShrinkingDurationTime.GetHashCode();
        hash = hash * 31 + ShrinkingSizeK.GetHashCode();
        hash = hash * 31 + ShrinkingStartTime.GetHashCode();
        hash = hash * 31 + Step.GetHashCode();
        hash = hash * 31 + TargetCircleCenter.GetHashCode();
        hash = hash * 31 + TargetRadius.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ShrinkingCircle*)ptr;
        serializer.Stream.Serialize(&p->Step);
        FP.Serialize(&p->CurrentRadius, serializer);
        FP.Serialize(&p->ShrinkingDurationTime, serializer);
        FP.Serialize(&p->ShrinkingSizeK, serializer);
        FP.Serialize(&p->ShrinkingStartTime, serializer);
        FP.Serialize(&p->TargetRadius, serializer);
        FPVector2.Serialize(&p->CurrentCircleCenter, serializer);
        FPVector2.Serialize(&p->TargetCircleCenter, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Spell : Quantum.IComponent {
    public const Int32 SIZE = 88;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public EntityRef Attacker;
    [FieldOffset(40)]
    public FP Cooldown;
    [FieldOffset(48)]
    public FP EndTime;
    [FieldOffset(4)]
    public UInt32 Id;
    [FieldOffset(56)]
    public FP NextHitTime;
    [FieldOffset(64)]
    public FPVector3 OriginalHitPosition;
    [FieldOffset(8)]
    public UInt32 PowerAmount;
    [FieldOffset(24)]
    public EntityRef SpellSource;
    [FieldOffset(0)]
    public Int32 TeamSource;
    [FieldOffset(32)]
    public EntityRef Victim;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 491;
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + Cooldown.GetHashCode();
        hash = hash * 31 + EndTime.GetHashCode();
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + NextHitTime.GetHashCode();
        hash = hash * 31 + OriginalHitPosition.GetHashCode();
        hash = hash * 31 + PowerAmount.GetHashCode();
        hash = hash * 31 + SpellSource.GetHashCode();
        hash = hash * 31 + TeamSource.GetHashCode();
        hash = hash * 31 + Victim.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Spell*)ptr;
        serializer.Stream.Serialize(&p->TeamSource);
        serializer.Stream.Serialize(&p->Id);
        serializer.Stream.Serialize(&p->PowerAmount);
        EntityRef.Serialize(&p->Attacker, serializer);
        EntityRef.Serialize(&p->SpellSource, serializer);
        EntityRef.Serialize(&p->Victim, serializer);
        FP.Serialize(&p->Cooldown, serializer);
        FP.Serialize(&p->EndTime, serializer);
        FP.Serialize(&p->NextHitTime, serializer);
        FPVector3.Serialize(&p->OriginalHitPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Star : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public EntityRef DamageHazard;
    [FieldOffset(16)]
    public FP Power;
    [FieldOffset(0)]
    public UInt32 SpeedModifierId;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 499;
        hash = hash * 31 + DamageHazard.GetHashCode();
        hash = hash * 31 + Power.GetHashCode();
        hash = hash * 31 + SpeedModifierId.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Star*)ptr;
        serializer.Stream.Serialize(&p->SpeedModifierId);
        EntityRef.Serialize(&p->DamageHazard, serializer);
        FP.Serialize(&p->Power, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Stats : Quantum.IComponent {
    public const Int32 SIZE = 168;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int32 CurrentHealth;
    [FieldOffset(4)]
    public Int32 CurrentInterimArmour;
    [FieldOffset(32)]
    public FP CurrentStatusModifierDuration;
    [FieldOffset(40)]
    public FP CurrentStatusModifierEndTime;
    [FieldOffset(24)]
    public StatusModifierType CurrentStatusModifierType;
    [FieldOffset(20)]
    public QBoolean IsImmune;
    [FieldOffset(8)]
    [FramePrinter.PtrQListAttribute(typeof(Modifier))]
    private Ptr ModifiersPtr;
    [FieldOffset(16)]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Ptr SpellEffectsPtr;
    [FieldOffset(48)]
    [FramePrinter.FixedArrayAttribute(typeof(StatData), 5)]
    private fixed Byte _Values_[120];
    public QListPtr<Modifier> Modifiers {
      get {
        return new QListPtr<Modifier>(ModifiersPtr);
      }
      set {
        ModifiersPtr = value.Ptr;
      }
    }
    public QListPtr<EntityRef> SpellEffects {
      get {
        return new QListPtr<EntityRef>(SpellEffectsPtr);
      }
      set {
        SpellEffectsPtr = value.Ptr;
      }
    }
    public FixedArray<StatData> Values {
      get {
        fixed (byte* p = _Values_) { return new FixedArray<StatData>(p, 24, 5); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 503;
        hash = hash * 31 + CurrentHealth.GetHashCode();
        hash = hash * 31 + CurrentInterimArmour.GetHashCode();
        hash = hash * 31 + CurrentStatusModifierDuration.GetHashCode();
        hash = hash * 31 + CurrentStatusModifierEndTime.GetHashCode();
        hash = hash * 31 + (Int32)CurrentStatusModifierType;
        hash = hash * 31 + IsImmune.GetHashCode();
        hash = hash * 31 + ModifiersPtr.GetHashCode();
        hash = hash * 31 + SpellEffectsPtr.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(Values);
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ModifiersPtr = default;
      SpellEffectsPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (Stats*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Stats*)ptr;
        serializer.Stream.Serialize(&p->CurrentHealth);
        serializer.Stream.Serialize(&p->CurrentInterimArmour);
        QList.Serialize(p->Modifiers, &p->ModifiersPtr, serializer, StaticDelegates.SerializeModifier);
        QList.Serialize(p->SpellEffects, &p->SpellEffectsPtr, serializer, StaticDelegates.SerializeEntityRef);
        QBoolean.Serialize(&p->IsImmune, serializer);
        serializer.Stream.Serialize((Int32*)&p->CurrentStatusModifierType);
        FP.Serialize(&p->CurrentStatusModifierDuration, serializer);
        FP.Serialize(&p->CurrentStatusModifierEndTime, serializer);
        FixedArray.Serialize(p->Values, serializer, StaticDelegates.SerializeStatData);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Stun : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public FP VulnerabilityMultiplier;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 509;
        hash = hash * 31 + VulnerabilityMultiplier.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Stun*)ptr;
        FP.Serialize(&p->VulnerabilityMultiplier, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Targetable : Quantum.IComponent {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    public QBoolean IsUntargetable;
    [FieldOffset(0)]
    public Int32 Team;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 521;
        hash = hash * 31 + IsUntargetable.GetHashCode();
        hash = hash * 31 + Team.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Targetable*)ptr;
        serializer.Stream.Serialize(&p->Team);
        QBoolean.Serialize(&p->IsUntargetable, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct UTAgent : Quantum.IComponent {
    public const Int32 SIZE = 48;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetRefAIConfig Config;
    [FieldOffset(8)]
    public UtilityReasoner UtilityReasoner;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 523;
        hash = hash * 31 + Config.GetHashCode();
        hash = hash * 31 + UtilityReasoner.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      UtilityReasoner.ClearPointers(f, entity);
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (UTAgent*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (UTAgent*)ptr;
        Quantum.AssetRefAIConfig.Serialize(&p->Config, serializer);
        Quantum.UtilityReasoner.Serialize(&p->UtilityReasoner, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponCollectable : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 541;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponCollectable*)ptr;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct WeaponPlatformSpawner : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    private fixed Byte _alignment_padding_[4];
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 547;
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (WeaponPlatformSpawner*)ptr;
    }
  }
  public unsafe partial class Frame {
    private ISignalGameEnded[] _ISignalGameEndedSystems;
    private ISignalPlayerKilledPlayer[] _ISignalPlayerKilledPlayerSystems;
    private ISignalSpecialUsed[] _ISignalSpecialUsedSystems;
    private ISignalHealthChanged[] _ISignalHealthChangedSystems;
    private ISignalHealthIsZero[] _ISignalHealthIsZeroSystems;
    private ISignalStatusModifierCancelled[] _ISignalStatusModifierCancelledSystems;
    private ISignalTargetChanged[] _ISignalTargetChangedSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    static partial void InitStaticGen() {
      ComponentTypeId.Setup(() => {
        ComponentTypeId.Add<Quantum.AIBlackboardComponent>(Quantum.AIBlackboardComponent.Serialize, null, Quantum.AIBlackboardComponent.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.AlivePlayerCharacter>(Quantum.AlivePlayerCharacter.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.BTAgent>(Quantum.BTAgent.Serialize, null, Quantum.BTAgent.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.BotCharacter>(Quantum.BotCharacter.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Collectable>(Quantum.Collectable.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.CollectablePlatformSpawner>(Quantum.CollectablePlatformSpawner.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Consumable>(Quantum.Consumable.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.ConsumablePlatformSpawner>(Quantum.ConsumablePlatformSpawner.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.DeadPlayerCharacter>(Quantum.DeadPlayerCharacter.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Destructible>(Quantum.Destructible.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.DummyCharacter>(Quantum.DummyCharacter.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.EntityDestroyer>(Quantum.EntityDestroyer.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.GOAPAgent>(Quantum.GOAPAgent.Serialize, null, Quantum.GOAPAgent.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.GOAPData>(Quantum.GOAPData.Serialize, null, null, ComponentFlags.Singleton);
        ComponentTypeId.Add<Quantum.GameContainer>(Quantum.GameContainer.Serialize, null, null, ComponentFlags.Singleton);
        ComponentTypeId.Add<Quantum.HFSMAgent>(Quantum.HFSMAgent.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Hazard>(Quantum.Hazard.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Invisibility>(Quantum.Invisibility.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerCharacter>(Quantum.PlayerCharacter.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerCharging>(Quantum.PlayerCharging.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerSpawner>(Quantum.PlayerSpawner.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Projectile>(Quantum.Projectile.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Rage>(Quantum.Rage.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.RaycastShots>(Quantum.RaycastShots.Serialize, null, Quantum.RaycastShots.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Regeneration>(Quantum.Regeneration.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Shield>(Quantum.Shield.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.ShrinkingCircle>(Quantum.ShrinkingCircle.Serialize, null, null, ComponentFlags.Singleton);
        ComponentTypeId.Add<Quantum.Spell>(Quantum.Spell.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Star>(Quantum.Star.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Stats>(Quantum.Stats.Serialize, null, Quantum.Stats.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Stun>(Quantum.Stun.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.Targetable>(Quantum.Targetable.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.UTAgent>(Quantum.UTAgent.Serialize, null, Quantum.UTAgent.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.WeaponCollectable>(Quantum.WeaponCollectable.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.WeaponPlatformSpawner>(Quantum.WeaponPlatformSpawner.Serialize, null, null, ComponentFlags.None);
      });
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities);
      _ISignalGameEndedSystems = BuildSignalsArray<ISignalGameEnded>();
      _ISignalPlayerKilledPlayerSystems = BuildSignalsArray<ISignalPlayerKilledPlayer>();
      _ISignalSpecialUsedSystems = BuildSignalsArray<ISignalSpecialUsed>();
      _ISignalHealthChangedSystems = BuildSignalsArray<ISignalHealthChanged>();
      _ISignalHealthIsZeroSystems = BuildSignalsArray<ISignalHealthIsZero>();
      _ISignalStatusModifierCancelledSystems = BuildSignalsArray<ISignalStatusModifierCancelled>();
      _ISignalTargetChangedSystems = BuildSignalsArray<ISignalTargetChanged>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.AIBlackboardComponent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AIBlackboardComponent>();
      BuildSignalsArrayOnComponentAdded<Quantum.AlivePlayerCharacter>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AlivePlayerCharacter>();
      BuildSignalsArrayOnComponentAdded<Quantum.BTAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BTAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.BotCharacter>();
      BuildSignalsArrayOnComponentRemoved<Quantum.BotCharacter>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.Collectable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Collectable>();
      BuildSignalsArrayOnComponentAdded<Quantum.CollectablePlatformSpawner>();
      BuildSignalsArrayOnComponentRemoved<Quantum.CollectablePlatformSpawner>();
      BuildSignalsArrayOnComponentAdded<Quantum.Consumable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Consumable>();
      BuildSignalsArrayOnComponentAdded<Quantum.ConsumablePlatformSpawner>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ConsumablePlatformSpawner>();
      BuildSignalsArrayOnComponentAdded<Quantum.DeadPlayerCharacter>();
      BuildSignalsArrayOnComponentRemoved<Quantum.DeadPlayerCharacter>();
      BuildSignalsArrayOnComponentAdded<Quantum.Destructible>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Destructible>();
      BuildSignalsArrayOnComponentAdded<Quantum.DummyCharacter>();
      BuildSignalsArrayOnComponentRemoved<Quantum.DummyCharacter>();
      BuildSignalsArrayOnComponentAdded<Quantum.EntityDestroyer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.EntityDestroyer>();
      BuildSignalsArrayOnComponentAdded<Quantum.GOAPAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.GOAPAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.GOAPData>();
      BuildSignalsArrayOnComponentRemoved<Quantum.GOAPData>();
      BuildSignalsArrayOnComponentAdded<Quantum.GameContainer>();
      BuildSignalsArrayOnComponentRemoved<Quantum.GameContainer>();
      BuildSignalsArrayOnComponentAdded<Quantum.HFSMAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.HFSMAgent>();
      BuildSignalsArrayOnComponentAdded<Quantum.Hazard>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Hazard>();
      BuildSignalsArrayOnComponentAdded<Quantum.Invisibility>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Invisibility>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerCharacter>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerCharacter>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerCharging>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerCharging>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerSpawner>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerSpawner>();
      BuildSignalsArrayOnComponentAdded<Quantum.Projectile>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Projectile>();
      BuildSignalsArrayOnComponentAdded<Quantum.Rage>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Rage>();
      BuildSignalsArrayOnComponentAdded<Quantum.RaycastShots>();
      BuildSignalsArrayOnComponentRemoved<Quantum.RaycastShots>();
      BuildSignalsArrayOnComponentAdded<Quantum.Regeneration>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Regeneration>();
      BuildSignalsArrayOnComponentAdded<Quantum.Shield>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Shield>();
      BuildSignalsArrayOnComponentAdded<Quantum.ShrinkingCircle>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ShrinkingCircle>();
      BuildSignalsArrayOnComponentAdded<Quantum.Spell>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Spell>();
      BuildSignalsArrayOnComponentAdded<Quantum.Star>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Star>();
      BuildSignalsArrayOnComponentAdded<Quantum.Stats>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Stats>();
      BuildSignalsArrayOnComponentAdded<Quantum.Stun>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Stun>();
      BuildSignalsArrayOnComponentAdded<Quantum.Targetable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.Targetable>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.UTAgent>();
      BuildSignalsArrayOnComponentRemoved<Quantum.UTAgent>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
      BuildSignalsArrayOnComponentAdded<Quantum.WeaponCollectable>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WeaponCollectable>();
      BuildSignalsArrayOnComponentAdded<Quantum.WeaponPlatformSpawner>();
      BuildSignalsArrayOnComponentRemoved<Quantum.WeaponPlatformSpawner>();
    }
    public void SetPlayerInput(Int32 player, Input input) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->MoveDirectionEncoded = input.MoveDirectionEncoded;
      i->AimingDirectionEncoded = input.AimingDirectionEncoded;
      i->AimButtonState = input.AimButtonState;
    }
    public Input* GetPlayerInput(Int32 player) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    public unsafe partial struct FrameSignals {
      public void GameEnded() {
        var array = _f._ISignalGameEndedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.GameEnded(_f);
          }
        }
      }
      public void PlayerKilledPlayer(PlayerRef playerDead, EntityRef entityDead, PlayerRef playerKiller, EntityRef entityKiller) {
        var array = _f._ISignalPlayerKilledPlayerSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.PlayerKilledPlayer(_f, playerDead, entityDead, playerKiller, entityKiller);
          }
        }
      }
      public void SpecialUsed(PlayerRef player, EntityRef entity, SpecialType specialType, Int32 specialIndex) {
        var array = _f._ISignalSpecialUsedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.SpecialUsed(_f, player, entity, specialType, specialIndex);
          }
        }
      }
      public void HealthChanged(EntityRef entity, EntityRef attacker, Int32 previousHealth) {
        var array = _f._ISignalHealthChangedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.HealthChanged(_f, entity, attacker, previousHealth);
          }
        }
      }
      public void HealthIsZero(EntityRef entity, EntityRef attacker) {
        var array = _f._ISignalHealthIsZeroSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.HealthIsZero(_f, entity, attacker);
          }
        }
      }
      public void StatusModifierCancelled(EntityRef entity, StatusModifierType type) {
        var array = _f._ISignalStatusModifierCancelledSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.StatusModifierCancelled(_f, entity, type);
          }
        }
      }
      public void TargetChanged(EntityRef attacker, EntityRef target) {
        var array = _f._ISignalTargetChangedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.TargetChanged(_f, attacker, target);
          }
        }
      }
    }
    public unsafe partial struct FrameEvents {
      public const Int32 EVENT_TYPE_COUNT = 61;
      public static Int32 GetParentEventID(Int32 eventID) {
        switch (eventID) {
          default: return -1;
        }
      }
      public static System.Type GetEventType(Int32 eventID) {
        switch (eventID) {
          case EventOnNewShrinkingCircle.ID: return typeof(EventOnNewShrinkingCircle);
          case EventOnDummyCharacterKilled.ID: return typeof(EventOnDummyCharacterKilled);
          case EventOnLocalStartedCollecting.ID: return typeof(EventOnLocalStartedCollecting);
          case EventOnLocalStoppedCollecting.ID: return typeof(EventOnLocalStoppedCollecting);
          case EventOnLocalCollectableCollected.ID: return typeof(EventOnLocalCollectableCollected);
          case EventOnCollectableCollected.ID: return typeof(EventOnCollectableCollected);
          case EventOnConsumablePicked.ID: return typeof(EventOnConsumablePicked);
          case EventOnDestructibleScheduled.ID: return typeof(EventOnDestructibleScheduled);
          case EventOnHazardHit.ID: return typeof(EventOnHazardHit);
          case EventOnProjectileFired.ID: return typeof(EventOnProjectileFired);
          case EventOnProjectileTargetableHit.ID: return typeof(EventOnProjectileTargetableHit);
          case EventOnProjectileFailedHit.ID: return typeof(EventOnProjectileFailedHit);
          case EventOnProjectileSuccessHit.ID: return typeof(EventOnProjectileSuccessHit);
          case EventOnAirstrikeUsed.ID: return typeof(EventOnAirstrikeUsed);
          case EventOnStunGrenadeUsed.ID: return typeof(EventOnStunGrenadeUsed);
          case EventOnShieldedChargeUsed.ID: return typeof(EventOnShieldedChargeUsed);
          case EventOnGrenadeUsed.ID: return typeof(EventOnGrenadeUsed);
          case EventOnSkyBeamUsed.ID: return typeof(EventOnSkyBeamUsed);
          case EventOnSpecialUsed.ID: return typeof(EventOnSpecialUsed);
          case EventOnLocalSpecialUsed.ID: return typeof(EventOnLocalSpecialUsed);
          case EventOnLocalSpecialAvailable.ID: return typeof(EventOnLocalSpecialAvailable);
          case EventOnSpellHit.ID: return typeof(EventOnSpellHit);
          case EventOnHealthChanged.ID: return typeof(EventOnHealthChanged);
          case EventOnInterimArmourChanged.ID: return typeof(EventOnInterimArmourChanged);
          case EventOnHealthIsZero.ID: return typeof(EventOnHealthIsZero);
          case EventOnStatusModifierSet.ID: return typeof(EventOnStatusModifierSet);
          case EventOnStatusModifierCancelled.ID: return typeof(EventOnStatusModifierCancelled);
          case EventOnStatusModifierFinished.ID: return typeof(EventOnStatusModifierFinished);
          case EventOnTargetChanged.ID: return typeof(EventOnTargetChanged);
          case EventOnLocalPlayerTargetChanged.ID: return typeof(EventOnLocalPlayerTargetChanged);
          case EventOnGameEnded.ID: return typeof(EventOnGameEnded);
          case EventOnGameProgressUpdated.ID: return typeof(EventOnGameProgressUpdated);
          case EventOnPlayerLeft.ID: return typeof(EventOnPlayerLeft);
          case EventOnPlayerSpawned.ID: return typeof(EventOnPlayerSpawned);
          case EventOnPlayerAlive.ID: return typeof(EventOnPlayerAlive);
          case EventOnPlayerSkydiveDrop.ID: return typeof(EventOnPlayerSkydiveDrop);
          case EventOnPlayerSkydivePLF.ID: return typeof(EventOnPlayerSkydivePLF);
          case EventOnPlayerSkydiveLand.ID: return typeof(EventOnPlayerSkydiveLand);
          case EventOnPlayerDead.ID: return typeof(EventOnPlayerDead);
          case EventOnPlayerEmojiSent.ID: return typeof(EventOnPlayerEmojiSent);
          case EventOnPlayerKilledPlayer.ID: return typeof(EventOnPlayerKilledPlayer);
          case EventOnPlayerAmmoEmpty.ID: return typeof(EventOnPlayerAmmoEmpty);
          case EventOnPlayerAmmoChanged.ID: return typeof(EventOnPlayerAmmoChanged);
          case EventOnPlayerWeaponChanged.ID: return typeof(EventOnPlayerWeaponChanged);
          case EventOnPlayerAttack.ID: return typeof(EventOnPlayerAttack);
          case EventOnPlayerDamaged.ID: return typeof(EventOnPlayerDamaged);
          case EventOnPlayerAttackHit.ID: return typeof(EventOnPlayerAttackHit);
          case EventOnPlayerStopAttack.ID: return typeof(EventOnPlayerStopAttack);
          case EventOnLocalPlayerLeft.ID: return typeof(EventOnLocalPlayerLeft);
          case EventOnLocalPlayerSpawned.ID: return typeof(EventOnLocalPlayerSpawned);
          case EventOnLocalPlayerAlive.ID: return typeof(EventOnLocalPlayerAlive);
          case EventOnLocalPlayerSkydiveDrop.ID: return typeof(EventOnLocalPlayerSkydiveDrop);
          case EventOnLocalPlayerSkydivePLF.ID: return typeof(EventOnLocalPlayerSkydivePLF);
          case EventOnLocalPlayerSkydiveLand.ID: return typeof(EventOnLocalPlayerSkydiveLand);
          case EventOnLocalPlayerDead.ID: return typeof(EventOnLocalPlayerDead);
          case EventOnLocalPlayerAmmoEmpty.ID: return typeof(EventOnLocalPlayerAmmoEmpty);
          case EventOnLocalPlayerAmmoChanged.ID: return typeof(EventOnLocalPlayerAmmoChanged);
          case EventOnLocalPlayerWeaponAdded.ID: return typeof(EventOnLocalPlayerWeaponAdded);
          case EventOnLocalPlayerWeaponChanged.ID: return typeof(EventOnLocalPlayerWeaponChanged);
          case EventOnLocalPlayerDamaged.ID: return typeof(EventOnLocalPlayerDamaged);
          case EventOnLocalPlayerAttack.ID: return typeof(EventOnLocalPlayerAttack);
          default: throw new System.ArgumentOutOfRangeException("eventID");
        }
      }
      public EventOnNewShrinkingCircle OnNewShrinkingCircle(ShrinkingCircle ShrinkingCircle) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnNewShrinkingCircle>(EventOnNewShrinkingCircle.ID);
        ev.ShrinkingCircle = ShrinkingCircle;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnDummyCharacterKilled OnDummyCharacterKilled(EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnDummyCharacterKilled>(EventOnDummyCharacterKilled.ID);
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalStartedCollecting OnLocalStartedCollecting(EntityRef CollectableEntity, Collectable Collectable, PlayerRef Player, EntityRef PlayerEntity) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalStartedCollecting>(EventOnLocalStartedCollecting.ID);
        ev.CollectableEntity = CollectableEntity;
        ev.Collectable = Collectable;
        ev.Player = Player;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalStoppedCollecting OnLocalStoppedCollecting(EntityRef CollectableEntity, PlayerRef Player, EntityRef PlayerEntity) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalStoppedCollecting>(EventOnLocalStoppedCollecting.ID);
        ev.CollectableEntity = CollectableEntity;
        ev.Player = Player;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalCollectableCollected OnLocalCollectableCollected(GameId CollectableId, EntityRef CollectableEntity, PlayerRef Player, EntityRef PlayerEntity) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalCollectableCollected>(EventOnLocalCollectableCollected.ID);
        ev.CollectableId = CollectableId;
        ev.CollectableEntity = CollectableEntity;
        ev.Player = Player;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnCollectableCollected OnCollectableCollected(GameId CollectableId, EntityRef CollectableEntity, PlayerRef Player, EntityRef PlayerEntity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnCollectableCollected>(EventOnCollectableCollected.ID);
        ev.CollectableId = CollectableId;
        ev.CollectableEntity = CollectableEntity;
        ev.Player = Player;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnConsumablePicked OnConsumablePicked(EntityRef ConsumableEntity, Consumable Consumable, PlayerRef Player, EntityRef PlayerEntity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnConsumablePicked>(EventOnConsumablePicked.ID);
        ev.ConsumableEntity = ConsumableEntity;
        ev.Consumable = Consumable;
        ev.Player = Player;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnDestructibleScheduled OnDestructibleScheduled(EntityRef Entity, Destructible Destructible) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnDestructibleScheduled>(EventOnDestructibleScheduled.ID);
        ev.Entity = Entity;
        ev.Destructible = Destructible;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnHazardHit OnHazardHit(EntityRef Hazard, EntityRef HitEntity, Hazard HazardData, FPVector3 HitPosition) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnHazardHit>(EventOnHazardHit.ID);
        ev.Hazard = Hazard;
        ev.HitEntity = HitEntity;
        ev.HazardData = HazardData;
        ev.HitPosition = HitPosition;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnProjectileFired OnProjectileFired(EntityRef Projectile, Projectile ProjectileData) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnProjectileFired>(EventOnProjectileFired.ID);
        ev.Projectile = Projectile;
        ev.ProjectileData = ProjectileData;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnProjectileTargetableHit OnProjectileTargetableHit(EntityRef Projectile, EntityRef HitEntity, Projectile ProjectileData, FPVector3 HitPosition) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnProjectileTargetableHit>(EventOnProjectileTargetableHit.ID);
        ev.Projectile = Projectile;
        ev.HitEntity = HitEntity;
        ev.ProjectileData = ProjectileData;
        ev.HitPosition = HitPosition;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnProjectileFailedHit OnProjectileFailedHit(EntityRef Projectile, Projectile ProjectileData, FPVector3 LastPosition) {
        var ev = _f.Context.AcquireEvent<EventOnProjectileFailedHit>(EventOnProjectileFailedHit.ID);
        ev.Projectile = Projectile;
        ev.ProjectileData = ProjectileData;
        ev.LastPosition = LastPosition;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnProjectileSuccessHit OnProjectileSuccessHit(EntityRef Projectile, EntityRef HitEntity, Projectile ProjectileData, FPVector3 HitPosition) {
        var ev = _f.Context.AcquireEvent<EventOnProjectileSuccessHit>(EventOnProjectileSuccessHit.ID);
        ev.Projectile = Projectile;
        ev.HitEntity = HitEntity;
        ev.ProjectileData = ProjectileData;
        ev.HitPosition = HitPosition;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnAirstrikeUsed OnAirstrikeUsed(EntityRef Hazard, FPVector3 TargetPosition, Hazard HazardData) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnAirstrikeUsed>(EventOnAirstrikeUsed.ID);
        ev.Hazard = Hazard;
        ev.TargetPosition = TargetPosition;
        ev.HazardData = HazardData;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnStunGrenadeUsed OnStunGrenadeUsed(EntityRef Hazard, FPVector3 TargetPosition, Hazard HazardData) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnStunGrenadeUsed>(EventOnStunGrenadeUsed.ID);
        ev.Hazard = Hazard;
        ev.TargetPosition = TargetPosition;
        ev.HazardData = HazardData;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnShieldedChargeUsed OnShieldedChargeUsed(EntityRef Attacker, FP ChargeDuration) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnShieldedChargeUsed>(EventOnShieldedChargeUsed.ID);
        ev.Attacker = Attacker;
        ev.ChargeDuration = ChargeDuration;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnGrenadeUsed OnGrenadeUsed(EntityRef Hazard, FPVector3 TargetPosition, Hazard HazardData) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnGrenadeUsed>(EventOnGrenadeUsed.ID);
        ev.Hazard = Hazard;
        ev.TargetPosition = TargetPosition;
        ev.HazardData = HazardData;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnSkyBeamUsed OnSkyBeamUsed(EntityRef Hazard, FPVector3 TargetPosition, Hazard HazardData) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnSkyBeamUsed>(EventOnSkyBeamUsed.ID);
        ev.Hazard = Hazard;
        ev.TargetPosition = TargetPosition;
        ev.HazardData = HazardData;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnSpecialUsed OnSpecialUsed(PlayerRef Player, EntityRef Entity, SpecialType SpecialType, Int32 SpecialIndex) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnSpecialUsed>(EventOnSpecialUsed.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.SpecialType = SpecialType;
        ev.SpecialIndex = SpecialIndex;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalSpecialUsed OnLocalSpecialUsed(PlayerRef Player, EntityRef Entity, SpecialType SpecialType, Int32 SpecialIndex) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalSpecialUsed>(EventOnLocalSpecialUsed.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.SpecialType = SpecialType;
        ev.SpecialIndex = SpecialIndex;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalSpecialAvailable OnLocalSpecialAvailable(PlayerRef Player, EntityRef Entity, SpecialType SpecialType, Int32 SpecialIndex) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalSpecialAvailable>(EventOnLocalSpecialAvailable.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.SpecialType = SpecialType;
        ev.SpecialIndex = SpecialIndex;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnSpellHit OnSpellHit(EntityRef Entity, Spell Spell) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnSpellHit>(EventOnSpellHit.ID);
        ev.Entity = Entity;
        ev.Spell = Spell;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnHealthChanged OnHealthChanged(EntityRef Entity, EntityRef Attacker, Int32 PreviousHealth, Int32 CurrentHealth, Int32 MaxHealth) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnHealthChanged>(EventOnHealthChanged.ID);
        ev.Entity = Entity;
        ev.Attacker = Attacker;
        ev.PreviousHealth = PreviousHealth;
        ev.CurrentHealth = CurrentHealth;
        ev.MaxHealth = MaxHealth;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnInterimArmourChanged OnInterimArmourChanged(EntityRef Entity, EntityRef Attacker, Int32 PreviousInterimArmour, Int32 CurrentInterimArmour, Int32 MaxInterimArmour) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnInterimArmourChanged>(EventOnInterimArmourChanged.ID);
        ev.Entity = Entity;
        ev.Attacker = Attacker;
        ev.PreviousInterimArmour = PreviousInterimArmour;
        ev.CurrentInterimArmour = CurrentInterimArmour;
        ev.MaxInterimArmour = MaxInterimArmour;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnHealthIsZero OnHealthIsZero(EntityRef Entity, EntityRef Attacker, Int32 DamageAmount, Int32 MaxHealth) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnHealthIsZero>(EventOnHealthIsZero.ID);
        ev.Entity = Entity;
        ev.Attacker = Attacker;
        ev.DamageAmount = DamageAmount;
        ev.MaxHealth = MaxHealth;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnStatusModifierSet OnStatusModifierSet(EntityRef Entity, StatusModifierType Type, FP Duration) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnStatusModifierSet>(EventOnStatusModifierSet.ID);
        ev.Entity = Entity;
        ev.Type = Type;
        ev.Duration = Duration;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnStatusModifierCancelled OnStatusModifierCancelled(EntityRef Entity, StatusModifierType Type) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnStatusModifierCancelled>(EventOnStatusModifierCancelled.ID);
        ev.Entity = Entity;
        ev.Type = Type;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnStatusModifierFinished OnStatusModifierFinished(EntityRef Entity, StatusModifierType Type) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnStatusModifierFinished>(EventOnStatusModifierFinished.ID);
        ev.Entity = Entity;
        ev.Type = Type;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnTargetChanged OnTargetChanged(EntityRef Attacker, EntityRef Target) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnTargetChanged>(EventOnTargetChanged.ID);
        ev.Attacker = Attacker;
        ev.Target = Target;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerTargetChanged OnLocalPlayerTargetChanged(PlayerRef Player, EntityRef Entity, EntityRef Target) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerTargetChanged>(EventOnLocalPlayerTargetChanged.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.Target = Target;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnGameEnded OnGameEnded(PlayerRef PlayerLeader, EntityRef EntityLeader) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnGameEnded>(EventOnGameEnded.ID);
        ev.PlayerLeader = PlayerLeader;
        ev.EntityLeader = EntityLeader;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnGameProgressUpdated OnGameProgressUpdated(UInt32 PreviousProgress, UInt32 CurrentProgress, UInt32 TargetProgress) {
        var ev = _f.Context.AcquireEvent<EventOnGameProgressUpdated>(EventOnGameProgressUpdated.ID);
        ev.PreviousProgress = PreviousProgress;
        ev.CurrentProgress = CurrentProgress;
        ev.TargetProgress = TargetProgress;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerLeft OnPlayerLeft(PlayerRef Player, EntityRef Entity) {
        if (_f.Context.IsLocalPlayer(Player)) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerLeft>(EventOnPlayerLeft.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerSpawned OnPlayerSpawned(PlayerRef Player, EntityRef Entity, QBoolean HasRespawned) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerSpawned>(EventOnPlayerSpawned.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.HasRespawned = HasRespawned;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerAlive OnPlayerAlive(PlayerRef Player, EntityRef Entity, Int32 CurrentHealth, Int32 MaxHealth) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerAlive>(EventOnPlayerAlive.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.CurrentHealth = CurrentHealth;
        ev.MaxHealth = MaxHealth;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerSkydiveDrop OnPlayerSkydiveDrop(PlayerRef Player, EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerSkydiveDrop>(EventOnPlayerSkydiveDrop.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerSkydivePLF OnPlayerSkydivePLF(PlayerRef Player, EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerSkydivePLF>(EventOnPlayerSkydivePLF.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerSkydiveLand OnPlayerSkydiveLand(PlayerRef Player, EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerSkydiveLand>(EventOnPlayerSkydiveLand.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerDead OnPlayerDead(PlayerRef Player, EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerDead>(EventOnPlayerDead.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerEmojiSent OnPlayerEmojiSent(PlayerRef Player, EntityRef Entity, GameId Emoji) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerEmojiSent>(EventOnPlayerEmojiSent.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.Emoji = Emoji;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerKilledPlayer OnPlayerKilledPlayer(PlayerRef PlayerDead, EntityRef EntityDead, PlayerRef PlayerKiller, EntityRef EntityKiller, PlayerRef PlayerLeader, EntityRef EntityLeader) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerKilledPlayer>(EventOnPlayerKilledPlayer.ID);
        ev.PlayerDead = PlayerDead;
        ev.EntityDead = EntityDead;
        ev.PlayerKiller = PlayerKiller;
        ev.EntityKiller = EntityKiller;
        ev.PlayerLeader = PlayerLeader;
        ev.EntityLeader = EntityLeader;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerAmmoEmpty OnPlayerAmmoEmpty(PlayerRef Player, EntityRef Entity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerAmmoEmpty>(EventOnPlayerAmmoEmpty.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerAmmoChanged OnPlayerAmmoChanged(PlayerRef Player, EntityRef Entity, Int32 PreviousAmmo, Int32 CurrentAmmo, Int32 MaxAmmo) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerAmmoChanged>(EventOnPlayerAmmoChanged.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.PreviousAmmo = PreviousAmmo;
        ev.CurrentAmmo = CurrentAmmo;
        ev.MaxAmmo = MaxAmmo;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerWeaponChanged OnPlayerWeaponChanged(PlayerRef Player, EntityRef Entity, Equipment Weapon) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerWeaponChanged>(EventOnPlayerWeaponChanged.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.Weapon = Weapon;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerAttack OnPlayerAttack(PlayerRef Player, EntityRef PlayerEntity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerAttack>(EventOnPlayerAttack.ID);
        ev.Player = Player;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerDamaged OnPlayerDamaged(PlayerRef Player, EntityRef Entity, EntityRef Attacker, UInt32 InterimArmourDamage, UInt32 HealthDamage, UInt32 TotalDamage, Int32 MaxHealth, Int32 MaxInterimArmour) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerDamaged>(EventOnPlayerDamaged.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.Attacker = Attacker;
        ev.InterimArmourDamage = InterimArmourDamage;
        ev.HealthDamage = HealthDamage;
        ev.TotalDamage = TotalDamage;
        ev.MaxHealth = MaxHealth;
        ev.MaxInterimArmour = MaxInterimArmour;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerAttackHit OnPlayerAttackHit(PlayerRef Player, EntityRef PlayerEntity, EntityRef HitEntity, FPVector3 HitPosition) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerAttackHit>(EventOnPlayerAttackHit.ID);
        ev.Player = Player;
        ev.PlayerEntity = PlayerEntity;
        ev.HitEntity = HitEntity;
        ev.HitPosition = HitPosition;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnPlayerStopAttack OnPlayerStopAttack(PlayerRef Player, EntityRef PlayerEntity) {
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnPlayerStopAttack>(EventOnPlayerStopAttack.ID);
        ev.Player = Player;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerLeft OnLocalPlayerLeft(PlayerRef Player, EntityRef Entity) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerLeft>(EventOnLocalPlayerLeft.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerSpawned OnLocalPlayerSpawned(PlayerRef Player, EntityRef Entity, QBoolean HasRespawned) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerSpawned>(EventOnLocalPlayerSpawned.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.HasRespawned = HasRespawned;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerAlive OnLocalPlayerAlive(PlayerRef Player, EntityRef Entity, Int32 CurrentHealth, Int32 MaxHealth) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerAlive>(EventOnLocalPlayerAlive.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.CurrentHealth = CurrentHealth;
        ev.MaxHealth = MaxHealth;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerSkydiveDrop OnLocalPlayerSkydiveDrop(PlayerRef Player, EntityRef Entity) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerSkydiveDrop>(EventOnLocalPlayerSkydiveDrop.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerSkydivePLF OnLocalPlayerSkydivePLF(PlayerRef Player, EntityRef Entity) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerSkydivePLF>(EventOnLocalPlayerSkydivePLF.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerSkydiveLand OnLocalPlayerSkydiveLand(PlayerRef Player, EntityRef Entity) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerSkydiveLand>(EventOnLocalPlayerSkydiveLand.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerDead OnLocalPlayerDead(PlayerRef Player, EntityRef Entity, PlayerRef PlayerKiller, EntityRef EntityKiller) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerDead>(EventOnLocalPlayerDead.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.PlayerKiller = PlayerKiller;
        ev.EntityKiller = EntityKiller;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerAmmoEmpty OnLocalPlayerAmmoEmpty(PlayerRef Player, EntityRef Entity) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerAmmoEmpty>(EventOnLocalPlayerAmmoEmpty.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerAmmoChanged OnLocalPlayerAmmoChanged(PlayerRef Player, EntityRef Entity, Int32 PreviousAmmo, Int32 CurrentAmmo, Int32 MaxAmmo) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerAmmoChanged>(EventOnLocalPlayerAmmoChanged.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.PreviousAmmo = PreviousAmmo;
        ev.CurrentAmmo = CurrentAmmo;
        ev.MaxAmmo = MaxAmmo;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerWeaponAdded OnLocalPlayerWeaponAdded(PlayerRef Player, EntityRef Entity, Equipment Weapon, Int32 WeaponSlotNumber) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerWeaponAdded>(EventOnLocalPlayerWeaponAdded.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.Weapon = Weapon;
        ev.WeaponSlotNumber = WeaponSlotNumber;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerWeaponChanged OnLocalPlayerWeaponChanged(PlayerRef Player, EntityRef Entity, Equipment Weapon) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerWeaponChanged>(EventOnLocalPlayerWeaponChanged.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.Weapon = Weapon;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerDamaged OnLocalPlayerDamaged(PlayerRef Player, EntityRef Entity, EntityRef Attacker, UInt32 InterimArmourDamage, UInt32 HealthDamage, UInt32 TotalDamage, Int32 MaxHealth, Int32 MaxInterimArmour) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerDamaged>(EventOnLocalPlayerDamaged.ID);
        ev.Player = Player;
        ev.Entity = Entity;
        ev.Attacker = Attacker;
        ev.InterimArmourDamage = InterimArmourDamage;
        ev.HealthDamage = HealthDamage;
        ev.TotalDamage = TotalDamage;
        ev.MaxHealth = MaxHealth;
        ev.MaxInterimArmour = MaxInterimArmour;
        _f.AddEvent(ev);
        return ev;
      }
      public EventOnLocalPlayerAttack OnLocalPlayerAttack(PlayerRef Player, EntityRef PlayerEntity) {
        if (_f.Context.IsLocalPlayer(Player) == false) return null;
        if (_f.IsPredicted) return null;
        var ev = _f.Context.AcquireEvent<EventOnLocalPlayerAttack>(EventOnLocalPlayerAttack.ID);
        ev.Player = Player;
        ev.PlayerEntity = PlayerEntity;
        _f.AddEvent(ev);
        return ev;
      }
    }
    public unsafe partial struct FrameAssets {
      public BTNode BTNode(AssetRefBTNode assetRef) {
         return _f.FindAsset<BTNode>(assetRef.Id);
      }
      public BTService BTService(AssetRefBTService assetRef) {
         return _f.FindAsset<BTService>(assetRef.Id);
      }
      public BTComposite BTComposite(AssetRefBTComposite assetRef) {
         return _f.FindAsset<BTComposite>(assetRef.Id);
      }
      public BTDecorator BTDecorator(AssetRefBTDecorator assetRef) {
         return _f.FindAsset<BTDecorator>(assetRef.Id);
      }
      public BTRoot BTRoot(AssetRefBTRoot assetRef) {
         return _f.FindAsset<BTRoot>(assetRef.Id);
      }
      public AIAction AIAction(AssetRefAIAction assetRef) {
         return _f.FindAsset<AIAction>(assetRef.Id);
      }
      public AIFunction AIFunction(AssetRefAIFunction assetRef) {
         return _f.FindAsset<AIFunction>(assetRef.Id);
      }
      public AIConfig AIConfig(AssetRefAIConfig assetRef) {
         return _f.FindAsset<AIConfig>(assetRef.Id);
      }
      public GOAPRoot GOAPRoot(AssetRefGOAPRoot assetRef) {
         return _f.FindAsset<GOAPRoot>(assetRef.Id);
      }
      public GOAPGoal GOAPGoal(AssetRefGOAPGoal assetRef) {
         return _f.FindAsset<GOAPGoal>(assetRef.Id);
      }
      public GOAPAction GOAPAction(AssetRefGOAPAction assetRef) {
         return _f.FindAsset<GOAPAction>(assetRef.Id);
      }
      public GOAPBackValidation GOAPBackValidation(AssetRefGOAPBackValidation assetRef) {
         return _f.FindAsset<GOAPBackValidation>(assetRef.Id);
      }
      public GOAPHeuristic GOAPHeuristic(AssetRefGOAPHeuristic assetRef) {
         return _f.FindAsset<GOAPHeuristic>(assetRef.Id);
      }
      public HFSMRoot HFSMRoot(AssetRefHFSMRoot assetRef) {
         return _f.FindAsset<HFSMRoot>(assetRef.Id);
      }
      public HFSMState HFSMState(AssetRefHFSMState assetRef) {
         return _f.FindAsset<HFSMState>(assetRef.Id);
      }
      public HFSMDecision HFSMDecision(AssetRefHFSMDecision assetRef) {
         return _f.FindAsset<HFSMDecision>(assetRef.Id);
      }
      public HFSMTransitionSet HFSMTransitionSet(AssetRefHFSMTransitionSet assetRef) {
         return _f.FindAsset<HFSMTransitionSet>(assetRef.Id);
      }
      public UTRoot UTRoot(AssetRefUTRoot assetRef) {
         return _f.FindAsset<UTRoot>(assetRef.Id);
      }
      public Consideration Consideration(AssetRefConsideration assetRef) {
         return _f.FindAsset<Consideration>(assetRef.Id);
      }
      public AIBlackboard AIBlackboard(AssetRefAIBlackboard assetRef) {
         return _f.FindAsset<AIBlackboard>(assetRef.Id);
      }
      public AIBlackboardInitializer AIBlackboardInitializer(AssetRefAIBlackboardInitializer assetRef) {
         return _f.FindAsset<AIBlackboardInitializer>(assetRef.Id);
      }
      public QuantumGameConfigs QuantumGameConfigs(AssetRefQuantumGameConfigs assetRef) {
         return _f.FindAsset<QuantumGameConfigs>(assetRef.Id);
      }
      public QuantumWeaponConfigs QuantumWeaponConfigs(AssetRefQuantumWeaponConfigs assetRef) {
         return _f.FindAsset<QuantumWeaponConfigs>(assetRef.Id);
      }
      public QuantumGearConfigs QuantumGearConfigs(AssetRefQuantumGearConfigs assetRef) {
         return _f.FindAsset<QuantumGearConfigs>(assetRef.Id);
      }
      public QuantumBotConfigs QuantumBotConfigs(AssetRefQuantumBotConfigs assetRef) {
         return _f.FindAsset<QuantumBotConfigs>(assetRef.Id);
      }
      public QuantumConsumableConfigs QuantumConsumableConfigs(AssetRefQuantumConsumableConfigs assetRef) {
         return _f.FindAsset<QuantumConsumableConfigs>(assetRef.Id);
      }
      public QuantumDestructibleConfigs QuantumDestructibleConfigs(AssetRefQuantumDestructibleConfigs assetRef) {
         return _f.FindAsset<QuantumDestructibleConfigs>(assetRef.Id);
      }
      public QuantumSpecialConfigs QuantumSpecialConfigs(AssetRefQuantumSpecialConfigs assetRef) {
         return _f.FindAsset<QuantumSpecialConfigs>(assetRef.Id);
      }
      public QuantumAssetConfigs QuantumAssetConfigs(AssetRefQuantumAssetConfigs assetRef) {
         return _f.FindAsset<QuantumAssetConfigs>(assetRef.Id);
      }
      public QuantumShrinkingCircleConfigs QuantumShrinkingCircleConfigs(AssetRefQuantumShrinkingCircleConfigs assetRef) {
         return _f.FindAsset<QuantumShrinkingCircleConfigs>(assetRef.Id);
      }
    }
  }
  public unsafe interface ISignalGameEnded : ISignal {
    void GameEnded(Frame f);
  }
  public unsafe interface ISignalPlayerKilledPlayer : ISignal {
    void PlayerKilledPlayer(Frame f, PlayerRef playerDead, EntityRef entityDead, PlayerRef playerKiller, EntityRef entityKiller);
  }
  public unsafe interface ISignalSpecialUsed : ISignal {
    void SpecialUsed(Frame f, PlayerRef player, EntityRef entity, SpecialType specialType, Int32 specialIndex);
  }
  public unsafe interface ISignalHealthChanged : ISignal {
    void HealthChanged(Frame f, EntityRef entity, EntityRef attacker, Int32 previousHealth);
  }
  public unsafe interface ISignalHealthIsZero : ISignal {
    void HealthIsZero(Frame f, EntityRef entity, EntityRef attacker);
  }
  public unsafe interface ISignalStatusModifierCancelled : ISignal {
    void StatusModifierCancelled(Frame f, EntityRef entity, StatusModifierType type);
  }
  public unsafe interface ISignalTargetChanged : ISignal {
    void TargetChanged(Frame f, EntityRef attacker, EntityRef target);
  }
  public unsafe partial class EventOnNewShrinkingCircle : EventBase {
    public new const Int32 ID = 0;
    public ShrinkingCircle ShrinkingCircle;
    protected EventOnNewShrinkingCircle(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnNewShrinkingCircle() : 
        base(0, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 37;
        hash = hash * 31 + ShrinkingCircle.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnDummyCharacterKilled : EventBase {
    public new const Int32 ID = 1;
    public EntityRef Entity;
    protected EventOnDummyCharacterKilled(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnDummyCharacterKilled() : 
        base(1, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalStartedCollecting : EventBase {
    public new const Int32 ID = 2;
    public EntityRef CollectableEntity;
    public Collectable Collectable;
    public PlayerRef Player;
    public EntityRef PlayerEntity;
    protected EventOnLocalStartedCollecting(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalStartedCollecting() : 
        base(2, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 43;
        hash = hash * 31 + CollectableEntity.GetHashCode();
        hash = hash * 31 + Collectable.GetHashCode();
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalStoppedCollecting : EventBase {
    public new const Int32 ID = 3;
    public EntityRef CollectableEntity;
    public PlayerRef Player;
    public EntityRef PlayerEntity;
    protected EventOnLocalStoppedCollecting(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalStoppedCollecting() : 
        base(3, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 47;
        hash = hash * 31 + CollectableEntity.GetHashCode();
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalCollectableCollected : EventBase {
    public new const Int32 ID = 4;
    public GameId CollectableId;
    public EntityRef CollectableEntity;
    public PlayerRef Player;
    public EntityRef PlayerEntity;
    protected EventOnLocalCollectableCollected(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalCollectableCollected() : 
        base(4, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 53;
        hash = hash * 31 + CollectableId.GetHashCode();
        hash = hash * 31 + CollectableEntity.GetHashCode();
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnCollectableCollected : EventBase {
    public new const Int32 ID = 5;
    public GameId CollectableId;
    public EntityRef CollectableEntity;
    public PlayerRef Player;
    public EntityRef PlayerEntity;
    protected EventOnCollectableCollected(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnCollectableCollected() : 
        base(5, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 59;
        hash = hash * 31 + CollectableId.GetHashCode();
        hash = hash * 31 + CollectableEntity.GetHashCode();
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnConsumablePicked : EventBase {
    public new const Int32 ID = 6;
    public EntityRef ConsumableEntity;
    public Consumable Consumable;
    public PlayerRef Player;
    public EntityRef PlayerEntity;
    protected EventOnConsumablePicked(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnConsumablePicked() : 
        base(6, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 61;
        hash = hash * 31 + ConsumableEntity.GetHashCode();
        hash = hash * 31 + Consumable.GetHashCode();
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnDestructibleScheduled : EventBase {
    public new const Int32 ID = 7;
    public EntityRef Entity;
    public Destructible Destructible;
    protected EventOnDestructibleScheduled(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnDestructibleScheduled() : 
        base(7, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 67;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Destructible.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnHazardHit : EventBase {
    public new const Int32 ID = 8;
    public EntityRef Hazard;
    public EntityRef HitEntity;
    public Hazard HazardData;
    public FPVector3 HitPosition;
    protected EventOnHazardHit(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnHazardHit() : 
        base(8, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 71;
        hash = hash * 31 + Hazard.GetHashCode();
        hash = hash * 31 + HitEntity.GetHashCode();
        hash = hash * 31 + HazardData.GetHashCode();
        hash = hash * 31 + HitPosition.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnProjectileFired : EventBase {
    public new const Int32 ID = 9;
    public EntityRef Projectile;
    public Projectile ProjectileData;
    protected EventOnProjectileFired(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnProjectileFired() : 
        base(9, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 73;
        hash = hash * 31 + Projectile.GetHashCode();
        hash = hash * 31 + ProjectileData.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnProjectileTargetableHit : EventBase {
    public new const Int32 ID = 10;
    public EntityRef Projectile;
    public EntityRef HitEntity;
    public Projectile ProjectileData;
    public FPVector3 HitPosition;
    protected EventOnProjectileTargetableHit(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnProjectileTargetableHit() : 
        base(10, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 79;
        hash = hash * 31 + Projectile.GetHashCode();
        hash = hash * 31 + HitEntity.GetHashCode();
        hash = hash * 31 + ProjectileData.GetHashCode();
        hash = hash * 31 + HitPosition.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnProjectileFailedHit : EventBase {
    public new const Int32 ID = 11;
    public EntityRef Projectile;
    public Projectile ProjectileData;
    public FPVector3 LastPosition;
    protected EventOnProjectileFailedHit(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnProjectileFailedHit() : 
        base(11, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 83;
        hash = hash * 31 + Projectile.GetHashCode();
        hash = hash * 31 + ProjectileData.GetHashCode();
        hash = hash * 31 + LastPosition.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnProjectileSuccessHit : EventBase {
    public new const Int32 ID = 12;
    public EntityRef Projectile;
    public EntityRef HitEntity;
    public Projectile ProjectileData;
    public FPVector3 HitPosition;
    protected EventOnProjectileSuccessHit(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnProjectileSuccessHit() : 
        base(12, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 89;
        hash = hash * 31 + Projectile.GetHashCode();
        hash = hash * 31 + HitEntity.GetHashCode();
        hash = hash * 31 + ProjectileData.GetHashCode();
        hash = hash * 31 + HitPosition.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnAirstrikeUsed : EventBase {
    public new const Int32 ID = 13;
    public EntityRef Hazard;
    public FPVector3 TargetPosition;
    public Hazard HazardData;
    protected EventOnAirstrikeUsed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnAirstrikeUsed() : 
        base(13, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 97;
        hash = hash * 31 + Hazard.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + HazardData.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnStunGrenadeUsed : EventBase {
    public new const Int32 ID = 14;
    public EntityRef Hazard;
    public FPVector3 TargetPosition;
    public Hazard HazardData;
    protected EventOnStunGrenadeUsed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnStunGrenadeUsed() : 
        base(14, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 101;
        hash = hash * 31 + Hazard.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + HazardData.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnShieldedChargeUsed : EventBase {
    public new const Int32 ID = 15;
    public EntityRef Attacker;
    public FP ChargeDuration;
    protected EventOnShieldedChargeUsed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnShieldedChargeUsed() : 
        base(15, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 103;
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + ChargeDuration.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnGrenadeUsed : EventBase {
    public new const Int32 ID = 16;
    public EntityRef Hazard;
    public FPVector3 TargetPosition;
    public Hazard HazardData;
    protected EventOnGrenadeUsed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGrenadeUsed() : 
        base(16, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 107;
        hash = hash * 31 + Hazard.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + HazardData.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnSkyBeamUsed : EventBase {
    public new const Int32 ID = 17;
    public EntityRef Hazard;
    public FPVector3 TargetPosition;
    public Hazard HazardData;
    protected EventOnSkyBeamUsed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnSkyBeamUsed() : 
        base(17, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 109;
        hash = hash * 31 + Hazard.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + HazardData.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnSpecialUsed : EventBase {
    public new const Int32 ID = 18;
    public PlayerRef Player;
    public EntityRef Entity;
    public SpecialType SpecialType;
    public Int32 SpecialIndex;
    protected EventOnSpecialUsed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnSpecialUsed() : 
        base(18, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 113;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + SpecialType.GetHashCode();
        hash = hash * 31 + SpecialIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalSpecialUsed : EventBase {
    public new const Int32 ID = 19;
    public PlayerRef Player;
    public EntityRef Entity;
    public SpecialType SpecialType;
    public Int32 SpecialIndex;
    protected EventOnLocalSpecialUsed(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalSpecialUsed() : 
        base(19, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 127;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + SpecialType.GetHashCode();
        hash = hash * 31 + SpecialIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalSpecialAvailable : EventBase {
    public new const Int32 ID = 20;
    public PlayerRef Player;
    public EntityRef Entity;
    public SpecialType SpecialType;
    public Int32 SpecialIndex;
    protected EventOnLocalSpecialAvailable(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalSpecialAvailable() : 
        base(20, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 131;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + SpecialType.GetHashCode();
        hash = hash * 31 + SpecialIndex.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnSpellHit : EventBase {
    public new const Int32 ID = 21;
    public EntityRef Entity;
    public Spell Spell;
    protected EventOnSpellHit(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnSpellHit() : 
        base(21, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 137;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Spell.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnHealthChanged : EventBase {
    public new const Int32 ID = 22;
    public EntityRef Entity;
    public EntityRef Attacker;
    public Int32 PreviousHealth;
    public Int32 CurrentHealth;
    public Int32 MaxHealth;
    protected EventOnHealthChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnHealthChanged() : 
        base(22, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 139;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + PreviousHealth.GetHashCode();
        hash = hash * 31 + CurrentHealth.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnInterimArmourChanged : EventBase {
    public new const Int32 ID = 23;
    public EntityRef Entity;
    public EntityRef Attacker;
    public Int32 PreviousInterimArmour;
    public Int32 CurrentInterimArmour;
    public Int32 MaxInterimArmour;
    protected EventOnInterimArmourChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnInterimArmourChanged() : 
        base(23, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 149;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + PreviousInterimArmour.GetHashCode();
        hash = hash * 31 + CurrentInterimArmour.GetHashCode();
        hash = hash * 31 + MaxInterimArmour.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnHealthIsZero : EventBase {
    public new const Int32 ID = 24;
    public EntityRef Entity;
    public EntityRef Attacker;
    public Int32 DamageAmount;
    public Int32 MaxHealth;
    protected EventOnHealthIsZero(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnHealthIsZero() : 
        base(24, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 151;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + DamageAmount.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnStatusModifierSet : EventBase {
    public new const Int32 ID = 25;
    public EntityRef Entity;
    public StatusModifierType Type;
    public FP Duration;
    protected EventOnStatusModifierSet(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnStatusModifierSet() : 
        base(25, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 157;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Type.GetHashCode();
        hash = hash * 31 + Duration.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnStatusModifierCancelled : EventBase {
    public new const Int32 ID = 26;
    public EntityRef Entity;
    public StatusModifierType Type;
    protected EventOnStatusModifierCancelled(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnStatusModifierCancelled() : 
        base(26, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 163;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Type.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnStatusModifierFinished : EventBase {
    public new const Int32 ID = 27;
    public EntityRef Entity;
    public StatusModifierType Type;
    protected EventOnStatusModifierFinished(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnStatusModifierFinished() : 
        base(27, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 167;
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Type.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnTargetChanged : EventBase {
    public new const Int32 ID = 28;
    public EntityRef Attacker;
    public EntityRef Target;
    protected EventOnTargetChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnTargetChanged() : 
        base(28, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 173;
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerTargetChanged : EventBase {
    public new const Int32 ID = 29;
    public PlayerRef Player;
    public EntityRef Entity;
    public EntityRef Target;
    protected EventOnLocalPlayerTargetChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerTargetChanged() : 
        base(29, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 179;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Target.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnGameEnded : EventBase {
    public new const Int32 ID = 30;
    public PlayerRef PlayerLeader;
    public EntityRef EntityLeader;
    protected EventOnGameEnded(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGameEnded() : 
        base(30, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 181;
        hash = hash * 31 + PlayerLeader.GetHashCode();
        hash = hash * 31 + EntityLeader.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnGameProgressUpdated : EventBase {
    public new const Int32 ID = 31;
    public UInt32 PreviousProgress;
    public UInt32 CurrentProgress;
    public UInt32 TargetProgress;
    protected EventOnGameProgressUpdated(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnGameProgressUpdated() : 
        base(31, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 191;
        hash = hash * 31 + PreviousProgress.GetHashCode();
        hash = hash * 31 + CurrentProgress.GetHashCode();
        hash = hash * 31 + TargetProgress.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerLeft : EventBase {
    public new const Int32 ID = 32;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnPlayerLeft(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerLeft() : 
        base(32, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 193;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerSpawned : EventBase {
    public new const Int32 ID = 33;
    public PlayerRef Player;
    public EntityRef Entity;
    public QBoolean HasRespawned;
    protected EventOnPlayerSpawned(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerSpawned() : 
        base(33, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 197;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + HasRespawned.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerAlive : EventBase {
    public new const Int32 ID = 34;
    public PlayerRef Player;
    public EntityRef Entity;
    public Int32 CurrentHealth;
    public Int32 MaxHealth;
    protected EventOnPlayerAlive(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerAlive() : 
        base(34, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 199;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + CurrentHealth.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerSkydiveDrop : EventBase {
    public new const Int32 ID = 35;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnPlayerSkydiveDrop(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerSkydiveDrop() : 
        base(35, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 211;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerSkydivePLF : EventBase {
    public new const Int32 ID = 36;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnPlayerSkydivePLF(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerSkydivePLF() : 
        base(36, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 223;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerSkydiveLand : EventBase {
    public new const Int32 ID = 37;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnPlayerSkydiveLand(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerSkydiveLand() : 
        base(37, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 227;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerDead : EventBase {
    public new const Int32 ID = 38;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnPlayerDead(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerDead() : 
        base(38, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 229;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerEmojiSent : EventBase {
    public new const Int32 ID = 39;
    public PlayerRef Player;
    public EntityRef Entity;
    public GameId Emoji;
    protected EventOnPlayerEmojiSent(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerEmojiSent() : 
        base(39, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 233;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Emoji.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerKilledPlayer : EventBase {
    public new const Int32 ID = 40;
    public PlayerRef PlayerDead;
    public EntityRef EntityDead;
    public PlayerRef PlayerKiller;
    public EntityRef EntityKiller;
    public PlayerRef PlayerLeader;
    public EntityRef EntityLeader;
    protected EventOnPlayerKilledPlayer(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerKilledPlayer() : 
        base(40, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 239;
        hash = hash * 31 + PlayerDead.GetHashCode();
        hash = hash * 31 + EntityDead.GetHashCode();
        hash = hash * 31 + PlayerKiller.GetHashCode();
        hash = hash * 31 + EntityKiller.GetHashCode();
        hash = hash * 31 + PlayerLeader.GetHashCode();
        hash = hash * 31 + EntityLeader.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerAmmoEmpty : EventBase {
    public new const Int32 ID = 41;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnPlayerAmmoEmpty(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerAmmoEmpty() : 
        base(41, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 241;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerAmmoChanged : EventBase {
    public new const Int32 ID = 42;
    public PlayerRef Player;
    public EntityRef Entity;
    public Int32 PreviousAmmo;
    public Int32 CurrentAmmo;
    public Int32 MaxAmmo;
    protected EventOnPlayerAmmoChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerAmmoChanged() : 
        base(42, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 251;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + PreviousAmmo.GetHashCode();
        hash = hash * 31 + CurrentAmmo.GetHashCode();
        hash = hash * 31 + MaxAmmo.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerWeaponChanged : EventBase {
    public new const Int32 ID = 43;
    public PlayerRef Player;
    public EntityRef Entity;
    public Equipment Weapon;
    protected EventOnPlayerWeaponChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerWeaponChanged() : 
        base(43, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 257;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Weapon.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerAttack : EventBase {
    public new const Int32 ID = 44;
    public PlayerRef Player;
    public EntityRef PlayerEntity;
    protected EventOnPlayerAttack(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerAttack() : 
        base(44, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 263;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerDamaged : EventBase {
    public new const Int32 ID = 45;
    public PlayerRef Player;
    public EntityRef Entity;
    public EntityRef Attacker;
    public UInt32 InterimArmourDamage;
    public UInt32 HealthDamage;
    public UInt32 TotalDamage;
    public Int32 MaxHealth;
    public Int32 MaxInterimArmour;
    protected EventOnPlayerDamaged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerDamaged() : 
        base(45, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 269;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + InterimArmourDamage.GetHashCode();
        hash = hash * 31 + HealthDamage.GetHashCode();
        hash = hash * 31 + TotalDamage.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        hash = hash * 31 + MaxInterimArmour.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerAttackHit : EventBase {
    public new const Int32 ID = 46;
    public PlayerRef Player;
    public EntityRef PlayerEntity;
    public EntityRef HitEntity;
    public FPVector3 HitPosition;
    protected EventOnPlayerAttackHit(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerAttackHit() : 
        base(46, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 271;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        hash = hash * 31 + HitEntity.GetHashCode();
        hash = hash * 31 + HitPosition.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnPlayerStopAttack : EventBase {
    public new const Int32 ID = 47;
    public PlayerRef Player;
    public EntityRef PlayerEntity;
    protected EventOnPlayerStopAttack(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnPlayerStopAttack() : 
        base(47, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 277;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerLeft : EventBase {
    public new const Int32 ID = 48;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnLocalPlayerLeft(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerLeft() : 
        base(48, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 281;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerSpawned : EventBase {
    public new const Int32 ID = 49;
    public PlayerRef Player;
    public EntityRef Entity;
    public QBoolean HasRespawned;
    protected EventOnLocalPlayerSpawned(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerSpawned() : 
        base(49, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 283;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + HasRespawned.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerAlive : EventBase {
    public new const Int32 ID = 50;
    public PlayerRef Player;
    public EntityRef Entity;
    public Int32 CurrentHealth;
    public Int32 MaxHealth;
    protected EventOnLocalPlayerAlive(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerAlive() : 
        base(50, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 293;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + CurrentHealth.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerSkydiveDrop : EventBase {
    public new const Int32 ID = 51;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnLocalPlayerSkydiveDrop(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerSkydiveDrop() : 
        base(51, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 307;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerSkydivePLF : EventBase {
    public new const Int32 ID = 52;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnLocalPlayerSkydivePLF(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerSkydivePLF() : 
        base(52, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 311;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerSkydiveLand : EventBase {
    public new const Int32 ID = 53;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnLocalPlayerSkydiveLand(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerSkydiveLand() : 
        base(53, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 313;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerDead : EventBase {
    public new const Int32 ID = 54;
    public PlayerRef Player;
    public EntityRef Entity;
    public PlayerRef PlayerKiller;
    public EntityRef EntityKiller;
    protected EventOnLocalPlayerDead(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerDead() : 
        base(54, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 317;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + PlayerKiller.GetHashCode();
        hash = hash * 31 + EntityKiller.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerAmmoEmpty : EventBase {
    public new const Int32 ID = 55;
    public PlayerRef Player;
    public EntityRef Entity;
    protected EventOnLocalPlayerAmmoEmpty(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerAmmoEmpty() : 
        base(55, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 331;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerAmmoChanged : EventBase {
    public new const Int32 ID = 56;
    public PlayerRef Player;
    public EntityRef Entity;
    public Int32 PreviousAmmo;
    public Int32 CurrentAmmo;
    public Int32 MaxAmmo;
    protected EventOnLocalPlayerAmmoChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerAmmoChanged() : 
        base(56, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 337;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + PreviousAmmo.GetHashCode();
        hash = hash * 31 + CurrentAmmo.GetHashCode();
        hash = hash * 31 + MaxAmmo.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerWeaponAdded : EventBase {
    public new const Int32 ID = 57;
    public PlayerRef Player;
    public EntityRef Entity;
    public Equipment Weapon;
    public Int32 WeaponSlotNumber;
    protected EventOnLocalPlayerWeaponAdded(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerWeaponAdded() : 
        base(57, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 347;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Weapon.GetHashCode();
        hash = hash * 31 + WeaponSlotNumber.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerWeaponChanged : EventBase {
    public new const Int32 ID = 58;
    public PlayerRef Player;
    public EntityRef Entity;
    public Equipment Weapon;
    protected EventOnLocalPlayerWeaponChanged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerWeaponChanged() : 
        base(58, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 349;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Weapon.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerDamaged : EventBase {
    public new const Int32 ID = 59;
    public PlayerRef Player;
    public EntityRef Entity;
    public EntityRef Attacker;
    public UInt32 InterimArmourDamage;
    public UInt32 HealthDamage;
    public UInt32 TotalDamage;
    public Int32 MaxHealth;
    public Int32 MaxInterimArmour;
    protected EventOnLocalPlayerDamaged(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerDamaged() : 
        base(59, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 353;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        hash = hash * 31 + Attacker.GetHashCode();
        hash = hash * 31 + InterimArmourDamage.GetHashCode();
        hash = hash * 31 + HealthDamage.GetHashCode();
        hash = hash * 31 + TotalDamage.GetHashCode();
        hash = hash * 31 + MaxHealth.GetHashCode();
        hash = hash * 31 + MaxInterimArmour.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventOnLocalPlayerAttack : EventBase {
    public new const Int32 ID = 60;
    public PlayerRef Player;
    public EntityRef PlayerEntity;
    protected EventOnLocalPlayerAttack(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventOnLocalPlayerAttack() : 
        base(60, EventFlags.Server|EventFlags.Client|EventFlags.Synced) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 359;
        hash = hash * 31 + Player.GetHashCode();
        hash = hash * 31 + PlayerEntity.GetHashCode();
        return hash;
      }
    }
  }
  public static unsafe partial class BitStreamExtensions {
    public static void Serialize(this IBitStream stream, ref AssetRefAIAction value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIBlackboard value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIBlackboardInitializer value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefAIFunction value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTComposite value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTDecorator value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTNode value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefBTService value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefConsideration value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPAction value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPBackValidation value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPGoal value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPHeuristic value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefGOAPRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMDecision value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMState value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefHFSMTransitionSet value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefQuantumAssetConfigs value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefQuantumBotConfigs value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefQuantumConsumableConfigs value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefQuantumDestructibleConfigs value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefQuantumGameConfigs value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefQuantumGearConfigs value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefQuantumShrinkingCircleConfigs value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefQuantumSpecialConfigs value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefQuantumWeaponConfigs value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefUTRoot value) {
      stream.Serialize(ref value.Id.Value);
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class BTNode : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class BTService : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIAction : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIFunction : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIConfig : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPGoal : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPAction : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPBackValidation : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class GOAPHeuristic : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMState : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMDecision : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class HFSMTransitionSet : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class UTRoot : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class Consideration : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIBlackboard : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class AIBlackboardInitializer : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class QuantumGameConfigs : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class QuantumWeaponConfigs : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class QuantumGearConfigs : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class QuantumBotConfigs : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class QuantumConsumableConfigs : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class QuantumDestructibleConfigs : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class QuantumSpecialConfigs : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class QuantumAssetConfigs : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class QuantumShrinkingCircleConfigs : AssetObject {
  }
  public unsafe partial class ComponentPrototypeVisitor : Prototypes.ComponentPrototypeVisitorBase {
    public virtual void Visit(Prototypes.AIBlackboardComponent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.AlivePlayerCharacter_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.BTAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.BotCharacter_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Collectable_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.CollectablePlatformSpawner_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Consumable_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.ConsumablePlatformSpawner_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.DeadPlayerCharacter_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Destructible_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.DummyCharacter_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.EntityDestroyer_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.GOAPAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.GOAPData_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.GameContainer_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.HFSMAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Hazard_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Invisibility_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerCharacter_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerCharging_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerSpawner_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Projectile_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Rage_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.RaycastShots_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Regeneration_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Shield_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.ShrinkingCircle_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Spell_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Star_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Stats_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Stun_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.Targetable_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.UTAgent_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.WeaponCollectable_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.WeaponPlatformSpawner_Prototype prototype) {
      VisitFallback(prototype);
    }
  }
  public static unsafe partial class Constants {
    public const Int32 MAX_PLAN_SIZE = 6;
    public const Int32 EQUIPMENT_SLOT_COUNT = 6;
    public const Int32 PLAYER_COUNT = 32;
    public const Int32 MAX_WEAPONS = 3;
    public const Int32 MAX_SPECIALS = 2;
    public const Int32 TOTAL_STATS = 5;
  }
  public static unsafe partial class StaticDelegates {
    public static FrameSerializer.Delegate SerializeBlackboardEntry;
    public static FrameSerializer.Delegate SerializeAssetRefBTService;
    public static FrameSerializer.Delegate SerializeBTDataValue;
    public static FrameSerializer.Delegate SerializeAssetRefBTComposite;
    public static FrameSerializer.Delegate SerializeByte;
    public static FrameSerializer.Delegate SerializeFP;
    public static FrameSerializer.Delegate SerializeAssetRefBTDecorator;
    public static FrameSerializer.Delegate SerializeEquipment;
    public static FrameSerializer.Delegate SerializeAssetRefGOAPAction;
    public static FrameSerializer.Delegate SerializePlayerMatchData;
    public static FrameSerializer.Delegate SerializeSpecial;
    public static FrameSerializer.Delegate SerializeInt32;
    public static FrameSerializer.Delegate SerializeModifier;
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializeStatData;
    public static FrameSerializer.Delegate SerializeAssetRefConsideration;
    public static FrameSerializer.Delegate SerializeUTMomentumPack;
    public static FrameSerializer.Delegate SerializeEntityPair;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitGen() {
      SerializeBlackboardEntry = Quantum.BlackboardEntry.Serialize;
      SerializeAssetRefBTService = Quantum.AssetRefBTService.Serialize;
      SerializeBTDataValue = Quantum.BTDataValue.Serialize;
      SerializeAssetRefBTComposite = Quantum.AssetRefBTComposite.Serialize;
      SerializeByte = (v, s) => {{ s.Stream.Serialize((Byte*)v); }};
      SerializeFP = FP.Serialize;
      SerializeAssetRefBTDecorator = Quantum.AssetRefBTDecorator.Serialize;
      SerializeEquipment = Quantum.Equipment.Serialize;
      SerializeAssetRefGOAPAction = Quantum.AssetRefGOAPAction.Serialize;
      SerializePlayerMatchData = Quantum.PlayerMatchData.Serialize;
      SerializeSpecial = Quantum.Special.Serialize;
      SerializeInt32 = (v, s) => {{ s.Stream.Serialize((Int32*)v); }};
      SerializeModifier = Quantum.Modifier.Serialize;
      SerializeEntityRef = EntityRef.Serialize;
      SerializeStatData = Quantum.StatData.Serialize;
      SerializeAssetRefConsideration = Quantum.AssetRefConsideration.Serialize;
      SerializeUTMomentumPack = Quantum.UTMomentumPack.Serialize;
      SerializeEntityPair = Quantum.EntityPair.Serialize;
      SerializeInput = Quantum.Input.Serialize;
    }
  }
  public unsafe partial class TypeRegistry {
    partial void AddGenerated() {
      Register(typeof(Quantum.AIBlackboardComponent), Quantum.AIBlackboardComponent.SIZE);
      Register(typeof(Quantum.AlivePlayerCharacter), Quantum.AlivePlayerCharacter.SIZE);
      Register(typeof(AssetGuid), AssetGuid.SIZE);
      Register(typeof(AssetRef), AssetRef.SIZE);
      Register(typeof(Quantum.AssetRefAIAction), Quantum.AssetRefAIAction.SIZE);
      Register(typeof(Quantum.AssetRefAIBlackboard), Quantum.AssetRefAIBlackboard.SIZE);
      Register(typeof(Quantum.AssetRefAIBlackboardInitializer), Quantum.AssetRefAIBlackboardInitializer.SIZE);
      Register(typeof(Quantum.AssetRefAIConfig), Quantum.AssetRefAIConfig.SIZE);
      Register(typeof(Quantum.AssetRefAIFunction), Quantum.AssetRefAIFunction.SIZE);
      Register(typeof(Quantum.AssetRefBTComposite), Quantum.AssetRefBTComposite.SIZE);
      Register(typeof(Quantum.AssetRefBTDecorator), Quantum.AssetRefBTDecorator.SIZE);
      Register(typeof(Quantum.AssetRefBTNode), Quantum.AssetRefBTNode.SIZE);
      Register(typeof(Quantum.AssetRefBTRoot), Quantum.AssetRefBTRoot.SIZE);
      Register(typeof(Quantum.AssetRefBTService), Quantum.AssetRefBTService.SIZE);
      Register(typeof(AssetRefCharacterController2DConfig), AssetRefCharacterController2DConfig.SIZE);
      Register(typeof(AssetRefCharacterController3DConfig), AssetRefCharacterController3DConfig.SIZE);
      Register(typeof(Quantum.AssetRefConsideration), Quantum.AssetRefConsideration.SIZE);
      Register(typeof(AssetRefEntityPrototype), AssetRefEntityPrototype.SIZE);
      Register(typeof(AssetRefEntityView), AssetRefEntityView.SIZE);
      Register(typeof(Quantum.AssetRefGOAPAction), Quantum.AssetRefGOAPAction.SIZE);
      Register(typeof(Quantum.AssetRefGOAPBackValidation), Quantum.AssetRefGOAPBackValidation.SIZE);
      Register(typeof(Quantum.AssetRefGOAPGoal), Quantum.AssetRefGOAPGoal.SIZE);
      Register(typeof(Quantum.AssetRefGOAPHeuristic), Quantum.AssetRefGOAPHeuristic.SIZE);
      Register(typeof(Quantum.AssetRefGOAPRoot), Quantum.AssetRefGOAPRoot.SIZE);
      Register(typeof(Quantum.AssetRefHFSMDecision), Quantum.AssetRefHFSMDecision.SIZE);
      Register(typeof(Quantum.AssetRefHFSMRoot), Quantum.AssetRefHFSMRoot.SIZE);
      Register(typeof(Quantum.AssetRefHFSMState), Quantum.AssetRefHFSMState.SIZE);
      Register(typeof(Quantum.AssetRefHFSMTransitionSet), Quantum.AssetRefHFSMTransitionSet.SIZE);
      Register(typeof(AssetRefMap), AssetRefMap.SIZE);
      Register(typeof(AssetRefNavMesh), AssetRefNavMesh.SIZE);
      Register(typeof(AssetRefNavMeshAgentConfig), AssetRefNavMeshAgentConfig.SIZE);
      Register(typeof(AssetRefPhysicsMaterial), AssetRefPhysicsMaterial.SIZE);
      Register(typeof(AssetRefPolygonCollider), AssetRefPolygonCollider.SIZE);
      Register(typeof(Quantum.AssetRefQuantumAssetConfigs), Quantum.AssetRefQuantumAssetConfigs.SIZE);
      Register(typeof(Quantum.AssetRefQuantumBotConfigs), Quantum.AssetRefQuantumBotConfigs.SIZE);
      Register(typeof(Quantum.AssetRefQuantumConsumableConfigs), Quantum.AssetRefQuantumConsumableConfigs.SIZE);
      Register(typeof(Quantum.AssetRefQuantumDestructibleConfigs), Quantum.AssetRefQuantumDestructibleConfigs.SIZE);
      Register(typeof(Quantum.AssetRefQuantumGameConfigs), Quantum.AssetRefQuantumGameConfigs.SIZE);
      Register(typeof(Quantum.AssetRefQuantumGearConfigs), Quantum.AssetRefQuantumGearConfigs.SIZE);
      Register(typeof(Quantum.AssetRefQuantumShrinkingCircleConfigs), Quantum.AssetRefQuantumShrinkingCircleConfigs.SIZE);
      Register(typeof(Quantum.AssetRefQuantumSpecialConfigs), Quantum.AssetRefQuantumSpecialConfigs.SIZE);
      Register(typeof(Quantum.AssetRefQuantumWeaponConfigs), Quantum.AssetRefQuantumWeaponConfigs.SIZE);
      Register(typeof(AssetRefTerrainCollider), AssetRefTerrainCollider.SIZE);
      Register(typeof(Quantum.AssetRefUTRoot), Quantum.AssetRefUTRoot.SIZE);
      Register(typeof(Quantum.BTAgent), Quantum.BTAgent.SIZE);
      Register(typeof(Quantum.BTDataIndex), Quantum.BTDataIndex.SIZE);
      Register(typeof(Quantum.BTDataValue), Quantum.BTDataValue.SIZE);
      Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      Register(typeof(Quantum.BitSet32), Quantum.BitSet32.SIZE);
      Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      Register(typeof(Quantum.BlackboardEntry), Quantum.BlackboardEntry.SIZE);
      Register(typeof(Quantum.BlackboardValue), Quantum.BlackboardValue.SIZE);
      Register(typeof(Quantum.BotBehaviourType), 4);
      Register(typeof(Quantum.BotCharacter), Quantum.BotCharacter.SIZE);
      Register(typeof(Quantum.BotSDKData), Quantum.BotSDKData.SIZE);
      Register(typeof(Button), Button.SIZE);
      Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      Register(typeof(Quantum.Collectable), Quantum.Collectable.SIZE);
      Register(typeof(Quantum.CollectablePlatformSpawner), Quantum.CollectablePlatformSpawner.SIZE);
      Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      Register(typeof(Quantum.Consumable), Quantum.Consumable.SIZE);
      Register(typeof(Quantum.ConsumablePlatformSpawner), Quantum.ConsumablePlatformSpawner.SIZE);
      Register(typeof(Quantum.ConsumableType), 4);
      Register(typeof(Quantum.DeadPlayerCharacter), Quantum.DeadPlayerCharacter.SIZE);
      Register(typeof(Quantum.Destructible), Quantum.Destructible.SIZE);
      Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      Register(typeof(Quantum.DummyCharacter), Quantum.DummyCharacter.SIZE);
      Register(typeof(Quantum.EWorldState), 4);
      Register(typeof(Quantum.EntityDestroyer), Quantum.EntityDestroyer.SIZE);
      Register(typeof(Quantum.EntityPair), Quantum.EntityPair.SIZE);
      Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      Register(typeof(EntityRef), EntityRef.SIZE);
      Register(typeof(Quantum.Equipment), Quantum.Equipment.SIZE);
      Register(typeof(FP), FP.SIZE);
      Register(typeof(FPBounds2), FPBounds2.SIZE);
      Register(typeof(FPBounds3), FPBounds3.SIZE);
      Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      Register(typeof(FPVector2), FPVector2.SIZE);
      Register(typeof(FPVector3), FPVector3.SIZE);
      Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      Register(typeof(Quantum.GOAPAgent), Quantum.GOAPAgent.SIZE);
      Register(typeof(Quantum.GOAPData), Quantum.GOAPData.SIZE);
      Register(typeof(Quantum.GOAPState), Quantum.GOAPState.SIZE);
      Register(typeof(Quantum.GameContainer), Quantum.GameContainer.SIZE);
      Register(typeof(Quantum.GameId), 4);
      Register(typeof(Quantum.GameIdGroup), 4);
      Register(typeof(Quantum.GameMode), 4);
      Register(typeof(Quantum.HFSMAgent), Quantum.HFSMAgent.SIZE);
      Register(typeof(Quantum.HFSMData), Quantum.HFSMData.SIZE);
      Register(typeof(Quantum.Hazard), Quantum.Hazard.SIZE);
      Register(typeof(HingeJoint), HingeJoint.SIZE);
      Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      Register(typeof(Hit), Hit.SIZE);
      Register(typeof(Hit3D), Hit3D.SIZE);
      Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      Register(typeof(Quantum.InputButtons), 4);
      Register(typeof(Quantum.Invisibility), Quantum.Invisibility.SIZE);
      Register(typeof(Quantum.ItemAdjective), 4);
      Register(typeof(Quantum.ItemFaction), 4);
      Register(typeof(Quantum.ItemManufacturer), 4);
      Register(typeof(Quantum.ItemMaterial), 4);
      Register(typeof(Quantum.ItemRarity), 4);
      Register(typeof(Joint), Joint.SIZE);
      Register(typeof(Joint3D), Joint3D.SIZE);
      Register(typeof(LayerMask), LayerMask.SIZE);
      Register(typeof(MapEntityId), MapEntityId.SIZE);
      Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      Register(typeof(Quantum.Modifier), Quantum.Modifier.SIZE);
      Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      Register(typeof(NullableFP), NullableFP.SIZE);
      Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      Register(typeof(Quantum.PlayerCharacter), Quantum.PlayerCharacter.SIZE);
      Register(typeof(Quantum.PlayerCharging), Quantum.PlayerCharging.SIZE);
      Register(typeof(Quantum.PlayerMatchData), Quantum.PlayerMatchData.SIZE);
      Register(typeof(PlayerRef), PlayerRef.SIZE);
      Register(typeof(Quantum.PlayerSpawner), Quantum.PlayerSpawner.SIZE);
      Register(typeof(Quantum.Projectile), Quantum.Projectile.SIZE);
      Register(typeof(Ptr), Ptr.SIZE);
      Register(typeof(QBoolean), QBoolean.SIZE);
      Register(typeof(RNGSession), RNGSession.SIZE);
      Register(typeof(Quantum.Rage), Quantum.Rage.SIZE);
      Register(typeof(Quantum.RaycastShots), Quantum.RaycastShots.SIZE);
      Register(typeof(Quantum.Regeneration), Quantum.Regeneration.SIZE);
      Register(typeof(Shape2D), Shape2D.SIZE);
      Register(typeof(Shape3D), Shape3D.SIZE);
      Register(typeof(Quantum.Shield), Quantum.Shield.SIZE);
      Register(typeof(Quantum.ShrinkingCircle), Quantum.ShrinkingCircle.SIZE);
      Register(typeof(Quantum.Special), Quantum.Special.SIZE);
      Register(typeof(Quantum.SpecialType), 4);
      Register(typeof(Quantum.Spell), Quantum.Spell.SIZE);
      Register(typeof(SpringJoint), SpringJoint.SIZE);
      Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      Register(typeof(Quantum.Star), Quantum.Star.SIZE);
      Register(typeof(Quantum.StatData), Quantum.StatData.SIZE);
      Register(typeof(Quantum.StatType), 4);
      Register(typeof(Quantum.Stats), Quantum.Stats.SIZE);
      Register(typeof(Quantum.StatusModifierType), 4);
      Register(typeof(Quantum.Stun), Quantum.Stun.SIZE);
      Register(typeof(Quantum.Targetable), Quantum.Targetable.SIZE);
      Register(typeof(Quantum.TargetingType), 4);
      Register(typeof(Quantum.TeamType), 4);
      Register(typeof(Transform2D), Transform2D.SIZE);
      Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      Register(typeof(Transform3D), Transform3D.SIZE);
      Register(typeof(Quantum.UTAgent), Quantum.UTAgent.SIZE);
      Register(typeof(Quantum.UTMomentumData), Quantum.UTMomentumData.SIZE);
      Register(typeof(Quantum.UTMomentumPack), Quantum.UTMomentumPack.SIZE);
      Register(typeof(Quantum.UtilityReasoner), Quantum.UtilityReasoner.SIZE);
      Register(typeof(View), View.SIZE);
      Register(typeof(Quantum.WeaponCollectable), Quantum.WeaponCollectable.SIZE);
      Register(typeof(Quantum.WeaponPlatformSpawner), Quantum.WeaponPlatformSpawner.SIZE);
      Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
  }
  public unsafe partial class FramePrinterGen {
    public static void EnsureNotStripped() {
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIAction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIBlackboard>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIBlackboardInitializer>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIConfig>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefAIFunction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTComposite>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTDecorator>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTNode>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefBTService>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefConsideration>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPAction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPBackValidation>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPGoal>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPHeuristic>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefGOAPRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMDecision>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHFSMTransitionSet>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefQuantumAssetConfigs>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefQuantumBotConfigs>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefQuantumConsumableConfigs>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefQuantumDestructibleConfigs>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefQuantumGameConfigs>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefQuantumGearConfigs>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefQuantumShrinkingCircleConfigs>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefQuantumSpecialConfigs>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefQuantumWeaponConfigs>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefUTRoot>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.BotBehaviourType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ConsumableType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.EWorldState>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GameId>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GameIdGroup>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.GameMode>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ItemAdjective>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ItemFaction>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ItemManufacturer>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ItemMaterial>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.ItemRarity>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.SpecialType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.StatType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.StatusModifierType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.TargetingType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.TeamType>();
    }
  }
}
namespace Quantum.Prototypes {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  [System.SerializableAttribute()]
  [Prototype(typeof(BotBehaviourType))]
  public unsafe partial struct BotBehaviourType_Prototype {
    public Int32 Value;
    public static implicit operator BotBehaviourType(BotBehaviourType_Prototype value) {
        return (BotBehaviourType)value.Value;
    }
    public static implicit operator BotBehaviourType_Prototype(BotBehaviourType value) {
        return new BotBehaviourType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ConsumableType))]
  public unsafe partial struct ConsumableType_Prototype {
    public Int32 Value;
    public static implicit operator ConsumableType(ConsumableType_Prototype value) {
        return (ConsumableType)value.Value;
    }
    public static implicit operator ConsumableType_Prototype(ConsumableType value) {
        return new ConsumableType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EWorldState))]
  public unsafe partial struct EWorldState_Prototype {
    public UInt32 Value;
    public static implicit operator EWorldState(EWorldState_Prototype value) {
        return (EWorldState)value.Value;
    }
    public static implicit operator EWorldState_Prototype(EWorldState value) {
        return new EWorldState_Prototype() { Value = (UInt32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GameId))]
  public unsafe partial struct GameId_Prototype {
    public Int32 Value;
    public static implicit operator GameId(GameId_Prototype value) {
        return (GameId)value.Value;
    }
    public static implicit operator GameId_Prototype(GameId value) {
        return new GameId_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GameIdGroup))]
  public unsafe partial struct GameIdGroup_Prototype {
    public Int32 Value;
    public static implicit operator GameIdGroup(GameIdGroup_Prototype value) {
        return (GameIdGroup)value.Value;
    }
    public static implicit operator GameIdGroup_Prototype(GameIdGroup value) {
        return new GameIdGroup_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GameMode))]
  public unsafe partial struct GameMode_Prototype {
    public Int32 Value;
    public static implicit operator GameMode(GameMode_Prototype value) {
        return (GameMode)value.Value;
    }
    public static implicit operator GameMode_Prototype(GameMode value) {
        return new GameMode_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ItemAdjective))]
  public unsafe partial struct ItemAdjective_Prototype {
    public Int32 Value;
    public static implicit operator ItemAdjective(ItemAdjective_Prototype value) {
        return (ItemAdjective)value.Value;
    }
    public static implicit operator ItemAdjective_Prototype(ItemAdjective value) {
        return new ItemAdjective_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ItemFaction))]
  public unsafe partial struct ItemFaction_Prototype {
    public Int32 Value;
    public static implicit operator ItemFaction(ItemFaction_Prototype value) {
        return (ItemFaction)value.Value;
    }
    public static implicit operator ItemFaction_Prototype(ItemFaction value) {
        return new ItemFaction_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ItemManufacturer))]
  public unsafe partial struct ItemManufacturer_Prototype {
    public Int32 Value;
    public static implicit operator ItemManufacturer(ItemManufacturer_Prototype value) {
        return (ItemManufacturer)value.Value;
    }
    public static implicit operator ItemManufacturer_Prototype(ItemManufacturer value) {
        return new ItemManufacturer_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ItemMaterial))]
  public unsafe partial struct ItemMaterial_Prototype {
    public Int32 Value;
    public static implicit operator ItemMaterial(ItemMaterial_Prototype value) {
        return (ItemMaterial)value.Value;
    }
    public static implicit operator ItemMaterial_Prototype(ItemMaterial value) {
        return new ItemMaterial_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ItemRarity))]
  public unsafe partial struct ItemRarity_Prototype {
    public Int32 Value;
    public static implicit operator ItemRarity(ItemRarity_Prototype value) {
        return (ItemRarity)value.Value;
    }
    public static implicit operator ItemRarity_Prototype(ItemRarity value) {
        return new ItemRarity_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(SpecialType))]
  public unsafe partial struct SpecialType_Prototype {
    public Int32 Value;
    public static implicit operator SpecialType(SpecialType_Prototype value) {
        return (SpecialType)value.Value;
    }
    public static implicit operator SpecialType_Prototype(SpecialType value) {
        return new SpecialType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(StatType))]
  public unsafe partial struct StatType_Prototype {
    public Int32 Value;
    public static implicit operator StatType(StatType_Prototype value) {
        return (StatType)value.Value;
    }
    public static implicit operator StatType_Prototype(StatType value) {
        return new StatType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(StatusModifierType))]
  public unsafe partial struct StatusModifierType_Prototype {
    public Int32 Value;
    public static implicit operator StatusModifierType(StatusModifierType_Prototype value) {
        return (StatusModifierType)value.Value;
    }
    public static implicit operator StatusModifierType_Prototype(StatusModifierType value) {
        return new StatusModifierType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(TargetingType))]
  public unsafe partial struct TargetingType_Prototype {
    public Int32 Value;
    public static implicit operator TargetingType(TargetingType_Prototype value) {
        return (TargetingType)value.Value;
    }
    public static implicit operator TargetingType_Prototype(TargetingType value) {
        return new TargetingType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(TeamType))]
  public unsafe partial struct TeamType_Prototype {
    public Int32 Value;
    public static implicit operator TeamType(TeamType_Prototype value) {
        return (TeamType)value.Value;
    }
    public static implicit operator TeamType_Prototype(TeamType value) {
        return new TeamType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InputButtons))]
  public unsafe partial struct InputButtons_Prototype {
    public Int32 Value;
    public static implicit operator InputButtons(InputButtons_Prototype value) {
        return (InputButtons)value.Value;
    }
    public static implicit operator InputButtons_Prototype(InputButtons value) {
        return new InputButtons_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(KeyValuePair<AssetRefConsideration, FP>))]
  public unsafe partial class DictionaryEntry_AssetRefConsideration_FP_Prototype : DictionaryEntryPrototype {
    public AssetRefConsideration Key;
    public FP Value;
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AIBlackboardComponent))]
  public sealed unsafe partial class AIBlackboardComponent_Prototype : ComponentPrototype<AIBlackboardComponent> {
    public AssetRefAIBlackboard Board;
    [DynamicCollectionAttribute()]
    public BlackboardEntry_Prototype[] Entries = {};
    partial void MaterializeUser(Frame frame, ref AIBlackboardComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      AIBlackboardComponent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref AIBlackboardComponent result, in PrototypeMaterializationContext context) {
      result.Board = this.Board;
      if (this.Entries.Length == 0) {
        result.Entries = default;
      } else {
        var list = frame.AllocateList(result.Entries, this.Entries.Length);
        for (int i = 0; i < this.Entries.Length; ++i) {
          Quantum.BlackboardEntry tmp = default;
          this.Entries[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.Entries = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AlivePlayerCharacter))]
  public sealed unsafe partial class AlivePlayerCharacter_Prototype : ComponentPrototype<AlivePlayerCharacter> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref AlivePlayerCharacter result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      AlivePlayerCharacter component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref AlivePlayerCharacter result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BTAgent))]
  public sealed unsafe partial class BTAgent_Prototype : ComponentPrototype<BTAgent> {
    public AssetRefBTNode Tree;
    public AssetRefBTNode Current;
    [DynamicCollectionAttribute()]
    public Byte[] NodesStatus = {};
    [DynamicCollectionAttribute()]
    public FP[] ServicesEndTimes = {};
    [DynamicCollectionAttribute()]
    public BTDataValue_Prototype[] BTDataValues = {};
    [DynamicCollectionAttribute()]
    public AssetRefBTService[] ActiveServices = {};
    [DynamicCollectionAttribute()]
    public AssetRefBTComposite[] DynamicComposites = {};
    public AssetRefAIConfig Config;
    public Int32 AbortNodeId;
    partial void MaterializeUser(Frame frame, ref BTAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      BTAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref BTAgent result, in PrototypeMaterializationContext context) {
      result.AbortNodeId = this.AbortNodeId;
      if (this.ActiveServices.Length == 0) {
        result.ActiveServices = default;
      } else {
        var list = frame.AllocateList(result.ActiveServices, this.ActiveServices.Length);
        for (int i = 0; i < this.ActiveServices.Length; ++i) {
          Quantum.AssetRefBTService tmp = default;
          tmp = this.ActiveServices[i];
          list.Add(tmp);
        }
        result.ActiveServices = list;
      }
      if (this.BTDataValues.Length == 0) {
        result.BTDataValues = default;
      } else {
        var list = frame.AllocateList(result.BTDataValues, this.BTDataValues.Length);
        for (int i = 0; i < this.BTDataValues.Length; ++i) {
          Quantum.BTDataValue tmp = default;
          this.BTDataValues[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.BTDataValues = list;
      }
      result.Config = this.Config;
      result.Current = this.Current;
      if (this.DynamicComposites.Length == 0) {
        result.DynamicComposites = default;
      } else {
        var list = frame.AllocateList(result.DynamicComposites, this.DynamicComposites.Length);
        for (int i = 0; i < this.DynamicComposites.Length; ++i) {
          Quantum.AssetRefBTComposite tmp = default;
          tmp = this.DynamicComposites[i];
          list.Add(tmp);
        }
        result.DynamicComposites = list;
      }
      if (this.NodesStatus.Length == 0) {
        result.NodesStatus = default;
      } else {
        var list = frame.AllocateList(result.NodesStatus, this.NodesStatus.Length);
        for (int i = 0; i < this.NodesStatus.Length; ++i) {
          Byte tmp = default;
          tmp = this.NodesStatus[i];
          list.Add(tmp);
        }
        result.NodesStatus = list;
      }
      if (this.ServicesEndTimes.Length == 0) {
        result.ServicesEndTimes = default;
      } else {
        var list = frame.AllocateList(result.ServicesEndTimes, this.ServicesEndTimes.Length);
        for (int i = 0; i < this.ServicesEndTimes.Length; ++i) {
          FP tmp = default;
          tmp = this.ServicesEndTimes[i];
          list.Add(tmp);
        }
        result.ServicesEndTimes = list;
      }
      result.Tree = this.Tree;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BTDataIndex))]
  public sealed unsafe partial class BTDataIndex_Prototype : StructPrototype {
    public Int32 Index;
    partial void MaterializeUser(Frame frame, ref BTDataIndex result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BTDataIndex result, in PrototypeMaterializationContext context) {
      result.Index = this.Index;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BTDataValue))]
  public sealed unsafe partial class BTDataValue_Prototype : UnionPrototype {
    public string _field_used_;
    public FP FPValue;
    public Int32 IntValue;
    partial void MaterializeUser(Frame frame, ref BTDataValue result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BTDataValue result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "FPVALUE": *result.FPValue = this.FPValue; break;
        case "INTVALUE": *result.IntValue = this.IntValue; break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BlackboardEntry))]
  public sealed unsafe partial class BlackboardEntry_Prototype : StructPrototype {
    public BlackboardValue_Prototype Value;
    [DynamicCollectionAttribute()]
    public AssetRefBTDecorator[] ReactiveDecorators = {};
    partial void MaterializeUser(Frame frame, ref BlackboardEntry result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BlackboardEntry result, in PrototypeMaterializationContext context) {
      if (this.ReactiveDecorators.Length == 0) {
        result.ReactiveDecorators = default;
      } else {
        var list = frame.AllocateList(result.ReactiveDecorators, this.ReactiveDecorators.Length);
        for (int i = 0; i < this.ReactiveDecorators.Length; ++i) {
          Quantum.AssetRefBTDecorator tmp = default;
          tmp = this.ReactiveDecorators[i];
          list.Add(tmp);
        }
        result.ReactiveDecorators = list;
      }
      this.Value.Materialize(frame, ref result.Value, in context);
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BlackboardValue))]
  public sealed unsafe partial class BlackboardValue_Prototype : UnionPrototype {
    public string _field_used_;
    public QBoolean BooleanValue;
    public Byte ByteValue;
    public Int32 IntegerValue;
    public FP FPValue;
    public FPVector2 FPVector2Value;
    public FPVector3 FPVector3Value;
    public MapEntityId EntityRefValue;
    public AssetRef AssetRefValue;
    partial void MaterializeUser(Frame frame, ref BlackboardValue result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BlackboardValue result, in PrototypeMaterializationContext context) {
      switch (_field_used_) {
        case "ASSETREFVALUE": *result.AssetRefValue = this.AssetRefValue; break;
        case "BOOLEANVALUE": *result.BooleanValue = this.BooleanValue; break;
        case "BYTEVALUE": *result.ByteValue = this.ByteValue; break;
        case "ENTITYREFVALUE": PrototypeValidator.FindMapEntity(this.EntityRefValue, in context, out *result.EntityRefValue); break;
        case "FPVALUE": *result.FPValue = this.FPValue; break;
        case "FPVECTOR2VALUE": *result.FPVector2Value = this.FPVector2Value; break;
        case "FPVECTOR3VALUE": *result.FPVector3Value = this.FPVector3Value; break;
        case "INTEGERVALUE": *result.IntegerValue = this.IntegerValue; break;
        case "": case null: break;
        default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BotCharacter))]
  public sealed unsafe partial class BotCharacter_Prototype : ComponentPrototype<BotCharacter> {
    public BotBehaviourType_Prototype BehaviourType;
    public Int32 BotNameIndex;
    public GameId_Prototype Skin;
    public Equipment_Prototype Weapon;
    [ArrayLengthAttribute(6)]
    public Equipment_Prototype[] Gear = new Equipment_Prototype[6];
    public FP DecisionInterval;
    public FP LookForTargetsToShootAtInterval;
    public FP NextDecisionTime;
    public FP NextLookForTargetsToShootAtTime;
    public MapEntityId Target;
    public FP VisionRangeSqr;
    public FP LowArmourSensitivity;
    public FP LowHealthSensitivity;
    public FP LowAmmoSensitivity;
    public FP ChanceToSeekWeapons;
    public FP ChanceToSeekEnemies;
    public FP ChanceToSeekReplenishSpecials;
    public FP ChanceToSeekRage;
    public FP ChanceToAbandonTarget;
    public FP CloseFightIntolerance;
    public FP WanderRadius;
    public UInt32 AccuracySpreadAngle;
    public FP ChanceToUseSpecial;
    public FP SpecialAimingDeviation;
    public FP ShrinkingCircleRiskTolerance;
    partial void MaterializeUser(Frame frame, ref BotCharacter result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      BotCharacter component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref BotCharacter result, in PrototypeMaterializationContext context) {
      result.AccuracySpreadAngle = this.AccuracySpreadAngle;
      result.BehaviourType = this.BehaviourType;
      result.BotNameIndex = this.BotNameIndex;
      result.ChanceToAbandonTarget = this.ChanceToAbandonTarget;
      result.ChanceToSeekEnemies = this.ChanceToSeekEnemies;
      result.ChanceToSeekRage = this.ChanceToSeekRage;
      result.ChanceToSeekReplenishSpecials = this.ChanceToSeekReplenishSpecials;
      result.ChanceToSeekWeapons = this.ChanceToSeekWeapons;
      result.ChanceToUseSpecial = this.ChanceToUseSpecial;
      result.CloseFightIntolerance = this.CloseFightIntolerance;
      result.DecisionInterval = this.DecisionInterval;
      for (int i = 0, count = PrototypeValidator.CheckLength(Gear, 6, in context); i < count; ++i) {
        this.Gear[i].Materialize(frame, ref *result.Gear.GetPointer(i), in context);
      }
      result.LookForTargetsToShootAtInterval = this.LookForTargetsToShootAtInterval;
      result.LowAmmoSensitivity = this.LowAmmoSensitivity;
      result.LowArmourSensitivity = this.LowArmourSensitivity;
      result.LowHealthSensitivity = this.LowHealthSensitivity;
      result.NextDecisionTime = this.NextDecisionTime;
      result.NextLookForTargetsToShootAtTime = this.NextLookForTargetsToShootAtTime;
      result.ShrinkingCircleRiskTolerance = this.ShrinkingCircleRiskTolerance;
      result.Skin = this.Skin;
      result.SpecialAimingDeviation = this.SpecialAimingDeviation;
      PrototypeValidator.FindMapEntity(this.Target, in context, out result.Target);
      result.VisionRangeSqr = this.VisionRangeSqr;
      result.WanderRadius = this.WanderRadius;
      this.Weapon.Materialize(frame, ref result.Weapon, in context);
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(BotSDKData))]
  public sealed unsafe partial class BotSDKData_Prototype : StructPrototype {
    public FP OriginalDeltaTime;
    public Int32 ElapsedTicks;
    public FP ElapsedPartialTicks;
    partial void MaterializeUser(Frame frame, ref BotSDKData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref BotSDKData result, in PrototypeMaterializationContext context) {
      result.ElapsedPartialTicks = this.ElapsedPartialTicks;
      result.ElapsedTicks = this.ElapsedTicks;
      result.OriginalDeltaTime = this.OriginalDeltaTime;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Collectable))]
  public sealed unsafe partial class Collectable_Prototype : ComponentPrototype<Collectable> {
    [HideInInspector()]
    public GameId_Prototype GameId;
    [HideInInspector()]
    [ArrayLengthAttribute(32)]
    public FP[] CollectorsEndTime = new FP[32];
    [HideInInspector()]
    public QBoolean IsCollected;
    partial void MaterializeUser(Frame frame, ref Collectable result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Collectable component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Collectable result, in PrototypeMaterializationContext context) {
      for (int i = 0, count = PrototypeValidator.CheckLength(CollectorsEndTime, 32, in context); i < count; ++i) {
        *result.CollectorsEndTime.GetPointer(i) = this.CollectorsEndTime[i];
      }
      result.GameId = this.GameId;
      result.IsCollected = this.IsCollected;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(CollectablePlatformSpawner))]
  public sealed unsafe partial class CollectablePlatformSpawner_Prototype : ComponentPrototype<CollectablePlatformSpawner> {
    [HideInInspector()]
    public MapEntityId Collectable;
    [HideInInspector()]
    public FP NextSpawnTime;
    [HideInInspector()]
    public UInt32 SpawnCount;
    public UInt32 RespawnTimeInSec;
    public UInt32 InitialSpawnDelayInSec;
    public GameId_Prototype GameId;
    partial void MaterializeUser(Frame frame, ref CollectablePlatformSpawner result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      CollectablePlatformSpawner component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref CollectablePlatformSpawner result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.Collectable, in context, out result.Collectable);
      result.GameId = this.GameId;
      result.InitialSpawnDelayInSec = this.InitialSpawnDelayInSec;
      result.NextSpawnTime = this.NextSpawnTime;
      result.RespawnTimeInSec = this.RespawnTimeInSec;
      result.SpawnCount = this.SpawnCount;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Consumable))]
  public sealed unsafe partial class Consumable_Prototype : ComponentPrototype<Consumable> {
    [HideInInspector()]
    public ConsumableType_Prototype ConsumableType;
    [HideInInspector()]
    public FP Amount;
    [HideInInspector()]
    public FP CollectTime;
    partial void MaterializeUser(Frame frame, ref Consumable result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Consumable component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Consumable result, in PrototypeMaterializationContext context) {
      result.Amount = this.Amount;
      result.CollectTime = this.CollectTime;
      result.ConsumableType = this.ConsumableType;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ConsumablePlatformSpawner))]
  public sealed unsafe partial class ConsumablePlatformSpawner_Prototype : ComponentPrototype<ConsumablePlatformSpawner> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref ConsumablePlatformSpawner result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      ConsumablePlatformSpawner component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref ConsumablePlatformSpawner result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(DeadPlayerCharacter))]
  public sealed unsafe partial class DeadPlayerCharacter_Prototype : ComponentPrototype<DeadPlayerCharacter> {
    public PlayerRef Killer;
    public MapEntityId KillerEntity;
    public FP TimeOfDeath;
    partial void MaterializeUser(Frame frame, ref DeadPlayerCharacter result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      DeadPlayerCharacter component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref DeadPlayerCharacter result, in PrototypeMaterializationContext context) {
      result.Killer = this.Killer;
      PrototypeValidator.FindMapEntity(this.KillerEntity, in context, out result.KillerEntity);
      result.TimeOfDeath = this.TimeOfDeath;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Destructible))]
  public sealed unsafe partial class Destructible_Prototype : ComponentPrototype<Destructible> {
    [HideInInspector()]
    public FP SplashRadius;
    [HideInInspector()]
    public AssetRefEntityPrototype ProjectileAssetRef;
    [HideInInspector()]
    public QBoolean IsDestructing;
    [HideInInspector()]
    public FP DestructionLengthTime;
    [HideInInspector()]
    public FP TimeToDestroy;
    [HideInInspector()]
    public GameId_Prototype GameId;
    partial void MaterializeUser(Frame frame, ref Destructible result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Destructible component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Destructible result, in PrototypeMaterializationContext context) {
      result.DestructionLengthTime = this.DestructionLengthTime;
      result.GameId = this.GameId;
      result.IsDestructing = this.IsDestructing;
      result.ProjectileAssetRef = this.ProjectileAssetRef;
      result.SplashRadius = this.SplashRadius;
      result.TimeToDestroy = this.TimeToDestroy;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(DummyCharacter))]
  public sealed unsafe partial class DummyCharacter_Prototype : ComponentPrototype<DummyCharacter> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref DummyCharacter result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      DummyCharacter component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref DummyCharacter result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EntityDestroyer))]
  public sealed unsafe partial class EntityDestroyer_Prototype : ComponentPrototype<EntityDestroyer> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref EntityDestroyer result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      EntityDestroyer component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref EntityDestroyer result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(EntityPair))]
  public sealed unsafe partial class EntityPair_Prototype : StructPrototype {
    public MapEntityId Entity;
    public FP Value;
    partial void MaterializeUser(Frame frame, ref EntityPair result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref EntityPair result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.Entity, in context, out result.Entity);
      result.Value = this.Value;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Equipment))]
  public sealed unsafe partial class Equipment_Prototype : StructPrototype {
    public GameId_Prototype GameId;
    public ItemRarity_Prototype Rarity;
    public ItemAdjective_Prototype Adjective;
    public ItemMaterial_Prototype Material;
    public ItemManufacturer_Prototype Manufacturer;
    public ItemFaction_Prototype Faction;
    public UInt32 Level;
    public UInt32 Grade;
    partial void MaterializeUser(Frame frame, ref Equipment result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Equipment result, in PrototypeMaterializationContext context) {
      result.Adjective = this.Adjective;
      result.Faction = this.Faction;
      result.GameId = this.GameId;
      result.Grade = this.Grade;
      result.Level = this.Level;
      result.Manufacturer = this.Manufacturer;
      result.Material = this.Material;
      result.Rarity = this.Rarity;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GOAPAgent))]
  public sealed unsafe partial class GOAPAgent_Prototype : ComponentPrototype<GOAPAgent> {
    public AssetRefGOAPRoot Root;
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref GOAPAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      GOAPAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref GOAPAgent result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      result.Root = this.Root;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GOAPData))]
  public sealed unsafe partial class GOAPData_Prototype : ComponentPrototype<GOAPData> {
    public AssetRefGOAPHeuristic HeuristicCost;
    partial void MaterializeUser(Frame frame, ref GOAPData result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      GOAPData component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref GOAPData result, in PrototypeMaterializationContext context) {
      result.HeuristicCost = this.HeuristicCost;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GOAPState))]
  public sealed unsafe partial class GOAPState_Prototype : StructPrototype {
    public EWorldState_Prototype Positive;
    public EWorldState_Prototype Negative;
    partial void MaterializeUser(Frame frame, ref GOAPState result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref GOAPState result, in PrototypeMaterializationContext context) {
      result.Negative = this.Negative;
      result.Positive = this.Positive;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(GameContainer))]
  public sealed unsafe partial class GameContainer_Prototype : ComponentPrototype<GameContainer> {
    [ArrayLengthAttribute(32)]
    public PlayerMatchData_Prototype[] PlayersData = new PlayerMatchData_Prototype[32];
    public UInt32 CurrentProgress;
    public UInt32 TargetProgress;
    public QBoolean IsGameOver;
    partial void MaterializeUser(Frame frame, ref GameContainer result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      GameContainer component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref GameContainer result, in PrototypeMaterializationContext context) {
      result.CurrentProgress = this.CurrentProgress;
      result.IsGameOver = this.IsGameOver;
      for (int i = 0, count = PrototypeValidator.CheckLength(PlayersData, 32, in context); i < count; ++i) {
        this.PlayersData[i].Materialize(frame, ref *result.PlayersData.GetPointer(i), in context);
      }
      result.TargetProgress = this.TargetProgress;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HFSMAgent))]
  public sealed unsafe partial class HFSMAgent_Prototype : ComponentPrototype<HFSMAgent> {
    public HFSMData_Prototype Data;
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref HFSMAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      HFSMAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref HFSMAgent result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      this.Data.Materialize(frame, ref result.Data, in context);
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(HFSMData))]
  public sealed unsafe partial class HFSMData_Prototype : StructPrototype {
    public AssetRefHFSMRoot Root;
    public AssetRefHFSMState CurrentState;
    public FP Time;
    [ArrayLengthAttribute(8)]
    public FP[] Times = new FP[8];
    partial void MaterializeUser(Frame frame, ref HFSMData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref HFSMData result, in PrototypeMaterializationContext context) {
      result.CurrentState = this.CurrentState;
      result.Root = this.Root;
      result.Time = this.Time;
      for (int i = 0, count = PrototypeValidator.CheckLength(Times, 8, in context); i < count; ++i) {
        *result.Times.GetPointer(i) = this.Times[i];
      }
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Hazard))]
  public sealed unsafe partial class Hazard_Prototype : ComponentPrototype<Hazard> {
    public GameId_Prototype GameId;
    public MapEntityId Attacker;
    public Int32 TeamSource;
    public FP Radius;
    public FP EndTime;
    public FP Interval;
    public FP NextTickTime;
    public UInt32 PowerAmount;
    public FP StunDuration;
    public UInt32 MaxHitCount;
    partial void MaterializeUser(Frame frame, ref Hazard result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Hazard component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Hazard result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.Attacker, in context, out result.Attacker);
      result.EndTime = this.EndTime;
      result.GameId = this.GameId;
      result.Interval = this.Interval;
      result.MaxHitCount = this.MaxHitCount;
      result.NextTickTime = this.NextTickTime;
      result.PowerAmount = this.PowerAmount;
      result.Radius = this.Radius;
      result.StunDuration = this.StunDuration;
      result.TeamSource = this.TeamSource;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Input))]
  public sealed unsafe partial class Input_Prototype : StructPrototype {
    public Byte MoveDirectionEncoded;
    public Byte AimingDirectionEncoded;
    public Byte AimButtonState;
    partial void MaterializeUser(Frame frame, ref Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Input result, in PrototypeMaterializationContext context) {
      result.AimButtonState = this.AimButtonState;
      result.AimingDirectionEncoded = this.AimingDirectionEncoded;
      result.MoveDirectionEncoded = this.MoveDirectionEncoded;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Invisibility))]
  public sealed unsafe partial class Invisibility_Prototype : ComponentPrototype<Invisibility> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Invisibility result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Invisibility component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Invisibility result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Modifier))]
  public sealed unsafe partial class Modifier_Prototype : StructPrototype {
    public UInt32 Id;
    public StatType_Prototype Type;
    public FP Power;
    public FP Duration;
    public FP EndTime;
    public QBoolean IsNegative;
    partial void MaterializeUser(Frame frame, ref Modifier result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Modifier result, in PrototypeMaterializationContext context) {
      result.Duration = this.Duration;
      result.EndTime = this.EndTime;
      result.Id = this.Id;
      result.IsNegative = this.IsNegative;
      result.Power = this.Power;
      result.Type = this.Type;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerCharacter))]
  public sealed unsafe partial class PlayerCharacter_Prototype : ComponentPrototype<PlayerCharacter> {
    public AssetRefHFSMRoot HfsmRootRef;
    public AssetRefAIBlackboard BlackboardRef;
    public AssetRefCharacterController3DConfig KccConfigRef;
    public FPVector3 ProjectileSpawnOffset;
    [HideInInspector()]
    public FP DisconnectedDuration;
    [HideInInspector()]
    public PlayerRef Player;
    [HideInInspector()]
    public Int32 CurrentWeaponSlot;
    [HideInInspector()]
    [ArrayLengthAttribute(3)]
    public Equipment_Prototype[] Weapons = new Equipment_Prototype[3];
    [HideInInspector()]
    [ArrayLengthAttribute(2)]
    public Special_Prototype[] Specials = new Special_Prototype[2];
    partial void MaterializeUser(Frame frame, ref PlayerCharacter result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerCharacter component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerCharacter result, in PrototypeMaterializationContext context) {
      result.BlackboardRef = this.BlackboardRef;
      result.CurrentWeaponSlot = this.CurrentWeaponSlot;
      result.DisconnectedDuration = this.DisconnectedDuration;
      result.HfsmRootRef = this.HfsmRootRef;
      result.KccConfigRef = this.KccConfigRef;
      result.Player = this.Player;
      result.ProjectileSpawnOffset = this.ProjectileSpawnOffset;
      for (int i = 0, count = PrototypeValidator.CheckLength(Specials, 2, in context); i < count; ++i) {
        this.Specials[i].Materialize(frame, ref *result.Specials.GetPointer(i), in context);
      }
      for (int i = 0, count = PrototypeValidator.CheckLength(Weapons, 3, in context); i < count; ++i) {
        this.Weapons[i].Materialize(frame, ref *result.Weapons.GetPointer(i), in context);
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerCharging))]
  public sealed unsafe partial class PlayerCharging_Prototype : ComponentPrototype<PlayerCharging> {
    public FPVector3 ChargeStartPos;
    public FPVector3 ChargeEndPos;
    public FP ChargeDuration;
    public FP ChargeStartTime;
    public UInt32 PowerAmount;
    partial void MaterializeUser(Frame frame, ref PlayerCharging result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerCharging component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerCharging result, in PrototypeMaterializationContext context) {
      result.ChargeDuration = this.ChargeDuration;
      result.ChargeEndPos = this.ChargeEndPos;
      result.ChargeStartPos = this.ChargeStartPos;
      result.ChargeStartTime = this.ChargeStartTime;
      result.PowerAmount = this.PowerAmount;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerMatchData))]
  public sealed unsafe partial class PlayerMatchData_Prototype : StructPrototype {
    public PlayerRef Player;
    public MapEntityId Entity;
    public UInt32 PlayerLevel;
    public UInt32 PlayerTrophies;
    public GameId_Prototype PlayerSkin;
    public Int32 BotNameIndex;
    public FP FirstDeathTime;
    public UInt32 PlayersKilledCount;
    public UInt32 DamageDone;
    public UInt32 HealingDone;
    public UInt32 DamageReceived;
    public UInt32 HealingReceived;
    public UInt32 DeathCount;
    public UInt32 SuicideCount;
    public UInt32 SpecialsUsedCount;
    partial void MaterializeUser(Frame frame, ref PlayerMatchData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref PlayerMatchData result, in PrototypeMaterializationContext context) {
      result.BotNameIndex = this.BotNameIndex;
      result.DamageDone = this.DamageDone;
      result.DamageReceived = this.DamageReceived;
      result.DeathCount = this.DeathCount;
      PrototypeValidator.FindMapEntity(this.Entity, in context, out result.Entity);
      result.FirstDeathTime = this.FirstDeathTime;
      result.HealingDone = this.HealingDone;
      result.HealingReceived = this.HealingReceived;
      result.Player = this.Player;
      result.PlayerLevel = this.PlayerLevel;
      result.PlayerSkin = this.PlayerSkin;
      result.PlayerTrophies = this.PlayerTrophies;
      result.PlayersKilledCount = this.PlayersKilledCount;
      result.SpecialsUsedCount = this.SpecialsUsedCount;
      result.SuicideCount = this.SuicideCount;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerSpawner))]
  public sealed unsafe partial class PlayerSpawner_Prototype : ComponentPrototype<PlayerSpawner> {
    [HideInInspector()]
    public FP ActivationTime;
    partial void MaterializeUser(Frame frame, ref PlayerSpawner result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerSpawner component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerSpawner result, in PrototypeMaterializationContext context) {
      result.ActivationTime = this.ActivationTime;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Projectile))]
  public sealed unsafe partial class Projectile_Prototype : ComponentPrototype<Projectile> {
    public MapEntityId Attacker;
    public MapEntityId Target;
    public GameId_Prototype SourceId;
    public Int32 TeamSource;
    public FPVector3 SpawnPosition;
    public FPVector3 Direction;
    public UInt32 PowerAmount;
    public FP Speed;
    public FP Range;
    public FP SplashRadius;
    public FP StunDuration;
    partial void MaterializeUser(Frame frame, ref Projectile result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Projectile component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Projectile result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.Attacker, in context, out result.Attacker);
      result.Direction = this.Direction;
      result.PowerAmount = this.PowerAmount;
      result.Range = this.Range;
      result.SourceId = this.SourceId;
      result.SpawnPosition = this.SpawnPosition;
      result.Speed = this.Speed;
      result.SplashRadius = this.SplashRadius;
      result.StunDuration = this.StunDuration;
      PrototypeValidator.FindMapEntity(this.Target, in context, out result.Target);
      result.TeamSource = this.TeamSource;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Rage))]
  public sealed unsafe partial class Rage_Prototype : ComponentPrototype<Rage> {
    public FP Power;
    public UInt32 PowerModifierId;
    partial void MaterializeUser(Frame frame, ref Rage result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Rage component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Rage result, in PrototypeMaterializationContext context) {
      result.Power = this.Power;
      result.PowerModifierId = this.PowerModifierId;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(RaycastShots))]
  public sealed unsafe partial class RaycastShots_Prototype : ComponentPrototype<RaycastShots> {
    public MapEntityId Attacker;
    public GameId_Prototype WeaponConfigId;
    public Int32 TeamSource;
    [DynamicCollectionAttribute()]
    public Int32[] LinecastQueries = {};
    public QBoolean CanHitSameTarget;
    public FPVector3 SpawnPosition;
    public FPVector2 Direction;
    public UInt32 PowerAmount;
    public UInt32 AttackAngle;
    public FP Range;
    public FP Speed;
    public FP SplashRadius;
    public FP StartTime;
    public FP PreviousTime;
    partial void MaterializeUser(Frame frame, ref RaycastShots result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      RaycastShots component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref RaycastShots result, in PrototypeMaterializationContext context) {
      result.AttackAngle = this.AttackAngle;
      PrototypeValidator.FindMapEntity(this.Attacker, in context, out result.Attacker);
      result.CanHitSameTarget = this.CanHitSameTarget;
      result.Direction = this.Direction;
      if (this.LinecastQueries.Length == 0) {
        result.LinecastQueries = default;
      } else {
        var list = frame.AllocateList(result.LinecastQueries, this.LinecastQueries.Length);
        for (int i = 0; i < this.LinecastQueries.Length; ++i) {
          Int32 tmp = default;
          tmp = this.LinecastQueries[i];
          list.Add(tmp);
        }
        result.LinecastQueries = list;
      }
      result.PowerAmount = this.PowerAmount;
      result.PreviousTime = this.PreviousTime;
      result.Range = this.Range;
      result.SpawnPosition = this.SpawnPosition;
      result.Speed = this.Speed;
      result.SplashRadius = this.SplashRadius;
      result.StartTime = this.StartTime;
      result.TeamSource = this.TeamSource;
      result.WeaponConfigId = this.WeaponConfigId;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Regeneration))]
  public sealed unsafe partial class Regeneration_Prototype : ComponentPrototype<Regeneration> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Regeneration result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Regeneration component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Regeneration result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Shield))]
  public sealed unsafe partial class Shield_Prototype : ComponentPrototype<Shield> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Shield result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Shield component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Shield result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ShrinkingCircle))]
  public sealed unsafe partial class ShrinkingCircle_Prototype : ComponentPrototype<ShrinkingCircle> {
    public FPVector2 CurrentCircleCenter;
    public FPVector2 TargetCircleCenter;
    public FP CurrentRadius;
    public FP TargetRadius;
    public FP ShrinkingStartTime;
    public FP ShrinkingDurationTime;
    public Int32 Step;
    public FP ShrinkingSizeK;
    partial void MaterializeUser(Frame frame, ref ShrinkingCircle result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      ShrinkingCircle component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref ShrinkingCircle result, in PrototypeMaterializationContext context) {
      result.CurrentCircleCenter = this.CurrentCircleCenter;
      result.CurrentRadius = this.CurrentRadius;
      result.ShrinkingDurationTime = this.ShrinkingDurationTime;
      result.ShrinkingSizeK = this.ShrinkingSizeK;
      result.ShrinkingStartTime = this.ShrinkingStartTime;
      result.Step = this.Step;
      result.TargetCircleCenter = this.TargetCircleCenter;
      result.TargetRadius = this.TargetRadius;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Special))]
  public sealed unsafe partial class Special_Prototype : StructPrototype {
    public GameId_Prototype SpecialId;
    public SpecialType_Prototype SpecialType;
    public FP Cooldown;
    public FP Radius;
    public FP PowerAmount;
    public FP Speed;
    public FP MaxRange;
    public FP AvailableTime;
    partial void MaterializeUser(Frame frame, ref Special result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Special result, in PrototypeMaterializationContext context) {
      result.AvailableTime = this.AvailableTime;
      result.Cooldown = this.Cooldown;
      result.MaxRange = this.MaxRange;
      result.PowerAmount = this.PowerAmount;
      result.Radius = this.Radius;
      result.SpecialId = this.SpecialId;
      result.SpecialType = this.SpecialType;
      result.Speed = this.Speed;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Spell))]
  public sealed unsafe partial class Spell_Prototype : ComponentPrototype<Spell> {
    public UInt32 Id;
    public MapEntityId Victim;
    public MapEntityId Attacker;
    public MapEntityId SpellSource;
    public Int32 TeamSource;
    public UInt32 PowerAmount;
    public FPVector3 OriginalHitPosition;
    public FP Cooldown;
    public FP NextHitTime;
    public FP EndTime;
    partial void MaterializeUser(Frame frame, ref Spell result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Spell component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Spell result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.Attacker, in context, out result.Attacker);
      result.Cooldown = this.Cooldown;
      result.EndTime = this.EndTime;
      result.Id = this.Id;
      result.NextHitTime = this.NextHitTime;
      result.OriginalHitPosition = this.OriginalHitPosition;
      result.PowerAmount = this.PowerAmount;
      PrototypeValidator.FindMapEntity(this.SpellSource, in context, out result.SpellSource);
      result.TeamSource = this.TeamSource;
      PrototypeValidator.FindMapEntity(this.Victim, in context, out result.Victim);
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Star))]
  public sealed unsafe partial class Star_Prototype : ComponentPrototype<Star> {
    public MapEntityId DamageHazard;
    public FP Power;
    public UInt32 SpeedModifierId;
    partial void MaterializeUser(Frame frame, ref Star result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Star component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Star result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.DamageHazard, in context, out result.DamageHazard);
      result.Power = this.Power;
      result.SpeedModifierId = this.SpeedModifierId;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(StatData))]
  public sealed unsafe partial class StatData_Prototype : StructPrototype {
    public StatType_Prototype Type;
    public FP BaseValue;
    public FP StatValue;
    partial void MaterializeUser(Frame frame, ref StatData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref StatData result, in PrototypeMaterializationContext context) {
      result.BaseValue = this.BaseValue;
      result.StatValue = this.StatValue;
      result.Type = this.Type;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Stats))]
  public sealed unsafe partial class Stats_Prototype : ComponentPrototype<Stats> {
    public Int32 CurrentHealth;
    public Int32 CurrentInterimArmour;
    public QBoolean IsImmune;
    [ArrayLengthAttribute(5)]
    public StatData_Prototype[] Values = new StatData_Prototype[5];
    [DynamicCollectionAttribute()]
    public Modifier_Prototype[] Modifiers = {};
    [DynamicCollectionAttribute()]
    public MapEntityId[] SpellEffects = {};
    public StatusModifierType_Prototype CurrentStatusModifierType;
    public FP CurrentStatusModifierDuration;
    public FP CurrentStatusModifierEndTime;
    partial void MaterializeUser(Frame frame, ref Stats result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Stats component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Stats result, in PrototypeMaterializationContext context) {
      result.CurrentHealth = this.CurrentHealth;
      result.CurrentInterimArmour = this.CurrentInterimArmour;
      result.CurrentStatusModifierDuration = this.CurrentStatusModifierDuration;
      result.CurrentStatusModifierEndTime = this.CurrentStatusModifierEndTime;
      result.CurrentStatusModifierType = this.CurrentStatusModifierType;
      result.IsImmune = this.IsImmune;
      if (this.Modifiers.Length == 0) {
        result.Modifiers = default;
      } else {
        var list = frame.AllocateList(result.Modifiers, this.Modifiers.Length);
        for (int i = 0; i < this.Modifiers.Length; ++i) {
          Quantum.Modifier tmp = default;
          this.Modifiers[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.Modifiers = list;
      }
      if (this.SpellEffects.Length == 0) {
        result.SpellEffects = default;
      } else {
        var list = frame.AllocateList(result.SpellEffects, this.SpellEffects.Length);
        for (int i = 0; i < this.SpellEffects.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.SpellEffects[i], in context, out tmp);
          list.Add(tmp);
        }
        result.SpellEffects = list;
      }
      for (int i = 0, count = PrototypeValidator.CheckLength(Values, 5, in context); i < count; ++i) {
        this.Values[i].Materialize(frame, ref *result.Values.GetPointer(i), in context);
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Stun))]
  public sealed unsafe partial class Stun_Prototype : ComponentPrototype<Stun> {
    public FP VulnerabilityMultiplier;
    partial void MaterializeUser(Frame frame, ref Stun result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Stun component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Stun result, in PrototypeMaterializationContext context) {
      result.VulnerabilityMultiplier = this.VulnerabilityMultiplier;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Targetable))]
  public sealed unsafe partial class Targetable_Prototype : ComponentPrototype<Targetable> {
    public Int32 Team;
    public QBoolean IsUntargetable;
    partial void MaterializeUser(Frame frame, ref Targetable result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      Targetable component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Targetable result, in PrototypeMaterializationContext context) {
      result.IsUntargetable = this.IsUntargetable;
      result.Team = this.Team;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UTAgent))]
  public sealed unsafe partial class UTAgent_Prototype : ComponentPrototype<UTAgent> {
    public UtilityReasoner_Prototype UtilityReasoner;
    public AssetRefAIConfig Config;
    partial void MaterializeUser(Frame frame, ref UTAgent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      UTAgent component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref UTAgent result, in PrototypeMaterializationContext context) {
      result.Config = this.Config;
      this.UtilityReasoner.Materialize(frame, ref result.UtilityReasoner, in context);
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UTMomentumData))]
  public sealed unsafe partial class UTMomentumData_Prototype : StructPrototype {
    public Int32 Value;
    public Byte DecayAmount;
    partial void MaterializeUser(Frame frame, ref UTMomentumData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UTMomentumData result, in PrototypeMaterializationContext context) {
      result.DecayAmount = this.DecayAmount;
      result.Value = this.Value;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UTMomentumPack))]
  public sealed unsafe partial class UTMomentumPack_Prototype : StructPrototype {
    public AssetRefConsideration ConsiderationRef;
    public UTMomentumData_Prototype MomentumData;
    partial void MaterializeUser(Frame frame, ref UTMomentumPack result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UTMomentumPack result, in PrototypeMaterializationContext context) {
      result.ConsiderationRef = this.ConsiderationRef;
      this.MomentumData.Materialize(frame, ref result.MomentumData, in context);
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(UtilityReasoner))]
  public sealed unsafe partial class UtilityReasoner_Prototype : StructPrototype {
    public AssetRefUTRoot UTRoot;
    [HideInInspector()]
    [DynamicCollectionAttribute()]
    public AssetRefConsideration[] Considerations = {};
    [HideInInspector()]
    [DynamicCollectionAttribute()]
    public UTMomentumPack_Prototype[] MomentumList = {};
    [HideInInspector()]
    public FP TimeToTick;
    [HideInInspector()]
    [DictionaryAttribute()]
    [DynamicCollectionAttribute()]
    public DictionaryEntry_AssetRefConsideration_FP_Prototype[] CooldownsDict = {};
    [HideInInspector()]
    [DynamicCollectionAttribute()]
    public AssetRefConsideration[] PreviousExecution = {};
    partial void MaterializeUser(Frame frame, ref UtilityReasoner result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref UtilityReasoner result, in PrototypeMaterializationContext context) {
      if (this.Considerations.Length == 0) {
        result.Considerations = default;
      } else {
        var list = frame.AllocateList(result.Considerations, this.Considerations.Length);
        for (int i = 0; i < this.Considerations.Length; ++i) {
          Quantum.AssetRefConsideration tmp = default;
          tmp = this.Considerations[i];
          list.Add(tmp);
        }
        result.Considerations = list;
      }
      if (this.CooldownsDict.Length == 0) {
        result.CooldownsDict = default;
      } else {
        var dict = frame.AllocateDictionary(result.CooldownsDict, this.CooldownsDict.Length);
        for (int i = 0; i < this.CooldownsDict.Length; ++i) {
          Quantum.AssetRefConsideration tmpKey = default;
          FP tmpValue = default;
          tmpKey = this.CooldownsDict[i].Key;
          tmpValue = this.CooldownsDict[i].Value;
          PrototypeValidator.AddToDictionary(dict, tmpKey, tmpValue, in context);
        }
        result.CooldownsDict = dict;
      }
      if (this.MomentumList.Length == 0) {
        result.MomentumList = default;
      } else {
        var list = frame.AllocateList(result.MomentumList, this.MomentumList.Length);
        for (int i = 0; i < this.MomentumList.Length; ++i) {
          Quantum.UTMomentumPack tmp = default;
          this.MomentumList[i].Materialize(frame, ref tmp, in context);
          list.Add(tmp);
        }
        result.MomentumList = list;
      }
      if (this.PreviousExecution.Length == 0) {
        result.PreviousExecution = default;
      } else {
        var list = frame.AllocateList(result.PreviousExecution, this.PreviousExecution.Length);
        for (int i = 0; i < this.PreviousExecution.Length; ++i) {
          Quantum.AssetRefConsideration tmp = default;
          tmp = this.PreviousExecution[i];
          list.Add(tmp);
        }
        result.PreviousExecution = list;
      }
      result.TimeToTick = this.TimeToTick;
      result.UTRoot = this.UTRoot;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(WeaponCollectable))]
  public sealed unsafe partial class WeaponCollectable_Prototype : ComponentPrototype<WeaponCollectable> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref WeaponCollectable result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      WeaponCollectable component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref WeaponCollectable result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(WeaponPlatformSpawner))]
  public sealed unsafe partial class WeaponPlatformSpawner_Prototype : ComponentPrototype<WeaponPlatformSpawner> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref WeaponPlatformSpawner result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      WeaponPlatformSpawner component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref WeaponPlatformSpawner result, in PrototypeMaterializationContext context) {
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  public unsafe partial class FlatEntityPrototypeContainer {
    [ArrayLength(0, 1)]
    public List<Prototypes.AIBlackboardComponent_Prototype> AIBlackboardComponent;
    [ArrayLength(0, 1)]
    public List<Prototypes.AlivePlayerCharacter_Prototype> AlivePlayerCharacter;
    [ArrayLength(0, 1)]
    public List<Prototypes.BTAgent_Prototype> BTAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.BotCharacter_Prototype> BotCharacter;
    [ArrayLength(0, 1)]
    public List<Prototypes.Collectable_Prototype> Collectable;
    [ArrayLength(0, 1)]
    public List<Prototypes.CollectablePlatformSpawner_Prototype> CollectablePlatformSpawner;
    [ArrayLength(0, 1)]
    public List<Prototypes.Consumable_Prototype> Consumable;
    [ArrayLength(0, 1)]
    public List<Prototypes.ConsumablePlatformSpawner_Prototype> ConsumablePlatformSpawner;
    [ArrayLength(0, 1)]
    public List<Prototypes.DeadPlayerCharacter_Prototype> DeadPlayerCharacter;
    [ArrayLength(0, 1)]
    public List<Prototypes.Destructible_Prototype> Destructible;
    [ArrayLength(0, 1)]
    public List<Prototypes.DummyCharacter_Prototype> DummyCharacter;
    [ArrayLength(0, 1)]
    public List<Prototypes.EntityDestroyer_Prototype> EntityDestroyer;
    [ArrayLength(0, 1)]
    public List<Prototypes.GOAPAgent_Prototype> GOAPAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.GOAPData_Prototype> GOAPData;
    [ArrayLength(0, 1)]
    public List<Prototypes.GameContainer_Prototype> GameContainer;
    [ArrayLength(0, 1)]
    public List<Prototypes.HFSMAgent_Prototype> HFSMAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.Hazard_Prototype> Hazard;
    [ArrayLength(0, 1)]
    public List<Prototypes.Invisibility_Prototype> Invisibility;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerCharacter_Prototype> PlayerCharacter;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerCharging_Prototype> PlayerCharging;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerSpawner_Prototype> PlayerSpawner;
    [ArrayLength(0, 1)]
    public List<Prototypes.Projectile_Prototype> Projectile;
    [ArrayLength(0, 1)]
    public List<Prototypes.Rage_Prototype> Rage;
    [ArrayLength(0, 1)]
    public List<Prototypes.RaycastShots_Prototype> RaycastShots;
    [ArrayLength(0, 1)]
    public List<Prototypes.Regeneration_Prototype> Regeneration;
    [ArrayLength(0, 1)]
    public List<Prototypes.Shield_Prototype> Shield;
    [ArrayLength(0, 1)]
    public List<Prototypes.ShrinkingCircle_Prototype> ShrinkingCircle;
    [ArrayLength(0, 1)]
    public List<Prototypes.Spell_Prototype> Spell;
    [ArrayLength(0, 1)]
    public List<Prototypes.Star_Prototype> Star;
    [ArrayLength(0, 1)]
    public List<Prototypes.Stats_Prototype> Stats;
    [ArrayLength(0, 1)]
    public List<Prototypes.Stun_Prototype> Stun;
    [ArrayLength(0, 1)]
    public List<Prototypes.Targetable_Prototype> Targetable;
    [ArrayLength(0, 1)]
    public List<Prototypes.UTAgent_Prototype> UTAgent;
    [ArrayLength(0, 1)]
    public List<Prototypes.WeaponCollectable_Prototype> WeaponCollectable;
    [ArrayLength(0, 1)]
    public List<Prototypes.WeaponPlatformSpawner_Prototype> WeaponPlatformSpawner;
    partial void CollectGen(List<ComponentPrototype> target) {
      Collect(AIBlackboardComponent, target);
      Collect(AlivePlayerCharacter, target);
      Collect(BTAgent, target);
      Collect(BotCharacter, target);
      Collect(Collectable, target);
      Collect(CollectablePlatformSpawner, target);
      Collect(Consumable, target);
      Collect(ConsumablePlatformSpawner, target);
      Collect(DeadPlayerCharacter, target);
      Collect(Destructible, target);
      Collect(DummyCharacter, target);
      Collect(EntityDestroyer, target);
      Collect(GOAPAgent, target);
      Collect(GOAPData, target);
      Collect(GameContainer, target);
      Collect(HFSMAgent, target);
      Collect(Hazard, target);
      Collect(Invisibility, target);
      Collect(PlayerCharacter, target);
      Collect(PlayerCharging, target);
      Collect(PlayerSpawner, target);
      Collect(Projectile, target);
      Collect(Rage, target);
      Collect(RaycastShots, target);
      Collect(Regeneration, target);
      Collect(Shield, target);
      Collect(ShrinkingCircle, target);
      Collect(Spell, target);
      Collect(Star, target);
      Collect(Stats, target);
      Collect(Stun, target);
      Collect(Targetable, target);
      Collect(UTAgent, target);
      Collect(WeaponCollectable, target);
      Collect(WeaponPlatformSpawner, target);
    }
    public unsafe partial class StoreVisitor {
      public override void Visit(Prototypes.AIBlackboardComponent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.AIBlackboardComponent);
      }
      public override void Visit(Prototypes.AlivePlayerCharacter_Prototype prototype) {
        Storage.Store(prototype, ref Storage.AlivePlayerCharacter);
      }
      public override void Visit(Prototypes.BTAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.BTAgent);
      }
      public override void Visit(Prototypes.BotCharacter_Prototype prototype) {
        Storage.Store(prototype, ref Storage.BotCharacter);
      }
      public override void Visit(Prototypes.Collectable_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Collectable);
      }
      public override void Visit(Prototypes.CollectablePlatformSpawner_Prototype prototype) {
        Storage.Store(prototype, ref Storage.CollectablePlatformSpawner);
      }
      public override void Visit(Prototypes.Consumable_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Consumable);
      }
      public override void Visit(Prototypes.ConsumablePlatformSpawner_Prototype prototype) {
        Storage.Store(prototype, ref Storage.ConsumablePlatformSpawner);
      }
      public override void Visit(Prototypes.DeadPlayerCharacter_Prototype prototype) {
        Storage.Store(prototype, ref Storage.DeadPlayerCharacter);
      }
      public override void Visit(Prototypes.Destructible_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Destructible);
      }
      public override void Visit(Prototypes.DummyCharacter_Prototype prototype) {
        Storage.Store(prototype, ref Storage.DummyCharacter);
      }
      public override void Visit(Prototypes.EntityDestroyer_Prototype prototype) {
        Storage.Store(prototype, ref Storage.EntityDestroyer);
      }
      public override void Visit(Prototypes.GOAPAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.GOAPAgent);
      }
      public override void Visit(Prototypes.GOAPData_Prototype prototype) {
        Storage.Store(prototype, ref Storage.GOAPData);
      }
      public override void Visit(Prototypes.GameContainer_Prototype prototype) {
        Storage.Store(prototype, ref Storage.GameContainer);
      }
      public override void Visit(Prototypes.HFSMAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.HFSMAgent);
      }
      public override void Visit(Prototypes.Hazard_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Hazard);
      }
      public override void Visit(Prototypes.Invisibility_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Invisibility);
      }
      public override void Visit(Prototypes.PlayerCharacter_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerCharacter);
      }
      public override void Visit(Prototypes.PlayerCharging_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerCharging);
      }
      public override void Visit(Prototypes.PlayerSpawner_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerSpawner);
      }
      public override void Visit(Prototypes.Projectile_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Projectile);
      }
      public override void Visit(Prototypes.Rage_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Rage);
      }
      public override void Visit(Prototypes.RaycastShots_Prototype prototype) {
        Storage.Store(prototype, ref Storage.RaycastShots);
      }
      public override void Visit(Prototypes.Regeneration_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Regeneration);
      }
      public override void Visit(Prototypes.Shield_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Shield);
      }
      public override void Visit(Prototypes.ShrinkingCircle_Prototype prototype) {
        Storage.Store(prototype, ref Storage.ShrinkingCircle);
      }
      public override void Visit(Prototypes.Spell_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Spell);
      }
      public override void Visit(Prototypes.Star_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Star);
      }
      public override void Visit(Prototypes.Stats_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Stats);
      }
      public override void Visit(Prototypes.Stun_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Stun);
      }
      public override void Visit(Prototypes.Targetable_Prototype prototype) {
        Storage.Store(prototype, ref Storage.Targetable);
      }
      public override void Visit(Prototypes.UTAgent_Prototype prototype) {
        Storage.Store(prototype, ref Storage.UTAgent);
      }
      public override void Visit(Prototypes.WeaponCollectable_Prototype prototype) {
        Storage.Store(prototype, ref Storage.WeaponCollectable);
      }
      public override void Visit(Prototypes.WeaponPlatformSpawner_Prototype prototype) {
        Storage.Store(prototype, ref Storage.WeaponPlatformSpawner);
      }
    }
  }
}
#pragma warning restore 0649
#pragma warning restore 1522
#pragma warning restore 0414
#pragma warning restore 0219
#pragma warning restore 0109
