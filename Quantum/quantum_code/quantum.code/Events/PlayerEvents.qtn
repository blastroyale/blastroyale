import Physics3D;
import String;

synced event OnPlayerLeft
{
	remote player_ref Player;
	entity_ref Entity;
}

synced event OnPlayerSpawned
{
	player_ref Player;
	entity_ref Entity;
	bool HasRespawned;
}

synced event OnPlayerAlive
{
	player_ref Player;
	entity_ref Entity;
	Int32 CurrentHealth;
    Int32 MaxHealth;
}

synced event OnPlayerSkydiveDrop
{
	player_ref Player;
	entity_ref Entity;
}

synced event OnPlayerSkydivePLF
{
	player_ref Player;
	entity_ref Entity;
}

synced event OnPlayerSkydiveLand
{
	player_ref Player;
	entity_ref Entity;
}

synced event OnPlayerDead
{
	player_ref Player;
	entity_ref Entity;
	entity_ref EntityKiller;
	bool IsPlayerKiller;
	EquipmentEventData EquipmentData;
}

struct EquipmentEventData {
    array<Equipment>[MAX_GEAR] Gear;
    Equipment CurrentWeapon;
}

synced event OnPlayerEmojiSent
{
	player_ref Player;
	entity_ref Entity;
	GameId Emoji;
}

synced event OnPlayerKilledPlayer
{
	player_ref PlayerDead;
	entity_ref EntityDead;
	player_ref PlayerKiller;
	entity_ref EntityKiller;
	player_ref PlayerLeader;
	entity_ref EntityLeader;
	UInt32 CurrentKillStreak;
	UInt32 CurrentMultiKill;
}

synced event OnPlayerLevelUp
{
	player_ref Player;
	entity_ref Entity;
    Int32 CurrentLevel;
}

synced event OnPlayerEnergyChanged
{
	player_ref Player;
	entity_ref Entity;
    Int32 PreviousPowerValue;
    Int32 CurrentPowerValue;
    Int32 ChangeAmount;
    Int32 CurrentLevel;
}

synced event OnPlayerAmmoEmpty
{
	player_ref Player;
	entity_ref Entity;
}

synced event OnPlayerAmmoChanged
{
	player_ref Player;
	entity_ref Entity;
	Int32 CurrentAmmo;
	Int32 MaxAmmo;
	Int32 MagSize;
}

synced event OnPlayerMagazineChanged
{
	player_ref Player;
	entity_ref Entity;
	Int32 MagSize;
	Int32 ShotCount;
}

synced event OnPlayerReloadStart
{
	player_ref Player;
	entity_ref Entity;
	Equipment Weapon;
}

synced event OnPlayerMagazineReloaded
{
	player_ref Player;
	entity_ref Entity;
	Equipment Weapon;
}


synced event OnPlayerWeaponChanged
{
	player_ref Player;
	entity_ref Entity;
	Equipment Weapon;
	Int32 Slot;
}

event OnPlayerGearChanged
{
	player_ref Player;
	entity_ref Entity;
	Equipment Gear;
	Int32 Slot;
}

event OnPlayerAttack
{
	player_ref Player;
	entity_ref PlayerEntity;
	Equipment Weapon;
	QuantumWeaponConfig WeaponConfig;
	FPVector2 Direction;
	FP AttackRange;
}

event OnEntityDamaged
{
	player_ref Player;
	Spell Spell;
	UInt32 TotalDamage;
	UInt32 ShieldDamage; 
	Int32 PreviousShield;
	Int32 MaxShield;
	UInt32 HealthDamage;
	Int32 PreviousHealth;
	Int32 MaxHealth;
}

event OnPlayerAttackHit
{
	player_ref Player;
	entity_ref PlayerEntity;
	entity_ref HitEntity;
	FPVector3 HitPosition;
	UInt32 TotalDamage;
}

event OnPlayerStopAttack
{
	player_ref Player;
	entity_ref PlayerEntity;
}

event OnPlayerEquipmentStatsChanged
{
	player_ref Player;
	entity_ref Entity;
	Quantum.Stats PreviousStats;
	Quantum.Stats CurrentStats;
	Int32 CurrentMight;
}

event OnPlayerSpecialUsed
{
	player_ref Player;
	entity_ref Entity;
	Special Special;
	Int32 SpecialIndex;
	FPVector3 HitPosition;
}

// LOCAL PLAYER EVENTS

synced event OnLocalPlayerSpawned
{
	local player_ref Player;
	entity_ref Entity;
	bool HasRespawned;
}

synced event OnLocalPlayerAlive
{
	local player_ref Player;
	entity_ref Entity;
	Int32 CurrentHealth;
	Int32 MaxHealth;
}

synced event OnLocalPlayerSkydiveDrop
{
	local player_ref Player;
	entity_ref Entity;
}

synced event OnLocalPlayerSkydivePLF
{
	local player_ref Player;
	entity_ref Entity;
}

synced event OnLocalPlayerSkydiveLand
{
	local player_ref Player;
	entity_ref Entity;
}

synced event OnLocalPlayerDead
{
	local player_ref Player;
	entity_ref Entity;
	player_ref PlayerKiller;
	entity_ref EntityKiller;
	bool FromRoofDamage;
}

event OnLocalPlayerAmmoEmpty
{
	local player_ref Player;
	entity_ref Entity;
}

synced event OnLocalPlayerWeaponAdded
{
	local player_ref Player;
	entity_ref Entity;
	Equipment Weapon;
	Int32 WeaponSlotNumber;
}

event OnLocalPlayerWeaponChanged
{
	local player_ref Player;
	entity_ref Entity;
	WeaponSlot WeaponSlot;
	Int32 Slot;
}

event OnLocalPlayerSpecialUsed
{
	local player_ref Player;
	entity_ref Entity;
	Special Special;
	Int32 SpecialIndex;
	FPVector3 HitPosition;
}

synced event OnLocalPlayerRoofDetected
{
	local player_ref Player;
	bool OnRoof;
}