# Android build and release pipeline
# This pipeline is respsonsible for building the Android APK, and uploading to Azure Storage.

name: $(Rev:r)

trigger:
  batch: true
  branches:
    include:
      - 'develop'
      - 'release/*'
      - 'hotfix/*'
      - 'master'
pr: none

resources:
  repositories:
    - repository: self
    - repository: templates
      type: git
      ref: main
      name: Infrastructure/core-templates

parameters:
  - name: param_dev_build
    displayName: Unity Dev Build
    type: boolean
    default: true
  - name: param_quantum_configuration
    displayName: Quantum Configuration
    type: string
    default: Debug
    values:
      - Debug
      - Release
  - name: param_srdebugger
    displayName: Enable SR Debugger
    type: boolean
    default: true
  - name: param_environment
    displayName: Select Target Environment
    type: string
    default: development
    values:
      - development
      - staging
      - community
      - production
  - name: param_platforms
    displayName: Platforms
    type: string
    default: All
    values:
      - All
      - iOS
      - Android
  - name: param_run_unity_tests
    displayName: Run Unit Tests
    type: boolean
    default: false
  - name: param_run_testlab
    displayName: Run Tests with Physical Devices at TestLab
    type: boolean
    default: false
  - name: param_deploy_game_logic
    displayName: "[CD] Deploy Game Logic"
    type: boolean
    default: false
  - name: param_deploy_quantum_plugin
    displayName: "[CD] Deploy Quantum Plugin"
    type: boolean
    default: false

variables:
  - group: Secrets
  - group: Non-secrets
  - name: unity_password
    value: $(UNITY-PASSWORD)
  - name: unity_serial
    value: $(UNITY-SERIAL)
  - name: unity_email
    value: $(UNITY-EMAIL)
  - name: branchName
    value: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
  - name: slackToken
    value: $(SLACK-BOT-TOKEN)
    # Auto setup
  - ${{ if ne(variables['Build.Reason'], 'Manual') }}:
      # Production
      - ${{  if eq(variables['Build.SourceBranch'], 'refs/heads/master')  }}:
          - name: quantum_configuration
            value: "Release"
          - name: unity_dev_build
            value: false
          - name: environment
            value: "production"
          - name: runTestLab
            value: false
          - name: enableSrDebugger
            value: false
          - name: deploy_quantum_plugin
            value: true
          - name: deploy_game_logic
            value: true
      # Staging
      - ${{  elseif or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/'))  }}:
          - name: quantum_configuration
            value: "Release"
          - name: unity_dev_build
            value: true
          - name: environment
            value: "staging"
          - name: runTestLab
            value: false
          - name: enableSrDebugger
            value: true
          - name: deploy_game_logic
            value: true
          - name: deploy_quantum_plugin
            value: true
      # Dev
      - ${{ else }}:
          - name: quantum_configuration
            value: "Debug"
          - name: unity_dev_build
            value: true
          - name: environment
            value: "development"
          - name: runTestLab
            value: true
          - name: enableSrDebugger
            value: true
          - name: deploy_game_logic
            value: true
          - name: deploy_quantum_plugin
            value: false
    # Manual setup
  - ${{ if eq(variables['Build.Reason'], 'Manual') }}:
      - name: quantum_configuration
        value: ${{ parameters.param_quantum_configuration }}
      - name: unity_dev_build
        value: ${{ parameters.param_dev_build }}
      - name: environment
        value: ${{ parameters.param_environment }}
      - name: runUnitTests
        value: ${{ parameters.param_run_unity_tests }}
      - name: runTestLab
        value: ${{ parameters.param_run_testlab }}
      - name: enableSrDebugger
        value: ${{ parameters.param_srdebugger }}
      - name: deploy_quantum_plugin
        value: ${{ parameters.param_deploy_quantum_plugin }}
      - name: deploy_game_logic
        value: ${{ parameters.param_deploy_game_logic }}
pool: macos

stages:
  - stage: Builds
    lockBehavior: sequential
    jobs:
      - job: DisplayAndTagBuild
        timeoutInMinutes: 1
        cancelTimeoutInMinutes: 0
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - checkout: none
          # This step adds a tag to the build, the Game Logic CD uses it to decide if should run or not
          # So we just want to run for automatic builds or if manually ticked 
          - bash: |
              echo "##vso[build.addbuildtag]quantum_config-$(quantum_configuration)"
              echo "##vso[build.addbuildtag]unity_dev_build-$(unity_dev_build)"
              echo "##vso[build.addbuildtag]sr_debugger-$(enableSrDebugger)"
              echo "##vso[build.addbuildtag]deploy_environment-$(environment)"
              echo "##vso[build.addbuildtag]deploy_game_logic-$(deploy_game_logic)"
              echo "##vso[build.addbuildtag]deploy_quantum_plugin-$(deploy_quantum_plugin)"
              echo "##vso[build.addbuildtag]run_test_lab-$(runTestLab)"
            displayName: "Add Tags"
          - powershell: |
              $json = @"
              {
              "environment": "$(environment)",
              "dev_build": "$(unity_dev_build)",
              "deploy_game_logic": "$(deploy_game_logic)",
              "deploy_quantum_server": "$(deploy_quantum_plugin)",
              "run_test_lab": "$(runTestLab)",
              "sr_debugger":"$(enableSrDebugger)",
              "quantum_config": "$(quantum_configuration)"
              
              }
              "@
              $json | Out-File $(Build.ArtifactStagingDirectory)\parameters.json
              Get-Content $(Build.ArtifactStagingDirectory)\parameters.json       
            displayName: "Print Build Parameters"
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'parameters'

          - template: tasks/send-slack-template.yml@templates
            parameters:
              messageIdArtifact: slackbuildmessage
              slackToken: $(slackToken)
              templateUrl: https://prodflgbuildstorage.blob.core.windows.net/public/slack-base.json


      - job: EditorTests
        displayName: Run Editor Test Suite
        condition: eq('${{ lower(variables.runUnitTests) }}', 'true')
        steps:
          - checkout: self
            lfs: true
            submodules: true
          - template: unity-tests.yml
            parameters:
              testPlatform: EditMode
        dependsOn: DisplayAndTagBuild

      - job: AndroidBuild
        cancelTimeoutInMinutes: 0
        timeoutInMinutes: 50
        dependsOn: EditorTests
        displayName: Android Build
        condition: and(in(dependencies.EditorTests.result, 'Succeeded', 'Skipped'),not(or(failed(), canceled())),ne('${{ parameters.param_platforms }}', 'iOS'))
        steps:
          - template: tasks/update-slack-message.yml@templates
            parameters:
              slackToken: $(slackToken)
              messageIdArtifact: slackbuildmessage
              update:
                - blockId: android
                  path: text.text
                  value: '*:android: Android :android:*#n*Status:* Dowloading code :downloading:'
                  operation: replace
          - checkout: self
            lfs: true
            fetchTags: false
          - template: unity-build.yml
            parameters:
              quantum_configuration: $(quantum_configuration)
              platform: Android
              unity_username: $(unity_email)
              unity_password: $(unity_password)
              unity_serial: $(unity_serial)
              workingDirectory: .
              branchName: $(branchName)
              slackToken: $(slackToken)
              publishDlls: true
              environment: ${{ variables.environment }}
              unity_dev_build: ${{ variables.unity_dev_build }}
              enable_sr_debugger: ${{ variables.enableSrDebugger }}
              remote_addressables: false

      - job: iOSBuild
        cancelTimeoutInMinutes: 0
        timeoutInMinutes: 50
        dependsOn: EditorTests
        displayName: iOS Build
        condition: |
          and(
            ne('${{ parameters.param_platforms }}', 'Android'),
            in(dependencies.EditorTests.result, 'Succeeded', 'Skipped'),
            not(or(failed(), canceled()))
          )
        steps:
          - template: tasks/update-slack-message.yml@templates
            parameters:
              slackToken: $(slackToken)
              messageIdArtifact: slackbuildmessage
              update:
                - blockId: ios
                  path: text.text
                  value: '*:ios: iOS :ios:*#n*Status:* Dowloading code :downloading:'
                  operation: replace

          - checkout: self
            lfs: true
            fetchTags: false
          - template: unity-build.yml
            parameters:
              quantum_configuration: $(quantum_configuration)
              platform: iOS
              unity_username: $(unity_email)
              unity_password: $(unity_password)
              unity_serial: $(unity_serial)
              workingDirectory: .
              branchName: $(branchName)
              slackToken: $(slackToken)
              publishDlls: ${{ eq(parameters.param_platforms, 'iOS') }}
              environment: ${{ variables.environment }}
              unity_dev_build: ${{ variables.unity_dev_build }}
              remote_addressables: false
              enable_sr_debugger: ${{ variables.enableSrDebugger }}
      
      # GAME LOGIC
      - job: BuildAndPushGameLogic
        pool:
          vmImage: "ubuntu-latest"
        dependsOn: AndroidBuild
        displayName: Build and Push Game Logic
        condition: eq(dependencies.AndroidBuild.result, 'Succeeded')
        steps:
          - checkout: none
            # Sparse checkout is a lot faster
          - template: pipelines/bitbucket-sparse-checkout.yml@templates
            parameters:
              repositoryName: blast-royale
              commit: $(Build.SourceVersion)
              bitbucketToken: $(BITBUCKET-BLAST-ROYALE-ACCESS-TOKEN)
              directory: 'Backend/'

          - download: current
            artifact: 'GameDlls'
          - bash: |
              set -x
              
              dllDir=$(Pipeline.Workspace)/GameDlls
              ls -la $dllDir
              
              cp -vf $dllDir/*.dll "$(System.DefaultWorkingDirectory)/Backend/Lib/"
              cp -vf $dllDir/*.dll "$(System.DefaultWorkingDirectory)/Backend/UnityLib/"
              cp -vf $dllDir/*.json "$(System.DefaultWorkingDirectory)/Backend/ServerCommon/Resources/"
            displayName: Copy the Dlls
          - template: pipelines/game-logic-build-push.yml@templates    