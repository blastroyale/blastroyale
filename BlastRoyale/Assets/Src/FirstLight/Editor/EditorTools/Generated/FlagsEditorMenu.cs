
// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
// </auto-generated>
using FirstLight.Game.Utils;
using UnityEditor;
using System;
using UnityEngine;
using System.Diagnostics.CodeAnalysis;


/* AUTO GENERATED CODE */
namespace FirstLight.Editor.EditorTools.Generated
{
	[InitializeOnLoad]
	[SuppressMessage("ReSharper", "InconsistentNaming")]
		public static class FlagsEditorMenu
	{



		static FlagsEditorMenu()
		{
				EditorApplication.delayCall += () =>
			{
				Menu.SetChecked("FLG/Local Flags/Use local server", IsUseLocalServer);
Menu.SetChecked("FLG/Local Flags/Use local configs", IsUseLocalConfigs);
Menu.SetChecked("FLG/Local Flags/Record quantum input", IsRecordQuantumInput);
Menu.SetChecked("FLG/Local Flags/Force Authentication Connection Error", IsForceAuthError);
Menu.SetChecked("FLG/Local Flags/Dev QOL/Disable Pause Behaviour", IsDisablePauseBehaviour);
Menu.SetChecked("FLG/Local Flags/Dev QOL/Offline mode", IsOfflineMode);
Menu.SetChecked("FLG/Local Flags/Dev QOL/Autostart test game", IsStartTestGameAutomatically);
Menu.SetChecked("FLG/Local Flags/Dev QOL/Skip match load timer", IsSkipMatchLoadTimer);
Menu.SetChecked("FLG/Local Flags/Dev QOL/Unlock all fame stuff", IsUnlockAllFameStuff);
Menu.SetChecked("FLG/Local Flags/Dev QOL/Disable Reconnection", IsDisableReconnection);
Menu.SetChecked("FLG/Local Flags/Dev QOL/Append Minute to Playtest room", IsAppendMinuteToPlaytest);
Menu.SetChecked("FLG/Local Flags/Dev QOL/Fixed Quantum Seed", IsFixedQuantumSeed);
Menu.SetChecked("FLG/Local Flags/Dev QOL/Use bot behaviour", IsUseBotBehaviour);

				Menu.SetChecked("FLG/Local Flags/Symbols/Enable bot debug visuals", IsBotDebug);

				UpdateSelectionTutorial();
			};

		}

		
		private static bool IsUseLocalServer
		{
			get => FeatureFlags.GetLocalConfiguration().UseLocalServer;
			set
			{
				FeatureFlags.GetLocalConfiguration().UseLocalServer = value;
				Debug.Log("Setting UseLocalServer to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsUseLocalConfigs
		{
			get => FeatureFlags.GetLocalConfiguration().UseLocalConfigs;
			set
			{
				FeatureFlags.GetLocalConfiguration().UseLocalConfigs = value;
				Debug.Log("Setting UseLocalConfigs to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsRecordQuantumInput
		{
			get => FeatureFlags.GetLocalConfiguration().RecordQuantumInput;
			set
			{
				FeatureFlags.GetLocalConfiguration().RecordQuantumInput = value;
				Debug.Log("Setting RecordQuantumInput to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsForceAuthError
		{
			get => FeatureFlags.GetLocalConfiguration().ForceAuthError;
			set
			{
				FeatureFlags.GetLocalConfiguration().ForceAuthError = value;
				Debug.Log("Setting ForceAuthError to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsDisablePauseBehaviour
		{
			get => FeatureFlags.GetLocalConfiguration().DisableRunInBackground;
			set
			{
				FeatureFlags.GetLocalConfiguration().DisableRunInBackground = value;
				Debug.Log("Setting DisablePauseBehaviour to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsOfflineMode
		{
			get => FeatureFlags.GetLocalConfiguration().OfflineMode;
			set
			{
				FeatureFlags.GetLocalConfiguration().OfflineMode = value;
				Debug.Log("Setting OfflineMode to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsStartTestGameAutomatically
		{
			get => FeatureFlags.GetLocalConfiguration().StartTestGameAutomatically;
			set
			{
				FeatureFlags.GetLocalConfiguration().StartTestGameAutomatically = value;
				Debug.Log("Setting StartTestGameAutomatically to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsSkipMatchLoadTimer
		{
			get => FeatureFlags.GetLocalConfiguration().SkipMatchLoadTimer;
			set
			{
				FeatureFlags.GetLocalConfiguration().SkipMatchLoadTimer = value;
				Debug.Log("Setting SkipMatchLoadTimer to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsUnlockAllFameStuff
		{
			get => FeatureFlags.GetLocalConfiguration().UnlockAllFameStuff;
			set
			{
				FeatureFlags.GetLocalConfiguration().UnlockAllFameStuff = value;
				Debug.Log("Setting UnlockAllFameStuff to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsDisableReconnection
		{
			get => FeatureFlags.GetLocalConfiguration().DisableReconnection;
			set
			{
				FeatureFlags.GetLocalConfiguration().DisableReconnection = value;
				Debug.Log("Setting DisableReconnection to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsAppendMinuteToPlaytest
		{
			get => FeatureFlags.GetLocalConfiguration().AppendMinuteToPlaytest;
			set
			{
				FeatureFlags.GetLocalConfiguration().AppendMinuteToPlaytest = value;
				Debug.Log("Setting AppendMinuteToPlaytest to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsFixedQuantumSeed
		{
			get => FeatureFlags.GetLocalConfiguration().FixedQuantumSeed;
			set
			{
				FeatureFlags.GetLocalConfiguration().FixedQuantumSeed = value;
				Debug.Log("Setting FixedQuantumSeed to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}


		private static bool IsUseBotBehaviour
		{
			get => FeatureFlags.GetLocalConfiguration().UseBotBehaviour;
			set
			{
				FeatureFlags.GetLocalConfiguration().UseBotBehaviour = value;
				Debug.Log("Setting UseBotBehaviour to "+value);
				FeatureFlags.SaveLocalConfig();
			}
		}

		
				private static bool IsBotDebug
		{
			get => FlagMenuGenerator.IsSymbolDefined("DEBUG_BOTS");
			set => FlagMenuGenerator.SetCompileDefine("DEBUG_BOTS", value);
		}


		
		[MenuItem("FLG/Local Flags/Use local server", false, 5)]
		private static void ToggleUseLocalServer()
		{
			IsUseLocalServer = !IsUseLocalServer;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Use local server", IsUseLocalServer); };
		}


		[MenuItem("FLG/Local Flags/Use local configs", false, 5)]
		private static void ToggleUseLocalConfigs()
		{
			IsUseLocalConfigs = !IsUseLocalConfigs;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Use local configs", IsUseLocalConfigs); };
		}


		[MenuItem("FLG/Local Flags/Record quantum input", false, 5)]
		private static void ToggleRecordQuantumInput()
		{
			IsRecordQuantumInput = !IsRecordQuantumInput;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Record quantum input", IsRecordQuantumInput); };
		}


		[MenuItem("FLG/Local Flags/Force Authentication Connection Error", false, 5)]
		private static void ToggleForceAuthError()
		{
			IsForceAuthError = !IsForceAuthError;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Force Authentication Connection Error", IsForceAuthError); };
		}


		[MenuItem("FLG/Local Flags/Dev QOL/Disable Pause Behaviour", false, 5)]
		private static void ToggleDisablePauseBehaviour()
		{
			IsDisablePauseBehaviour = !IsDisablePauseBehaviour;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Dev QOL/Disable Pause Behaviour", IsDisablePauseBehaviour); };
		}


		[MenuItem("FLG/Local Flags/Dev QOL/Offline mode", false, 5)]
		private static void ToggleOfflineMode()
		{
			IsOfflineMode = !IsOfflineMode;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Dev QOL/Offline mode", IsOfflineMode); };
		}


		[MenuItem("FLG/Local Flags/Dev QOL/Autostart test game", false, 5)]
		private static void ToggleStartTestGameAutomatically()
		{
			IsStartTestGameAutomatically = !IsStartTestGameAutomatically;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Dev QOL/Autostart test game", IsStartTestGameAutomatically); };
		}


		[MenuItem("FLG/Local Flags/Dev QOL/Skip match load timer", false, 5)]
		private static void ToggleSkipMatchLoadTimer()
		{
			IsSkipMatchLoadTimer = !IsSkipMatchLoadTimer;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Dev QOL/Skip match load timer", IsSkipMatchLoadTimer); };
		}


		[MenuItem("FLG/Local Flags/Dev QOL/Unlock all fame stuff", false, 5)]
		private static void ToggleUnlockAllFameStuff()
		{
			IsUnlockAllFameStuff = !IsUnlockAllFameStuff;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Dev QOL/Unlock all fame stuff", IsUnlockAllFameStuff); };
		}


		[MenuItem("FLG/Local Flags/Dev QOL/Disable Reconnection", false, 5)]
		private static void ToggleDisableReconnection()
		{
			IsDisableReconnection = !IsDisableReconnection;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Dev QOL/Disable Reconnection", IsDisableReconnection); };
		}


		[MenuItem("FLG/Local Flags/Dev QOL/Append Minute to Playtest room", false, 5)]
		private static void ToggleAppendMinuteToPlaytest()
		{
			IsAppendMinuteToPlaytest = !IsAppendMinuteToPlaytest;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Dev QOL/Append Minute to Playtest room", IsAppendMinuteToPlaytest); };
		}


		[MenuItem("FLG/Local Flags/Dev QOL/Fixed Quantum Seed", false, 5)]
		private static void ToggleFixedQuantumSeed()
		{
			IsFixedQuantumSeed = !IsFixedQuantumSeed;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Dev QOL/Fixed Quantum Seed", IsFixedQuantumSeed); };
		}


		[MenuItem("FLG/Local Flags/Dev QOL/Use bot behaviour", false, 5)]
		private static void ToggleUseBotBehaviour()
		{
			IsUseBotBehaviour = !IsUseBotBehaviour;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Dev QOL/Use bot behaviour", IsUseBotBehaviour); };
		}

		
		[MenuItem("FLG/Local Flags/Symbols/Enable bot debug visuals",false,30)]
		private static void ToggleBotDebug()
		{
			IsBotDebug = !IsBotDebug;
			EditorApplication.delayCall += () => { Menu.SetChecked("FLG/Local Flags/Symbols/Enable bot debug visuals", IsBotDebug); };
		}


					
			private static void UpdateSelectionTutorial()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().Tutorial;

			foreach (var name in Enum.GetNames(typeof(FirstLight.Game.Utils.FlagOverwrite)))
			{
				var menuPath = $"FLG/Local Flags/Tutorial/{name}";
				Menu.SetChecked(menuPath, currentValue.ToString() == name);
			}
		}
		[MenuItem("FLG/Local Flags/Tutorial/None",false, 18)]
		private static void ToggleTutorialNone()
		{
			
			FeatureFlags.GetLocalConfiguration().Tutorial = FirstLight.Game.Utils.FlagOverwrite.None;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting Tutorial to FirstLight.Game.Utils.FlagOverwrite.None");
			EditorApplication.delayCall += UpdateSelectionTutorial; ;
		}

	[MenuItem("FLG/Local Flags/Tutorial/None",true,18)]
		private static bool ValidateTutorialNone()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().Tutorial;
			return currentValue.ToString() != "None";
		}

		[MenuItem("FLG/Local Flags/Tutorial/True",false, 18)]
		private static void ToggleTutorialTrue()
		{
			
			FeatureFlags.GetLocalConfiguration().Tutorial = FirstLight.Game.Utils.FlagOverwrite.True;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting Tutorial to FirstLight.Game.Utils.FlagOverwrite.True");
			EditorApplication.delayCall += UpdateSelectionTutorial; ;
		}

	[MenuItem("FLG/Local Flags/Tutorial/True",true,18)]
		private static bool ValidateTutorialTrue()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().Tutorial;
			return currentValue.ToString() != "True";
		}

		[MenuItem("FLG/Local Flags/Tutorial/False",false, 18)]
		private static void ToggleTutorialFalse()
		{
			
			FeatureFlags.GetLocalConfiguration().Tutorial = FirstLight.Game.Utils.FlagOverwrite.False;
			FeatureFlags.SaveLocalConfig();
			Debug.Log("Setting Tutorial to FirstLight.Game.Utils.FlagOverwrite.False");
			EditorApplication.delayCall += UpdateSelectionTutorial; ;
		}

	[MenuItem("FLG/Local Flags/Tutorial/False",true,18)]
		private static bool ValidateTutorialFalse()
		{
			var currentValue = FeatureFlags.GetLocalConfiguration().Tutorial;
			return currentValue.ToString() != "False";
		}


	}
}