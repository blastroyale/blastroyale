# Android build and release pipeline
# This pipeline is respsonsible for building the Android APK, and uploading to Azure Storage.

name: $(Rev:r)

trigger:
  batch: true
  branches:
    include:
    - 'develop'
    - 'release/*'
    - 'master'
pr: none

resources:
  repositories:
  - repository: self
  - repository: templates
    type: git
    ref: feature/build_pipeline_update
    name: Infrastructure/core-templates

parameters:
  - name: param_dev_build
    displayName: Development Build
    type: boolean
    default: true
  - name: param_environment
    displayName: Select Target Environment
    type: string
    default: development
    values:
      - development
      - staging
      - production
  - name: param_run_unity_tests
    displayName: Run Unit Tests
    type: boolean
    default: false
  - name: param_run_testlab
    displayName: Run Tests with Physical Devices at TestLab
    type: boolean
    default: false
  - name: param_deploy_game_logic
    displayName: "[CD] Deploy Game Logic"
    type: boolean
    default: false
  - name: param_deploy_quantum_plugin
    displayName: "[CD] Deploy Quantum Plugin"
    type: boolean
    default: false  
  - name: param_fake_build
    displayName: "[DEBUG] Skip game builds and reuse dlls"
    type: boolean
    default: false
  - name: param_skip_ios # In theory this should make androids builds faster, because there is nothing running in parallel
    displayName: "[DEBUG] Skip IOS build"
    type: boolean
    default: false

variables:
- group: Secrets
- group: Non-secrets
- name: unity_password
  value: $(UNITY-PASSWORD)
- name: unity_serial
  value: $(UNITY-SERIAL)
- name: unity_email
  value: $(UNITY-EMAIL)
- name: branchName
  value: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
- name: slackToken
  value: $(SLACK-BOT-TOKEN)
- name: kuttKey
  value: $(KUTT-KEY)
- name: isQuantumPluginBumpVersion
  value: ${{ or(eq(variables['Build.Reason'], 'BatchedCI'), eq(parameters['param_deploy_quantum_plugin'], 'True')) }}
  # Auto setup
- ${{ if ne(variables['Build.Reason'], 'Manual') }}:
    - name: configuration
      ${{  if eq(variables['Build.SourceBranch'], 'refs/heads/develop')  }}:
        value: "Debug"
      ${{  if or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release'), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))  }}:
        value: "Release"
    - name: development_build
      ${{  if eq(variables['Build.SourceBranch'], 'refs/heads/develop')  }}:
        value: true
      ${{  if eq(variables['Build.SourceBranch'], 'refs/heads/master')  }}:
        value: false
    - name: environment
      ${{  if eq(variables['Build.SourceBranch'], 'refs/heads/develop')  }}:
        value: "development"
      ${{  if eq(variables['Build.SourceBranch'], 'refs/heads/master')  }}:
        value: "production"
    - name: runTestLab
      value: false
  # Manual setup
- ${{ if eq(variables['Build.Reason'], 'Manual') }}:
    - ${{  if eq(parameters['param_dev_build'], 'true') }}:
        - name: configuration
          value: "Debug"
    - ${{  if eq(parameters['param_dev_build'], 'false') }}:
        - name: configuration
          value: "Release"
    - name: dev_build
      value: ${{ parameters.param_dev_build }}
    - name: environment
      value: ${{ parameters.param_environment }}
    - name: runUnitTests
      value: ${{ parameters.param_run_unity_tests }} 
    - name: runTestLab
      value: ${{ parameters.param_run_testlab }}

pool: macos

stages:
  - stage: Builds
    lockBehavior: sequential
    jobs:
      - job: DisplayAndTagBuild
        steps:
        - checkout: none
        - bash: |
            echo "Build Reason: $(Build.Reason)"
            echo "Environment: $(environment)"
            echo "Development build: $(dev_build)"
            echo "Configuration: $(configuration)"
            echo "Android File Type: $(androidFileType)"
            echo "Use Accelerator: $(useAccelerator)"
            echo "Run TestLabs: $(runTestLabs)"
            echo "Run Tests: $(runUnitTests)"
          displayName: "Print variables"
        # This step adds a tag to the build, the Game Logic CD uses it to decide if should run or not
        # So we just want to run for automatic builds or if manually ticked 
        - bash: |
            if [ "${{ parameters.param_deploy_game_logic }}" == "True" ] || [ "$(Build.Reason)" == "BatchedCI" ]; then
              echo "##vso[build.addbuildtag]DeployGameLogic"
              echo "##vso[task.setvariable variable=deploy_game_logic;]true"
            else
              echo "##vso[task.setvariable variable=deploy_game_logic;]false"
            fi
            echo "##vso[build.addbuildtag]ENV-$(environment)"


            if [ "${{ parameters.param_dev_build }}" == "True" ]; then
              echo "##vso[build.addbuildtag]DEVELOPMENT_BUILD"
            else
              echo "##vso[build.addbuildtag]RELEASE_BUILD"
            fi
          displayName: "Add Tags"
        - powershell: |
            $json = @"
            {
            "environment": "$(environment)",
            "dev_build": "$(dev_build)",
            "deploy_game_logic": "$(deploy_game_logic)"
            }
            "@
            $json | Out-File $(Build.ArtifactStagingDirectory)\parameters.json
            Get-Content $(Build.ArtifactStagingDirectory)\parameters.json                
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'parameters'

        - template: tasks/send-slack-template.yml@templates
          parameters:
            messageIdArtifact: slackbuildmessage                    
            slackToken: $(slackToken)
            templateUrl: https://prodflgbuildstorage.blob.core.windows.net/public/slack-base.json          

          
      - job: EditorTests
        displayName: Run Editor Test Suite
        condition: eq('${{ lower(variables.runUnitTests) }}', 'true')
        steps:
        - checkout: self
          lfs: true
          submodules: true
        - template: pipelines/unity-tests.yml@templates
          parameters:
            testPlatform: EditMode 
        dependsOn: DisplayAndTagBuild  
          
      - job: AndroidBuild
        timeoutInMinutes: 90
        dependsOn:  EditorTests
        displayName: Android Build
        condition: |
            and(in(dependencies.EditorTests.result, 'Succeeded', 'Skipped'),not(or(failed(), canceled())))
          
      
        steps:
        # This is a helper to debug this hellish pipeline, it bypasses the GameBuilds and uses a previous artifact
        # and continue the execution to the game logic / quantum plugin deployment
        - ${{ if eq(parameters['param_fake_build'], 'true') }}:              
          - checkout: none
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'specific'
              project: 'blast-royale'
              pipeline: 'Game-Builds'
              pipelineId: $(fake_build_id)
              runVersion: 'specific'
              artifactName: 'GameDlls'
              downloadPath: '$(Pipeline.Workspace)/GameDlls'
              allowFailedBuilds: true
          - task: PublishPipelineArtifact@1
            inputs:
              artifactName: 'GameDlls'
              targetPath: '$(Pipeline.Workspace)/GameDlls'
        - ${{ else }}:
          - template:  tasks/update-slack-message.yml@templates
            parameters:
              slackToken: $(slackToken)
              messageIdArtifact: slackbuildmessage  
              update:
                - blockId: android
                  path: text.text
                  value: '*:android: Android :android:*#n*Status:* Dowloading code :downloading:'
                  operation: replace
          - checkout: self
            lfs: true
            fetchTags: false
          - template: pipelines/unity-build.yml@templates
            parameters:
              configuration: $(configuration)
              platform: Android
              unity_username: $(unity_email)
              unity_password: $(unity_password)
              unity_serial: $(unity_serial)
              workingDirectory: .
              branchName: $(branchName)
              slackToken: $(slackToken)
              kuttKey: $(kuttKey)
              runTestLab: ${{ variables.runTestLab }}
              publishDlls: true
              environment: ${{ variables.environment }}
              dev_build: ${{ variables.dev_build }}
            
      - job: iOSBuild
        timeoutInMinutes: 90
        dependsOn:  EditorTests
        displayName: iOS Build
        condition: |
          and(
            ne(${{ parameters.param_fake_build }}, true),
            ne(${{ parameters.param_skip_ios }}, true),
            in(dependencies.EditorTests.result, 'Succeeded', 'Skipped'),
            not(or(failed(), canceled()))
          )
        steps:
        - template: tasks/update-slack-message.yml@templates
          parameters:
            slackToken: $(slackToken)
            messageIdArtifact: slackbuildmessage  
            update:
              - blockId: ios
                path: text.text
                value: '*:ios: iOS :ios:*#n*Status:* Dowloading code :downloading:'
                operation: replace
                
        - checkout: self
          lfs: true
          fetchTags: false
        - template: pipelines/unity-build.yml@templates
          parameters:
            configuration: $(configuration)
            platform: iOS
            unity_username: $(unity_email)
            unity_password: $(unity_password)
            unity_serial: $(unity_serial)
            workingDirectory: .
            branchName: $(branchName)
            slackToken: $(slackToken)
            kuttKey: $(kuttKey)
            developmentiOSCertPwd: $(developmentiOSCertPwd)
            distributioniOSCertPwd: $(distributioniOSCertPwd)
            runTestLab: ${{ variables.runTestLab }}
            publishDlls: false
            environment: ${{ variables.environment }}
            dev_build: ${{ variables.dev_build }}


# GAME LOGIC
      - job: BuildAndPushGameLogic
        pool:
          vmImage: "ubuntu-latest"
        dependsOn: AndroidBuild
        displayName: Build and Push Game Logic
        condition: eq(dependencies.AndroidBuild.result, 'Succeeded')
        steps:
          - checkout: none
            # Sparse checkout is a lot faster
          - template: pipelines/bitbucket-sparse-checkout.yml@templates
            parameters:
              repositoryName: blast-royale
              commit: $(Build.SourceVersion)
              bitbucketToken: $(BITBUCKET-BLAST-ROYALE-ACCESS-TOKEN)
              directory: 'Backend/'
              
          - download: current
            artifact: 'GameDlls'
          - bash: |
              set -x
              
              dllDir=$(Pipeline.Workspace)/GameDlls
              ls -la $dllDir
            
              cp -vf $dllDir/*.dll "$(System.DefaultWorkingDirectory)/Backend/Lib/"
              cp -vf $dllDir/*.dll "$(System.DefaultWorkingDirectory)/Backend/UnityLib/"
              cp -vf $dllDir/*.json "$(System.DefaultWorkingDirectory)/Backend/ServerCommon/Resources/"
            displayName: Copy the Dlls
          - template: pipelines/game-logic-build-push.yml@templates  
           
            
## Quantum Plugin Build
      - job: BuildQuantumPlugin
        displayName: Build/Push Quantum Plugin
        pool:
          vmImage: 'windows-latest'
        # Run just for staging from now
        dependsOn: AndroidBuild
        condition: |
          and(
              eq('${{ variables.environment }}', 'STAGE_SERVER'),
              eq(dependencies.AndroidBuild.result, 'Succeeded')
          )
        steps:
          - checkout: none
            # Sparse checkout is a lot faster
          - template: pipelines/bitbucket-sparse-checkout.yml@templates
            parameters:
              repositoryName: blast-royale
              commit: $(Build.SourceVersion)
              bitbucketToken: $(BITBUCKET-BLAST-ROYALE-ACCESS-TOKEN)
              directory: 'Quantum/quantum_server'
          
          - download: current
            artifact: 'GameDlls'
            displayName: Download game dlls
            
          - template: pipelines/quantum-plugin-build-push.yml@templates  
            parameters:
              gameDllsDir: $(Pipeline.Workspace)/GameDlls
              photonCustomer: FirstLightDev
              photonKey: $(STAGING-QUANTUM-SERVER-KEY)
              photonAppId: ***REMOVED***
              # Only bump version on Automatic triggers or manually inputted
              bumpVersion: ${{ variables.isQuantumPluginBumpVersion }}
    