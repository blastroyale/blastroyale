component Collectable
{
	[HideInInspector] GameId GameId;
	[HideInInspector] array<FP>[PLAYER_COUNT] CollectorsEndTime;
	[HideInInspector] EntityRef Spawner;
	[HideInInspector] FP PickupRadius;  
	[HideInInspector] FPVector3 OriginPosition;
	[HideInInspector] FP AllowedToPickupTime;
}

synced event OnStartedCollecting
{
	entity_ref CollectableEntity;
	Collectable Collectable;
	player_ref Player;
	entity_ref PlayerEntity;
}

synced event OnStoppedCollecting
{
	entity_ref CollectableEntity;
	player_ref Player;
	entity_ref PlayerEntity;
}

signal CollectableCollected(GameId CollectableId, entity_ref CollectableEntity, player_ref Player, entity_ref PlayerEntity, entity_ref Spawner);
synced event OnCollectableCollected
{
	GameId CollectableId;
	entity_ref CollectableEntity;
	player_ref Player;
	entity_ref PlayerEntity;
	entity_ref Spawner;
	FPVector3 CollectablePosition;
}

synced event OnCollectableBlocked
{
	GameId CollectableId;
	entity_ref CollectableEntity;
	player_ref Player;
	entity_ref PlayerEntity;
}

synced event GameItemCollected {
    entity_ref PlayerEntity;
    player_ref PlayerRef;
    GameId Collected;
    ushort Amount;
}

signal OnConsumableCollected(PlayerRef PlayerRef EntityRef EntityRef Consumable Consumable Collectable Collectable);