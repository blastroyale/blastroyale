#define PLAYER_COUNT 32
#define MAX_WEAPONS 3
#define WEAPON_INDEX_DEFAULT 0
#define WEAPON_INDEX_PRIMARY 1
#define WEAPON_INDEX_SECONDARY 2
#define MAX_GEAR 5
#define GEAR_INDEX_WEAPON 0
#define GEAR_INDEX_HELMET 1
#define GEAR_INDEX_AMULET 2
#define GEAR_INDEX_ARMOR 3
#define GEAR_INDEX_SHIELD 4
#pragma max_players PLAYER_COUNT

// COMPONENTS

component AlivePlayerCharacter
{
    bool InCircle;
    bool AboveGroundIllegally;
}

component DeadPlayerCharacter
{
	player_ref Killer;
	entity_ref KillerEntity;
	FP TimeOfDeath;
}

struct WeaponSlot
{
	Equipment Weapon;
	array<Special>[MAX_SPECIALS] Specials;
	int MagazineShotCount;
	int MagazineSize;
	FP ReloadTime;
	int AmmoCostPerShot;
}

component PlayerCharacter
{
	AssetRefHFSMRoot HfsmRootRef;
	AssetRefAIBlackboard BlackboardRef;
	AssetRefCharacterController3DConfig KccConfigRef;
	FPVector3 ProjectileSpawnOffset;
	[HideInInspector] player_ref Player;
	[HideInInspector] Int32 TeamId;
	[HideInInspector] Int32 CurrentWeaponSlot;
	[HideInInspector] array<WeaponSlot>[MAX_WEAPONS] WeaponSlots;
	[HideInInspector] array<Equipment>[MAX_GEAR] Gear;
	[HideInInspector] Int32 DroppedLoadoutFlags;
    [HideInInspector] Int16 CurrentEnergy;
}

component PlayerCharging
{
	FPVector3 ChargeStartPos;
	FPVector3 ChargeEndPos;
	FP ChargeDuration;
	FP ChargeStartTime;
	FP PowerAmount;
}

signal PlayerDead(player_ref playerDead, entity_ref entityDead);
signal PlayerKilledPlayer(player_ref playerDead, entity_ref entityDead, player_ref playerKiller, entity_ref entityKiller);
signal PlayerColliderDisabled(entity_ref playerEntity);