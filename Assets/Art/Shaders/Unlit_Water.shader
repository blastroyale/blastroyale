Shader "FLG/Unlit/Water"
{
    Properties
    {
        // What color the water will sample when the surface below is shallow.
        _DepthGradientShallow("Depth Gradient Shallow", Color) = (0.325, 0.807, 0.971, 0.725)

        // What color the water will sample when the surface below is at its deepest.
        _DepthGradientDeep("Depth Gradient Deep", Color) = (0.086, 0.407, 1, 0.749)

        // Maximum distance the surface below the water will affect the color gradient.
        _DepthMaxDistance("Depth Maximum Distance", Float) = 1

        // Color to render the foam generated by objects intersecting the surface.
        _FoamColor("Foam Color", Color) = (1,1,1,1)

        // Noise texture used to generate waves.
        _SurfaceNoise("Surface Noise", 2D) = "white" {}

        // Speed, in UVs per second the noise will scroll. Only the xy components are used.
        _SurfaceNoiseScroll("Surface Noise Scroll Amount", Vector) = (0.03, 0.03, 0, 0)

        // Values in the noise texture above this cutoff are rendered on the surface.
        _SurfaceNoiseCutoff("Surface Noise Cutoff", Range(0, 1)) = 0.777

        // Red and green channels of this texture are used to offset the
        // noise texture to create distortion in the waves.
        _SurfaceDistortion("Surface Distortion", 2D) = "white" {}

        // Multiplies the distortion by this value.
        _SurfaceDistortionAmount("Surface Distortion Amount", Range(0, 1)) = 0.27

        // Control the distance that surfaces below the water will contribute
        // to foam being rendered.
        _FoamMaxDistance("Foam Maximum Distance", Float) = 0.4
        _FoamMinDistance("Foam Minimum Distance", Float) = 0.04
    }
    SubShader
    {
        Tags
        {
            "Queue" = "Transparent"
        }

        Pass
        {
            // Transparent "normal" blending.
            Blend SrcAlpha OneMinusSrcAlpha
            ZWrite Off

            HLSLPROGRAM
            #define SMOOTHSTEP_AA 0.01

            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"


            // Blends two colors using the same algorithm that our shader is using
            // to blend with the screen. This is usually called "normal blending",
            // and is similar to how software like Photoshop blends two layers.
            half4 alphaBlend(half4 top, half4 bottom)
            {
                half3 color = (top.rgb * top.a) + (bottom.rgb * (1 - top.a));
                half alpha = top.a + bottom.a * (1 - top.a);

                return half4(color, alpha);
            }

            struct appdata
            {
                half4 vertex : POSITION;
                half4 uv : TEXCOORD0;
                half3 normal : NORMAL;
            };

            struct v2f
            {
                half4 vertex : SV_POSITION;
                half2 noiseUV : TEXCOORD0;
                half2 distortUV : TEXCOORD1;
                half4 screenPosition : TEXCOORD2;
                half3 viewNormal : NORMAL;
            };

            sampler2D _SurfaceNoise;
            half4 _SurfaceNoise_ST;

            sampler2D _SurfaceDistortion;
            half4 _SurfaceDistortion_ST;

            v2f vert(appdata v)
            {
                v2f o;

                const VertexPositionInputs inputs = GetVertexPositionInputs(v.vertex.xyz);

                o.vertex = inputs.positionCS;
                o.screenPosition = inputs.positionNDC;
                o.distortUV = TRANSFORM_TEX(v.uv, _SurfaceDistortion);
                o.noiseUV = TRANSFORM_TEX(v.uv, _SurfaceNoise);
                o.viewNormal = TransformWorldToViewNormal(TransformObjectToWorldNormal(v.normal));

                return o;
            }

            half4 _DepthGradientShallow;
            half4 _DepthGradientDeep;
            half4 _FoamColor;

            half _DepthMaxDistance;
            half _FoamMaxDistance;
            half _FoamMinDistance;
            half _SurfaceNoiseCutoff;
            half _SurfaceDistortionAmount;

            half2 _SurfaceNoiseScroll;

            sampler2D _CameraDepthTexture;
            sampler2D _CameraNormalsTexture;

            half4 frag(v2f i) : SV_Target
            {
                // Retrieve the current depth value of the surface behind the
                // pixel we are currently rendering.
                half existingDepth01 = tex2Dproj(_CameraDepthTexture, i.screenPosition).r;
                // Convert the depth from non-linear 0...1 range to linear
                // depth, in Unity units.
                half existingDepthLinear = LinearEyeDepth(existingDepth01, _ZBufferParams);

                // Difference, in Unity units, between the water's surface and the object behind it.
                half depthDifference = existingDepthLinear - i.screenPosition.w;

                // Calculate the color of the water based on the depth using our two gradient colors.
                half waterDepthDifference01 = saturate(depthDifference / _DepthMaxDistance);
                half4 waterColor = lerp(_DepthGradientShallow, _DepthGradientDeep, waterDepthDifference01);

                // Retrieve the view-space normal of the surface behind the
                // pixel we are currently rendering.
                half3 existingNormal = tex2Dproj(_CameraNormalsTexture, i.screenPosition);

                //return half4(existingNormal, 1);

                // Modulate the amount of foam we display based on the difference
                // between the normals of our water surface and the object behind it.
                // Larger differences allow for extra foam to attempt to keep the overall
                // amount consistent.
                half3 normalDot = saturate(dot(existingNormal, i.viewNormal));
                //return half4(normalDot, 1);
                half foamDistance = lerp(_FoamMaxDistance, _FoamMinDistance, normalDot);
                half foamDepthDifference01 = saturate(depthDifference / foamDistance);

                half surfaceNoiseCutoff = foamDepthDifference01 * _SurfaceNoiseCutoff;

                half2 distortSample = (tex2D(_SurfaceDistortion, i.distortUV).xy * 2 - 1) * _SurfaceDistortionAmount;

                // Distort the noise UV based off the RG channels (using xy here) of the distortion texture.
                // Also offset it by time, scaled by the scroll speed.
                half2 noiseUV = half2((i.noiseUV.x + _Time.y * _SurfaceNoiseScroll.x) + distortSample.x,
                                        (i.noiseUV.y + _Time.y * _SurfaceNoiseScroll
                                            .y) + distortSample.y);
                half surfaceNoiseSample = tex2D(_SurfaceNoise, noiseUV).r;

                // Use smoothstep to ensure we get some anti-aliasing in the transition from foam to surface.
                // Uncomment the line below to see how it looks without AA.
                // float surfaceNoise = surfaceNoiseSample > surfaceNoiseCutoff ? 1 : 0;
                half surfaceNoise = smoothstep(surfaceNoiseCutoff - SMOOTHSTEP_AA, surfaceNoiseCutoff + SMOOTHSTEP_AA,
                                                                 surfaceNoiseSample);

                half4 surfaceNoiseColor = _FoamColor;
                surfaceNoiseColor.a *= surfaceNoise;

                // Use normal alpha blending to combine the foam with the surface.
                return alphaBlend(surfaceNoiseColor, waterColor);
            }
            ENDHLSL
        }
    }
}