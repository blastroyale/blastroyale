component Collectable
{
	[HideInInspector] GameId GameId;
	[HideInInspector] EntityRef Spawner;
	[HideInInspector] FPVector2 OriginPosition;
}

component CollectableTime 
{
	[HideInInspector, AllocateOnComponentAdded, FreeOnComponentRemoved] dictionary<EntityRef, FP> CollectorsEndTime;
}

struct CollectableChunk
{
    hash_set<entity_ref> Entities;
}

singleton component CollectableChunks
{
    [HideInInspector, AllocateOnComponentAdded, FreeOnComponentRemoved] dictionary<Int16, CollectableChunk> Collectables;
}

component ChunkDebug {
    short Chunk;
}

synced event OnStartedCollecting
{
	entity_ref CollectableEntity;
	Collectable Collectable;
	entity_ref CollectorEntity;
}

synced event OnStoppedCollecting
{
	entity_ref CollectableEntity;
	entity_ref CollectorEntity;
}

signal CollectableCollected(GameId CollectableId, entity_ref CollectableEntity, entity_ref CollectorEntity, entity_ref Spawner);
synced event OnCollectableCollected
{
	GameId CollectableId;
	entity_ref CollectableEntity;
	entity_ref CollectorEntity;
	entity_ref Spawner;
	FPVector2 CollectablePosition;
}

synced event OnCollectableBlocked
{
	GameId CollectableId;
	entity_ref CollectableEntity;
	player_ref Player;
	entity_ref PlayerEntity;
}

synced event GameItemCollected {
    entity_ref PlayerEntity;
    player_ref PlayerRef;
    GameId Collected;
    ushort Amount;
}

